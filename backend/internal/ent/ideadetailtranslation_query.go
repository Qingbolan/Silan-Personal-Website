// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/ideadetailtranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaDetailTranslationQuery is the builder for querying IdeaDetailTranslation entities.
type IdeaDetailTranslationQuery struct {
	config
	ctx            *QueryContext
	order          []ideadetailtranslation.OrderOption
	inters         []Interceptor
	predicates     []predicate.IdeaDetailTranslation
	withIdeaDetail *IdeaDetailQuery
	withLanguage   *LanguageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IdeaDetailTranslationQuery builder.
func (idtq *IdeaDetailTranslationQuery) Where(ps ...predicate.IdeaDetailTranslation) *IdeaDetailTranslationQuery {
	idtq.predicates = append(idtq.predicates, ps...)
	return idtq
}

// Limit the number of records to be returned by this query.
func (idtq *IdeaDetailTranslationQuery) Limit(limit int) *IdeaDetailTranslationQuery {
	idtq.ctx.Limit = &limit
	return idtq
}

// Offset to start from.
func (idtq *IdeaDetailTranslationQuery) Offset(offset int) *IdeaDetailTranslationQuery {
	idtq.ctx.Offset = &offset
	return idtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (idtq *IdeaDetailTranslationQuery) Unique(unique bool) *IdeaDetailTranslationQuery {
	idtq.ctx.Unique = &unique
	return idtq
}

// Order specifies how the records should be ordered.
func (idtq *IdeaDetailTranslationQuery) Order(o ...ideadetailtranslation.OrderOption) *IdeaDetailTranslationQuery {
	idtq.order = append(idtq.order, o...)
	return idtq
}

// QueryIdeaDetail chains the current query on the "idea_detail" edge.
func (idtq *IdeaDetailTranslationQuery) QueryIdeaDetail() *IdeaDetailQuery {
	query := (&IdeaDetailClient{config: idtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ideadetailtranslation.Table, ideadetailtranslation.FieldID, selector),
			sqlgraph.To(ideadetail.Table, ideadetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ideadetailtranslation.IdeaDetailTable, ideadetailtranslation.IdeaDetailColumn),
		)
		fromU = sqlgraph.SetNeighbors(idtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLanguage chains the current query on the "language" edge.
func (idtq *IdeaDetailTranslationQuery) QueryLanguage() *LanguageQuery {
	query := (&LanguageClient{config: idtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ideadetailtranslation.Table, ideadetailtranslation.FieldID, selector),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ideadetailtranslation.LanguageTable, ideadetailtranslation.LanguageColumn),
		)
		fromU = sqlgraph.SetNeighbors(idtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IdeaDetailTranslation entity from the query.
// Returns a *NotFoundError when no IdeaDetailTranslation was found.
func (idtq *IdeaDetailTranslationQuery) First(ctx context.Context) (*IdeaDetailTranslation, error) {
	nodes, err := idtq.Limit(1).All(setContextOp(ctx, idtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ideadetailtranslation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) FirstX(ctx context.Context) *IdeaDetailTranslation {
	node, err := idtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IdeaDetailTranslation ID from the query.
// Returns a *NotFoundError when no IdeaDetailTranslation ID was found.
func (idtq *IdeaDetailTranslationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idtq.Limit(1).IDs(setContextOp(ctx, idtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ideadetailtranslation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := idtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IdeaDetailTranslation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IdeaDetailTranslation entity is found.
// Returns a *NotFoundError when no IdeaDetailTranslation entities are found.
func (idtq *IdeaDetailTranslationQuery) Only(ctx context.Context) (*IdeaDetailTranslation, error) {
	nodes, err := idtq.Limit(2).All(setContextOp(ctx, idtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ideadetailtranslation.Label}
	default:
		return nil, &NotSingularError{ideadetailtranslation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) OnlyX(ctx context.Context) *IdeaDetailTranslation {
	node, err := idtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IdeaDetailTranslation ID in the query.
// Returns a *NotSingularError when more than one IdeaDetailTranslation ID is found.
// Returns a *NotFoundError when no entities are found.
func (idtq *IdeaDetailTranslationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = idtq.Limit(2).IDs(setContextOp(ctx, idtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ideadetailtranslation.Label}
	default:
		err = &NotSingularError{ideadetailtranslation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := idtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IdeaDetailTranslations.
func (idtq *IdeaDetailTranslationQuery) All(ctx context.Context) ([]*IdeaDetailTranslation, error) {
	ctx = setContextOp(ctx, idtq.ctx, ent.OpQueryAll)
	if err := idtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IdeaDetailTranslation, *IdeaDetailTranslationQuery]()
	return withInterceptors[[]*IdeaDetailTranslation](ctx, idtq, qr, idtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) AllX(ctx context.Context) []*IdeaDetailTranslation {
	nodes, err := idtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IdeaDetailTranslation IDs.
func (idtq *IdeaDetailTranslationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if idtq.ctx.Unique == nil && idtq.path != nil {
		idtq.Unique(true)
	}
	ctx = setContextOp(ctx, idtq.ctx, ent.OpQueryIDs)
	if err = idtq.Select(ideadetailtranslation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := idtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (idtq *IdeaDetailTranslationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, idtq.ctx, ent.OpQueryCount)
	if err := idtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, idtq, querierCount[*IdeaDetailTranslationQuery](), idtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) CountX(ctx context.Context) int {
	count, err := idtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (idtq *IdeaDetailTranslationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, idtq.ctx, ent.OpQueryExist)
	switch _, err := idtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (idtq *IdeaDetailTranslationQuery) ExistX(ctx context.Context) bool {
	exist, err := idtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IdeaDetailTranslationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (idtq *IdeaDetailTranslationQuery) Clone() *IdeaDetailTranslationQuery {
	if idtq == nil {
		return nil
	}
	return &IdeaDetailTranslationQuery{
		config:         idtq.config,
		ctx:            idtq.ctx.Clone(),
		order:          append([]ideadetailtranslation.OrderOption{}, idtq.order...),
		inters:         append([]Interceptor{}, idtq.inters...),
		predicates:     append([]predicate.IdeaDetailTranslation{}, idtq.predicates...),
		withIdeaDetail: idtq.withIdeaDetail.Clone(),
		withLanguage:   idtq.withLanguage.Clone(),
		// clone intermediate query.
		sql:  idtq.sql.Clone(),
		path: idtq.path,
	}
}

// WithIdeaDetail tells the query-builder to eager-load the nodes that are connected to
// the "idea_detail" edge. The optional arguments are used to configure the query builder of the edge.
func (idtq *IdeaDetailTranslationQuery) WithIdeaDetail(opts ...func(*IdeaDetailQuery)) *IdeaDetailTranslationQuery {
	query := (&IdeaDetailClient{config: idtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idtq.withIdeaDetail = query
	return idtq
}

// WithLanguage tells the query-builder to eager-load the nodes that are connected to
// the "language" edge. The optional arguments are used to configure the query builder of the edge.
func (idtq *IdeaDetailTranslationQuery) WithLanguage(opts ...func(*LanguageQuery)) *IdeaDetailTranslationQuery {
	query := (&LanguageClient{config: idtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idtq.withLanguage = query
	return idtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IdeaDetailID uuid.UUID `json:"idea_detail_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IdeaDetailTranslation.Query().
//		GroupBy(ideadetailtranslation.FieldIdeaDetailID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (idtq *IdeaDetailTranslationQuery) GroupBy(field string, fields ...string) *IdeaDetailTranslationGroupBy {
	idtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IdeaDetailTranslationGroupBy{build: idtq}
	grbuild.flds = &idtq.ctx.Fields
	grbuild.label = ideadetailtranslation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IdeaDetailID uuid.UUID `json:"idea_detail_id,omitempty"`
//	}
//
//	client.IdeaDetailTranslation.Query().
//		Select(ideadetailtranslation.FieldIdeaDetailID).
//		Scan(ctx, &v)
func (idtq *IdeaDetailTranslationQuery) Select(fields ...string) *IdeaDetailTranslationSelect {
	idtq.ctx.Fields = append(idtq.ctx.Fields, fields...)
	sbuild := &IdeaDetailTranslationSelect{IdeaDetailTranslationQuery: idtq}
	sbuild.label = ideadetailtranslation.Label
	sbuild.flds, sbuild.scan = &idtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IdeaDetailTranslationSelect configured with the given aggregations.
func (idtq *IdeaDetailTranslationQuery) Aggregate(fns ...AggregateFunc) *IdeaDetailTranslationSelect {
	return idtq.Select().Aggregate(fns...)
}

func (idtq *IdeaDetailTranslationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range idtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, idtq); err != nil {
				return err
			}
		}
	}
	for _, f := range idtq.ctx.Fields {
		if !ideadetailtranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if idtq.path != nil {
		prev, err := idtq.path(ctx)
		if err != nil {
			return err
		}
		idtq.sql = prev
	}
	return nil
}

func (idtq *IdeaDetailTranslationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IdeaDetailTranslation, error) {
	var (
		nodes       = []*IdeaDetailTranslation{}
		_spec       = idtq.querySpec()
		loadedTypes = [2]bool{
			idtq.withIdeaDetail != nil,
			idtq.withLanguage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IdeaDetailTranslation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IdeaDetailTranslation{config: idtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, idtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := idtq.withIdeaDetail; query != nil {
		if err := idtq.loadIdeaDetail(ctx, query, nodes, nil,
			func(n *IdeaDetailTranslation, e *IdeaDetail) { n.Edges.IdeaDetail = e }); err != nil {
			return nil, err
		}
	}
	if query := idtq.withLanguage; query != nil {
		if err := idtq.loadLanguage(ctx, query, nodes, nil,
			func(n *IdeaDetailTranslation, e *Language) { n.Edges.Language = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (idtq *IdeaDetailTranslationQuery) loadIdeaDetail(ctx context.Context, query *IdeaDetailQuery, nodes []*IdeaDetailTranslation, init func(*IdeaDetailTranslation), assign func(*IdeaDetailTranslation, *IdeaDetail)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IdeaDetailTranslation)
	for i := range nodes {
		fk := nodes[i].IdeaDetailID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ideadetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "idea_detail_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (idtq *IdeaDetailTranslationQuery) loadLanguage(ctx context.Context, query *LanguageQuery, nodes []*IdeaDetailTranslation, init func(*IdeaDetailTranslation), assign func(*IdeaDetailTranslation, *Language)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*IdeaDetailTranslation)
	for i := range nodes {
		fk := nodes[i].LanguageCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(language.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "language_code" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (idtq *IdeaDetailTranslationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := idtq.querySpec()
	_spec.Node.Columns = idtq.ctx.Fields
	if len(idtq.ctx.Fields) > 0 {
		_spec.Unique = idtq.ctx.Unique != nil && *idtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, idtq.driver, _spec)
}

func (idtq *IdeaDetailTranslationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ideadetailtranslation.Table, ideadetailtranslation.Columns, sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID))
	_spec.From = idtq.sql
	if unique := idtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if idtq.path != nil {
		_spec.Unique = true
	}
	if fields := idtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ideadetailtranslation.FieldID)
		for i := range fields {
			if fields[i] != ideadetailtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if idtq.withIdeaDetail != nil {
			_spec.Node.AddColumnOnce(ideadetailtranslation.FieldIdeaDetailID)
		}
		if idtq.withLanguage != nil {
			_spec.Node.AddColumnOnce(ideadetailtranslation.FieldLanguageCode)
		}
	}
	if ps := idtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := idtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := idtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := idtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (idtq *IdeaDetailTranslationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(idtq.driver.Dialect())
	t1 := builder.Table(ideadetailtranslation.Table)
	columns := idtq.ctx.Fields
	if len(columns) == 0 {
		columns = ideadetailtranslation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if idtq.sql != nil {
		selector = idtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if idtq.ctx.Unique != nil && *idtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range idtq.predicates {
		p(selector)
	}
	for _, p := range idtq.order {
		p(selector)
	}
	if offset := idtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := idtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IdeaDetailTranslationGroupBy is the group-by builder for IdeaDetailTranslation entities.
type IdeaDetailTranslationGroupBy struct {
	selector
	build *IdeaDetailTranslationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (idtgb *IdeaDetailTranslationGroupBy) Aggregate(fns ...AggregateFunc) *IdeaDetailTranslationGroupBy {
	idtgb.fns = append(idtgb.fns, fns...)
	return idtgb
}

// Scan applies the selector query and scans the result into the given value.
func (idtgb *IdeaDetailTranslationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idtgb.build.ctx, ent.OpQueryGroupBy)
	if err := idtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdeaDetailTranslationQuery, *IdeaDetailTranslationGroupBy](ctx, idtgb.build, idtgb, idtgb.build.inters, v)
}

func (idtgb *IdeaDetailTranslationGroupBy) sqlScan(ctx context.Context, root *IdeaDetailTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(idtgb.fns))
	for _, fn := range idtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*idtgb.flds)+len(idtgb.fns))
		for _, f := range *idtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*idtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IdeaDetailTranslationSelect is the builder for selecting fields of IdeaDetailTranslation entities.
type IdeaDetailTranslationSelect struct {
	*IdeaDetailTranslationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (idts *IdeaDetailTranslationSelect) Aggregate(fns ...AggregateFunc) *IdeaDetailTranslationSelect {
	idts.fns = append(idts.fns, fns...)
	return idts
}

// Scan applies the selector query and scans the result into the given value.
func (idts *IdeaDetailTranslationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idts.ctx, ent.OpQuerySelect)
	if err := idts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdeaDetailTranslationQuery, *IdeaDetailTranslationSelect](ctx, idts.IdeaDetailTranslationQuery, idts, idts.inters, v)
}

func (idts *IdeaDetailTranslationSelect) sqlScan(ctx context.Context, root *IdeaDetailTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(idts.fns))
	for _, fn := range idts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*idts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
