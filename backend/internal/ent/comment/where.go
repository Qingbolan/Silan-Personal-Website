// Code generated by ent, DO NOT EDIT.

package comment

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldID, id))
}

// EntityType applies equality check predicate on the "entity_type" field. It's identical to EntityTypeEQ.
func EntityType(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldEntityType, v))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldEntityID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldParentID, v))
}

// AuthorName applies equality check predicate on the "author_name" field. It's identical to AuthorNameEQ.
func AuthorName(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorEmail applies equality check predicate on the "author_email" field. It's identical to AuthorEmailEQ.
func AuthorEmail(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorEmail, v))
}

// AuthorWebsite applies equality check predicate on the "author_website" field. It's identical to AuthorWebsiteEQ.
func AuthorWebsite(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorWebsite, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContent, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldType, v))
}

// IsApproved applies equality check predicate on the "is_approved" field. It's identical to IsApprovedEQ.
func IsApproved(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldIsApproved, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserAgent, v))
}

// UserIdentityID applies equality check predicate on the "user_identity_id" field. It's identical to UserIdentityIDEQ.
func UserIdentityID(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserIdentityID, v))
}

// LikesCount applies equality check predicate on the "likes_count" field. It's identical to LikesCountEQ.
func LikesCount(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLikesCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldEntityType, v))
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldEntityType, v))
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldEntityType, vs...))
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldEntityType, vs...))
}

// EntityTypeGT applies the GT predicate on the "entity_type" field.
func EntityTypeGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldEntityType, v))
}

// EntityTypeGTE applies the GTE predicate on the "entity_type" field.
func EntityTypeGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldEntityType, v))
}

// EntityTypeLT applies the LT predicate on the "entity_type" field.
func EntityTypeLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldEntityType, v))
}

// EntityTypeLTE applies the LTE predicate on the "entity_type" field.
func EntityTypeLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldEntityType, v))
}

// EntityTypeContains applies the Contains predicate on the "entity_type" field.
func EntityTypeContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldEntityType, v))
}

// EntityTypeHasPrefix applies the HasPrefix predicate on the "entity_type" field.
func EntityTypeHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldEntityType, v))
}

// EntityTypeHasSuffix applies the HasSuffix predicate on the "entity_type" field.
func EntityTypeHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldEntityType, v))
}

// EntityTypeEqualFold applies the EqualFold predicate on the "entity_type" field.
func EntityTypeEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldEntityType, v))
}

// EntityTypeContainsFold applies the ContainsFold predicate on the "entity_type" field.
func EntityTypeContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldEntityType, v))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldEntityID, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uuid.UUID) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldParentID))
}

// AuthorNameEQ applies the EQ predicate on the "author_name" field.
func AuthorNameEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorNameNEQ applies the NEQ predicate on the "author_name" field.
func AuthorNameNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldAuthorName, v))
}

// AuthorNameIn applies the In predicate on the "author_name" field.
func AuthorNameIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldAuthorName, vs...))
}

// AuthorNameNotIn applies the NotIn predicate on the "author_name" field.
func AuthorNameNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldAuthorName, vs...))
}

// AuthorNameGT applies the GT predicate on the "author_name" field.
func AuthorNameGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldAuthorName, v))
}

// AuthorNameGTE applies the GTE predicate on the "author_name" field.
func AuthorNameGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldAuthorName, v))
}

// AuthorNameLT applies the LT predicate on the "author_name" field.
func AuthorNameLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldAuthorName, v))
}

// AuthorNameLTE applies the LTE predicate on the "author_name" field.
func AuthorNameLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldAuthorName, v))
}

// AuthorNameContains applies the Contains predicate on the "author_name" field.
func AuthorNameContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldAuthorName, v))
}

// AuthorNameHasPrefix applies the HasPrefix predicate on the "author_name" field.
func AuthorNameHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldAuthorName, v))
}

// AuthorNameHasSuffix applies the HasSuffix predicate on the "author_name" field.
func AuthorNameHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldAuthorName, v))
}

// AuthorNameEqualFold applies the EqualFold predicate on the "author_name" field.
func AuthorNameEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldAuthorName, v))
}

// AuthorNameContainsFold applies the ContainsFold predicate on the "author_name" field.
func AuthorNameContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldAuthorName, v))
}

// AuthorEmailEQ applies the EQ predicate on the "author_email" field.
func AuthorEmailEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorEmail, v))
}

// AuthorEmailNEQ applies the NEQ predicate on the "author_email" field.
func AuthorEmailNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldAuthorEmail, v))
}

// AuthorEmailIn applies the In predicate on the "author_email" field.
func AuthorEmailIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldAuthorEmail, vs...))
}

// AuthorEmailNotIn applies the NotIn predicate on the "author_email" field.
func AuthorEmailNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldAuthorEmail, vs...))
}

// AuthorEmailGT applies the GT predicate on the "author_email" field.
func AuthorEmailGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldAuthorEmail, v))
}

// AuthorEmailGTE applies the GTE predicate on the "author_email" field.
func AuthorEmailGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldAuthorEmail, v))
}

// AuthorEmailLT applies the LT predicate on the "author_email" field.
func AuthorEmailLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldAuthorEmail, v))
}

// AuthorEmailLTE applies the LTE predicate on the "author_email" field.
func AuthorEmailLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldAuthorEmail, v))
}

// AuthorEmailContains applies the Contains predicate on the "author_email" field.
func AuthorEmailContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldAuthorEmail, v))
}

// AuthorEmailHasPrefix applies the HasPrefix predicate on the "author_email" field.
func AuthorEmailHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldAuthorEmail, v))
}

// AuthorEmailHasSuffix applies the HasSuffix predicate on the "author_email" field.
func AuthorEmailHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldAuthorEmail, v))
}

// AuthorEmailEqualFold applies the EqualFold predicate on the "author_email" field.
func AuthorEmailEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldAuthorEmail, v))
}

// AuthorEmailContainsFold applies the ContainsFold predicate on the "author_email" field.
func AuthorEmailContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldAuthorEmail, v))
}

// AuthorWebsiteEQ applies the EQ predicate on the "author_website" field.
func AuthorWebsiteEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorWebsite, v))
}

// AuthorWebsiteNEQ applies the NEQ predicate on the "author_website" field.
func AuthorWebsiteNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldAuthorWebsite, v))
}

// AuthorWebsiteIn applies the In predicate on the "author_website" field.
func AuthorWebsiteIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldAuthorWebsite, vs...))
}

// AuthorWebsiteNotIn applies the NotIn predicate on the "author_website" field.
func AuthorWebsiteNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldAuthorWebsite, vs...))
}

// AuthorWebsiteGT applies the GT predicate on the "author_website" field.
func AuthorWebsiteGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldAuthorWebsite, v))
}

// AuthorWebsiteGTE applies the GTE predicate on the "author_website" field.
func AuthorWebsiteGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldAuthorWebsite, v))
}

// AuthorWebsiteLT applies the LT predicate on the "author_website" field.
func AuthorWebsiteLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldAuthorWebsite, v))
}

// AuthorWebsiteLTE applies the LTE predicate on the "author_website" field.
func AuthorWebsiteLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldAuthorWebsite, v))
}

// AuthorWebsiteContains applies the Contains predicate on the "author_website" field.
func AuthorWebsiteContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldAuthorWebsite, v))
}

// AuthorWebsiteHasPrefix applies the HasPrefix predicate on the "author_website" field.
func AuthorWebsiteHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldAuthorWebsite, v))
}

// AuthorWebsiteHasSuffix applies the HasSuffix predicate on the "author_website" field.
func AuthorWebsiteHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldAuthorWebsite, v))
}

// AuthorWebsiteIsNil applies the IsNil predicate on the "author_website" field.
func AuthorWebsiteIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldAuthorWebsite))
}

// AuthorWebsiteNotNil applies the NotNil predicate on the "author_website" field.
func AuthorWebsiteNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldAuthorWebsite))
}

// AuthorWebsiteEqualFold applies the EqualFold predicate on the "author_website" field.
func AuthorWebsiteEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldAuthorWebsite, v))
}

// AuthorWebsiteContainsFold applies the ContainsFold predicate on the "author_website" field.
func AuthorWebsiteContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldAuthorWebsite, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldContent, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldType, v))
}

// IsApprovedEQ applies the EQ predicate on the "is_approved" field.
func IsApprovedEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldIsApproved, v))
}

// IsApprovedNEQ applies the NEQ predicate on the "is_approved" field.
func IsApprovedNEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldIsApproved, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldUserAgent, v))
}

// UserIdentityIDEQ applies the EQ predicate on the "user_identity_id" field.
func UserIdentityIDEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserIdentityID, v))
}

// UserIdentityIDNEQ applies the NEQ predicate on the "user_identity_id" field.
func UserIdentityIDNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserIdentityID, v))
}

// UserIdentityIDIn applies the In predicate on the "user_identity_id" field.
func UserIdentityIDIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserIdentityID, vs...))
}

// UserIdentityIDNotIn applies the NotIn predicate on the "user_identity_id" field.
func UserIdentityIDNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserIdentityID, vs...))
}

// UserIdentityIDGT applies the GT predicate on the "user_identity_id" field.
func UserIdentityIDGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUserIdentityID, v))
}

// UserIdentityIDGTE applies the GTE predicate on the "user_identity_id" field.
func UserIdentityIDGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUserIdentityID, v))
}

// UserIdentityIDLT applies the LT predicate on the "user_identity_id" field.
func UserIdentityIDLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUserIdentityID, v))
}

// UserIdentityIDLTE applies the LTE predicate on the "user_identity_id" field.
func UserIdentityIDLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUserIdentityID, v))
}

// UserIdentityIDContains applies the Contains predicate on the "user_identity_id" field.
func UserIdentityIDContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldUserIdentityID, v))
}

// UserIdentityIDHasPrefix applies the HasPrefix predicate on the "user_identity_id" field.
func UserIdentityIDHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldUserIdentityID, v))
}

// UserIdentityIDHasSuffix applies the HasSuffix predicate on the "user_identity_id" field.
func UserIdentityIDHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldUserIdentityID, v))
}

// UserIdentityIDIsNil applies the IsNil predicate on the "user_identity_id" field.
func UserIdentityIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldUserIdentityID))
}

// UserIdentityIDNotNil applies the NotNil predicate on the "user_identity_id" field.
func UserIdentityIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldUserIdentityID))
}

// UserIdentityIDEqualFold applies the EqualFold predicate on the "user_identity_id" field.
func UserIdentityIDEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldUserIdentityID, v))
}

// UserIdentityIDContainsFold applies the ContainsFold predicate on the "user_identity_id" field.
func UserIdentityIDContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldUserIdentityID, v))
}

// LikesCountEQ applies the EQ predicate on the "likes_count" field.
func LikesCountEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLikesCount, v))
}

// LikesCountNEQ applies the NEQ predicate on the "likes_count" field.
func LikesCountNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldLikesCount, v))
}

// LikesCountIn applies the In predicate on the "likes_count" field.
func LikesCountIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldLikesCount, vs...))
}

// LikesCountNotIn applies the NotIn predicate on the "likes_count" field.
func LikesCountNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldLikesCount, vs...))
}

// LikesCountGT applies the GT predicate on the "likes_count" field.
func LikesCountGT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldLikesCount, v))
}

// LikesCountGTE applies the GTE predicate on the "likes_count" field.
func LikesCountGTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldLikesCount, v))
}

// LikesCountLT applies the LT predicate on the "likes_count" field.
func LikesCountLT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldLikesCount, v))
}

// LikesCountLTE applies the LTE predicate on the "likes_count" field.
func LikesCountLTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldLikesCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReplies applies the HasEdge predicate on the "replies" edge.
func HasReplies() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RepliesTable, RepliesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepliesWith applies the HasEdge predicate on the "replies" edge with a given conditions (other predicates).
func HasRepliesWith(preds ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newRepliesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserIdentity applies the HasEdge predicate on the "user_identity" edge.
func HasUserIdentity() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserIdentityTable, UserIdentityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIdentityWith applies the HasEdge predicate on the "user_identity" edge with a given conditions (other predicates).
func HasUserIdentityWith(preds ...predicate.UserIdentity) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newUserIdentityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.NotPredicates(p))
}
