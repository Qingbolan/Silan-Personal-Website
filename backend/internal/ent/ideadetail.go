// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideadetail"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// IdeaDetail is the model entity for the IdeaDetail schema.
type IdeaDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IdeaID holds the value of the "idea_id" field.
	IdeaID uuid.UUID `json:"idea_id,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress string `json:"progress,omitempty"`
	// Results holds the value of the "results" field.
	Results string `json:"results,omitempty"`
	// References holds the value of the "references" field.
	References string `json:"references,omitempty"`
	// EstimatedDurationMonths holds the value of the "estimated_duration_months" field.
	EstimatedDurationMonths int `json:"estimated_duration_months,omitempty"`
	// RequiredResources holds the value of the "required_resources" field.
	RequiredResources string `json:"required_resources,omitempty"`
	// CollaborationNeeded holds the value of the "collaboration_needed" field.
	CollaborationNeeded bool `json:"collaboration_needed,omitempty"`
	// FundingRequired holds the value of the "funding_required" field.
	FundingRequired bool `json:"funding_required,omitempty"`
	// EstimatedBudget holds the value of the "estimated_budget" field.
	EstimatedBudget float64 `json:"estimated_budget,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdeaDetailQuery when eager-loading is set.
	Edges        IdeaDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdeaDetailEdges holds the relations/edges for other nodes in the graph.
type IdeaDetailEdges struct {
	// Idea holds the value of the idea edge.
	Idea *Idea `json:"idea,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*IdeaDetailTranslation `json:"translations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IdeaOrErr returns the Idea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdeaDetailEdges) IdeaOrErr() (*Idea, error) {
	if e.Idea != nil {
		return e.Idea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: idea.Label}
	}
	return nil, &NotLoadedError{edge: "idea"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e IdeaDetailEdges) TranslationsOrErr() ([]*IdeaDetailTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdeaDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ideadetail.FieldCollaborationNeeded, ideadetail.FieldFundingRequired:
			values[i] = new(sql.NullBool)
		case ideadetail.FieldEstimatedBudget:
			values[i] = new(sql.NullFloat64)
		case ideadetail.FieldEstimatedDurationMonths:
			values[i] = new(sql.NullInt64)
		case ideadetail.FieldProgress, ideadetail.FieldResults, ideadetail.FieldReferences, ideadetail.FieldRequiredResources:
			values[i] = new(sql.NullString)
		case ideadetail.FieldCreatedAt, ideadetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ideadetail.FieldID, ideadetail.FieldIdeaID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdeaDetail fields.
func (id *IdeaDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ideadetail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				id.ID = *value
			}
		case ideadetail.FieldIdeaID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field idea_id", values[i])
			} else if value != nil {
				id.IdeaID = *value
			}
		case ideadetail.FieldProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				id.Progress = value.String
			}
		case ideadetail.FieldResults:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field results", values[i])
			} else if value.Valid {
				id.Results = value.String
			}
		case ideadetail.FieldReferences:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field references", values[i])
			} else if value.Valid {
				id.References = value.String
			}
		case ideadetail.FieldEstimatedDurationMonths:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_duration_months", values[i])
			} else if value.Valid {
				id.EstimatedDurationMonths = int(value.Int64)
			}
		case ideadetail.FieldRequiredResources:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field required_resources", values[i])
			} else if value.Valid {
				id.RequiredResources = value.String
			}
		case ideadetail.FieldCollaborationNeeded:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field collaboration_needed", values[i])
			} else if value.Valid {
				id.CollaborationNeeded = value.Bool
			}
		case ideadetail.FieldFundingRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field funding_required", values[i])
			} else if value.Valid {
				id.FundingRequired = value.Bool
			}
		case ideadetail.FieldEstimatedBudget:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_budget", values[i])
			} else if value.Valid {
				id.EstimatedBudget = value.Float64
			}
		case ideadetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				id.CreatedAt = value.Time
			}
		case ideadetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				id.UpdatedAt = value.Time
			}
		default:
			id.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IdeaDetail.
// This includes values selected through modifiers, order, etc.
func (id *IdeaDetail) Value(name string) (ent.Value, error) {
	return id.selectValues.Get(name)
}

// QueryIdea queries the "idea" edge of the IdeaDetail entity.
func (id *IdeaDetail) QueryIdea() *IdeaQuery {
	return NewIdeaDetailClient(id.config).QueryIdea(id)
}

// QueryTranslations queries the "translations" edge of the IdeaDetail entity.
func (id *IdeaDetail) QueryTranslations() *IdeaDetailTranslationQuery {
	return NewIdeaDetailClient(id.config).QueryTranslations(id)
}

// Update returns a builder for updating this IdeaDetail.
// Note that you need to call IdeaDetail.Unwrap() before calling this method if this IdeaDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (id *IdeaDetail) Update() *IdeaDetailUpdateOne {
	return NewIdeaDetailClient(id.config).UpdateOne(id)
}

// Unwrap unwraps the IdeaDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (id *IdeaDetail) Unwrap() *IdeaDetail {
	_tx, ok := id.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdeaDetail is not a transactional entity")
	}
	id.config.driver = _tx.drv
	return id
}

// String implements the fmt.Stringer.
func (id *IdeaDetail) String() string {
	var builder strings.Builder
	builder.WriteString("IdeaDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", id.ID))
	builder.WriteString("idea_id=")
	builder.WriteString(fmt.Sprintf("%v", id.IdeaID))
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(id.Progress)
	builder.WriteString(", ")
	builder.WriteString("results=")
	builder.WriteString(id.Results)
	builder.WriteString(", ")
	builder.WriteString("references=")
	builder.WriteString(id.References)
	builder.WriteString(", ")
	builder.WriteString("estimated_duration_months=")
	builder.WriteString(fmt.Sprintf("%v", id.EstimatedDurationMonths))
	builder.WriteString(", ")
	builder.WriteString("required_resources=")
	builder.WriteString(id.RequiredResources)
	builder.WriteString(", ")
	builder.WriteString("collaboration_needed=")
	builder.WriteString(fmt.Sprintf("%v", id.CollaborationNeeded))
	builder.WriteString(", ")
	builder.WriteString("funding_required=")
	builder.WriteString(fmt.Sprintf("%v", id.FundingRequired))
	builder.WriteString(", ")
	builder.WriteString("estimated_budget=")
	builder.WriteString(fmt.Sprintf("%v", id.EstimatedBudget))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(id.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(id.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IdeaDetails is a parsable slice of IdeaDetail.
type IdeaDetails []*IdeaDetail
