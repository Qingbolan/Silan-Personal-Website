// Code generated by ent, DO NOT EDIT.

package projectview

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the projectview type in the database.
	Label = "project_view"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldUserIdentityID holds the string denoting the user_identity_id field in the database.
	FieldUserIdentityID = "user_identity_id"
	// FieldFingerprint holds the string denoting the fingerprint field in the database.
	FieldFingerprint = "fingerprint"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldReferrer holds the string denoting the referrer field in the database.
	FieldReferrer = "referrer"
	// FieldSessionDuration holds the string denoting the session_duration field in the database.
	FieldSessionDuration = "session_duration"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeUserIdentity holds the string denoting the user_identity edge name in mutations.
	EdgeUserIdentity = "user_identity"
	// Table holds the table name of the projectview in the database.
	Table = "project_views"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "project_views"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// UserIdentityTable is the table that holds the user_identity relation/edge.
	UserIdentityTable = "project_views"
	// UserIdentityInverseTable is the table name for the UserIdentity entity.
	// It exists in this package in order to avoid circular dependency with the "useridentity" package.
	UserIdentityInverseTable = "user_identities"
	// UserIdentityColumn is the table column denoting the user_identity relation/edge.
	UserIdentityColumn = "user_identity_id"
)

// Columns holds all SQL columns for projectview fields.
var Columns = []string{
	FieldID,
	FieldProjectID,
	FieldUserIdentityID,
	FieldFingerprint,
	FieldIPAddress,
	FieldUserAgent,
	FieldReferrer,
	FieldSessionDuration,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	IPAddressValidator func(string) error
	// DefaultSessionDuration holds the default value on creation for the "session_duration" field.
	DefaultSessionDuration int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ProjectView queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByUserIdentityID orders the results by the user_identity_id field.
func ByUserIdentityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserIdentityID, opts...).ToFunc()
}

// ByFingerprint orders the results by the fingerprint field.
func ByFingerprint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFingerprint, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByReferrer orders the results by the referrer field.
func ByReferrer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferrer, opts...).ToFunc()
}

// BySessionDuration orders the results by the session_duration field.
func BySessionDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionDuration, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserIdentityField orders the results by user_identity field.
func ByUserIdentityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIdentityStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newUserIdentityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIdentityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserIdentityTable, UserIdentityColumn),
	)
}
