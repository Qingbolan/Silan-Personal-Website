// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/ideatag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// IdeaTag is the model entity for the IdeaTag schema.
type IdeaTag struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdeaTagQuery when eager-loading is set.
	Edges        IdeaTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdeaTagEdges holds the relations/edges for other nodes in the graph.
type IdeaTagEdges struct {
	// Ideas holds the value of the ideas edge.
	Ideas []*Idea `json:"ideas,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IdeasOrErr returns the Ideas value or an error if the edge
// was not loaded in eager-loading.
func (e IdeaTagEdges) IdeasOrErr() ([]*Idea, error) {
	if e.loadedTypes[0] {
		return e.Ideas, nil
	}
	return nil, &NotLoadedError{edge: "ideas"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdeaTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ideatag.FieldName, ideatag.FieldSlug:
			values[i] = new(sql.NullString)
		case ideatag.FieldCreatedAt, ideatag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ideatag.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdeaTag fields.
func (it *IdeaTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ideatag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				it.ID = *value
			}
		case ideatag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				it.Name = value.String
			}
		case ideatag.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				it.Slug = value.String
			}
		case ideatag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				it.CreatedAt = value.Time
			}
		case ideatag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				it.UpdatedAt = value.Time
			}
		default:
			it.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IdeaTag.
// This includes values selected through modifiers, order, etc.
func (it *IdeaTag) Value(name string) (ent.Value, error) {
	return it.selectValues.Get(name)
}

// QueryIdeas queries the "ideas" edge of the IdeaTag entity.
func (it *IdeaTag) QueryIdeas() *IdeaQuery {
	return NewIdeaTagClient(it.config).QueryIdeas(it)
}

// Update returns a builder for updating this IdeaTag.
// Note that you need to call IdeaTag.Unwrap() before calling this method if this IdeaTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *IdeaTag) Update() *IdeaTagUpdateOne {
	return NewIdeaTagClient(it.config).UpdateOne(it)
}

// Unwrap unwraps the IdeaTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *IdeaTag) Unwrap() *IdeaTag {
	_tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdeaTag is not a transactional entity")
	}
	it.config.driver = _tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *IdeaTag) String() string {
	var builder strings.Builder
	builder.WriteString("IdeaTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", it.ID))
	builder.WriteString("name=")
	builder.WriteString(it.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(it.Slug)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(it.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(it.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IdeaTags is a parsable slice of IdeaTag.
type IdeaTags []*IdeaTag
