// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectview"
	"silan-backend/internal/ent/useridentity"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectViewQuery is the builder for querying ProjectView entities.
type ProjectViewQuery struct {
	config
	ctx              *QueryContext
	order            []projectview.OrderOption
	inters           []Interceptor
	predicates       []predicate.ProjectView
	withProject      *ProjectQuery
	withUserIdentity *UserIdentityQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectViewQuery builder.
func (pvq *ProjectViewQuery) Where(ps ...predicate.ProjectView) *ProjectViewQuery {
	pvq.predicates = append(pvq.predicates, ps...)
	return pvq
}

// Limit the number of records to be returned by this query.
func (pvq *ProjectViewQuery) Limit(limit int) *ProjectViewQuery {
	pvq.ctx.Limit = &limit
	return pvq
}

// Offset to start from.
func (pvq *ProjectViewQuery) Offset(offset int) *ProjectViewQuery {
	pvq.ctx.Offset = &offset
	return pvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pvq *ProjectViewQuery) Unique(unique bool) *ProjectViewQuery {
	pvq.ctx.Unique = &unique
	return pvq
}

// Order specifies how the records should be ordered.
func (pvq *ProjectViewQuery) Order(o ...projectview.OrderOption) *ProjectViewQuery {
	pvq.order = append(pvq.order, o...)
	return pvq
}

// QueryProject chains the current query on the "project" edge.
func (pvq *ProjectViewQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: pvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectview.Table, projectview.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectview.ProjectTable, projectview.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(pvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserIdentity chains the current query on the "user_identity" edge.
func (pvq *ProjectViewQuery) QueryUserIdentity() *UserIdentityQuery {
	query := (&UserIdentityClient{config: pvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectview.Table, projectview.FieldID, selector),
			sqlgraph.To(useridentity.Table, useridentity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, projectview.UserIdentityTable, projectview.UserIdentityColumn),
		)
		fromU = sqlgraph.SetNeighbors(pvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProjectView entity from the query.
// Returns a *NotFoundError when no ProjectView was found.
func (pvq *ProjectViewQuery) First(ctx context.Context) (*ProjectView, error) {
	nodes, err := pvq.Limit(1).All(setContextOp(ctx, pvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{projectview.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pvq *ProjectViewQuery) FirstX(ctx context.Context) *ProjectView {
	node, err := pvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProjectView ID from the query.
// Returns a *NotFoundError when no ProjectView ID was found.
func (pvq *ProjectViewQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pvq.Limit(1).IDs(setContextOp(ctx, pvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{projectview.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pvq *ProjectViewQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProjectView entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProjectView entity is found.
// Returns a *NotFoundError when no ProjectView entities are found.
func (pvq *ProjectViewQuery) Only(ctx context.Context) (*ProjectView, error) {
	nodes, err := pvq.Limit(2).All(setContextOp(ctx, pvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{projectview.Label}
	default:
		return nil, &NotSingularError{projectview.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pvq *ProjectViewQuery) OnlyX(ctx context.Context) *ProjectView {
	node, err := pvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProjectView ID in the query.
// Returns a *NotSingularError when more than one ProjectView ID is found.
// Returns a *NotFoundError when no entities are found.
func (pvq *ProjectViewQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pvq.Limit(2).IDs(setContextOp(ctx, pvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{projectview.Label}
	default:
		err = &NotSingularError{projectview.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pvq *ProjectViewQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProjectViews.
func (pvq *ProjectViewQuery) All(ctx context.Context) ([]*ProjectView, error) {
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryAll)
	if err := pvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProjectView, *ProjectViewQuery]()
	return withInterceptors[[]*ProjectView](ctx, pvq, qr, pvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pvq *ProjectViewQuery) AllX(ctx context.Context) []*ProjectView {
	nodes, err := pvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProjectView IDs.
func (pvq *ProjectViewQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pvq.ctx.Unique == nil && pvq.path != nil {
		pvq.Unique(true)
	}
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryIDs)
	if err = pvq.Select(projectview.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pvq *ProjectViewQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pvq *ProjectViewQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryCount)
	if err := pvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pvq, querierCount[*ProjectViewQuery](), pvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pvq *ProjectViewQuery) CountX(ctx context.Context) int {
	count, err := pvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pvq *ProjectViewQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pvq.ctx, ent.OpQueryExist)
	switch _, err := pvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pvq *ProjectViewQuery) ExistX(ctx context.Context) bool {
	exist, err := pvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectViewQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pvq *ProjectViewQuery) Clone() *ProjectViewQuery {
	if pvq == nil {
		return nil
	}
	return &ProjectViewQuery{
		config:           pvq.config,
		ctx:              pvq.ctx.Clone(),
		order:            append([]projectview.OrderOption{}, pvq.order...),
		inters:           append([]Interceptor{}, pvq.inters...),
		predicates:       append([]predicate.ProjectView{}, pvq.predicates...),
		withProject:      pvq.withProject.Clone(),
		withUserIdentity: pvq.withUserIdentity.Clone(),
		// clone intermediate query.
		sql:  pvq.sql.Clone(),
		path: pvq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (pvq *ProjectViewQuery) WithProject(opts ...func(*ProjectQuery)) *ProjectViewQuery {
	query := (&ProjectClient{config: pvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pvq.withProject = query
	return pvq
}

// WithUserIdentity tells the query-builder to eager-load the nodes that are connected to
// the "user_identity" edge. The optional arguments are used to configure the query builder of the edge.
func (pvq *ProjectViewQuery) WithUserIdentity(opts ...func(*UserIdentityQuery)) *ProjectViewQuery {
	query := (&UserIdentityClient{config: pvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pvq.withUserIdentity = query
	return pvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProjectView.Query().
//		GroupBy(projectview.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pvq *ProjectViewQuery) GroupBy(field string, fields ...string) *ProjectViewGroupBy {
	pvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProjectViewGroupBy{build: pvq}
	grbuild.flds = &pvq.ctx.Fields
	grbuild.label = projectview.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//	}
//
//	client.ProjectView.Query().
//		Select(projectview.FieldProjectID).
//		Scan(ctx, &v)
func (pvq *ProjectViewQuery) Select(fields ...string) *ProjectViewSelect {
	pvq.ctx.Fields = append(pvq.ctx.Fields, fields...)
	sbuild := &ProjectViewSelect{ProjectViewQuery: pvq}
	sbuild.label = projectview.Label
	sbuild.flds, sbuild.scan = &pvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProjectViewSelect configured with the given aggregations.
func (pvq *ProjectViewQuery) Aggregate(fns ...AggregateFunc) *ProjectViewSelect {
	return pvq.Select().Aggregate(fns...)
}

func (pvq *ProjectViewQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pvq); err != nil {
				return err
			}
		}
	}
	for _, f := range pvq.ctx.Fields {
		if !projectview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pvq.path != nil {
		prev, err := pvq.path(ctx)
		if err != nil {
			return err
		}
		pvq.sql = prev
	}
	return nil
}

func (pvq *ProjectViewQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProjectView, error) {
	var (
		nodes       = []*ProjectView{}
		_spec       = pvq.querySpec()
		loadedTypes = [2]bool{
			pvq.withProject != nil,
			pvq.withUserIdentity != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProjectView).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProjectView{config: pvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pvq.withProject; query != nil {
		if err := pvq.loadProject(ctx, query, nodes, nil,
			func(n *ProjectView, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := pvq.withUserIdentity; query != nil {
		if err := pvq.loadUserIdentity(ctx, query, nodes, nil,
			func(n *ProjectView, e *UserIdentity) { n.Edges.UserIdentity = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pvq *ProjectViewQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*ProjectView, init func(*ProjectView), assign func(*ProjectView, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProjectView)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pvq *ProjectViewQuery) loadUserIdentity(ctx context.Context, query *UserIdentityQuery, nodes []*ProjectView, init func(*ProjectView), assign func(*ProjectView, *UserIdentity)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ProjectView)
	for i := range nodes {
		fk := nodes[i].UserIdentityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(useridentity.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_identity_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pvq *ProjectViewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pvq.querySpec()
	_spec.Node.Columns = pvq.ctx.Fields
	if len(pvq.ctx.Fields) > 0 {
		_spec.Unique = pvq.ctx.Unique != nil && *pvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pvq.driver, _spec)
}

func (pvq *ProjectViewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(projectview.Table, projectview.Columns, sqlgraph.NewFieldSpec(projectview.FieldID, field.TypeUUID))
	_spec.From = pvq.sql
	if unique := pvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pvq.path != nil {
		_spec.Unique = true
	}
	if fields := pvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectview.FieldID)
		for i := range fields {
			if fields[i] != projectview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pvq.withProject != nil {
			_spec.Node.AddColumnOnce(projectview.FieldProjectID)
		}
		if pvq.withUserIdentity != nil {
			_spec.Node.AddColumnOnce(projectview.FieldUserIdentityID)
		}
	}
	if ps := pvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pvq *ProjectViewQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pvq.driver.Dialect())
	t1 := builder.Table(projectview.Table)
	columns := pvq.ctx.Fields
	if len(columns) == 0 {
		columns = projectview.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pvq.sql != nil {
		selector = pvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pvq.ctx.Unique != nil && *pvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pvq.predicates {
		p(selector)
	}
	for _, p := range pvq.order {
		p(selector)
	}
	if offset := pvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectViewGroupBy is the group-by builder for ProjectView entities.
type ProjectViewGroupBy struct {
	selector
	build *ProjectViewQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pvgb *ProjectViewGroupBy) Aggregate(fns ...AggregateFunc) *ProjectViewGroupBy {
	pvgb.fns = append(pvgb.fns, fns...)
	return pvgb
}

// Scan applies the selector query and scans the result into the given value.
func (pvgb *ProjectViewGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pvgb.build.ctx, ent.OpQueryGroupBy)
	if err := pvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectViewQuery, *ProjectViewGroupBy](ctx, pvgb.build, pvgb, pvgb.build.inters, v)
}

func (pvgb *ProjectViewGroupBy) sqlScan(ctx context.Context, root *ProjectViewQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pvgb.fns))
	for _, fn := range pvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pvgb.flds)+len(pvgb.fns))
		for _, f := range *pvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProjectViewSelect is the builder for selecting fields of ProjectView entities.
type ProjectViewSelect struct {
	*ProjectViewQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pvs *ProjectViewSelect) Aggregate(fns ...AggregateFunc) *ProjectViewSelect {
	pvs.fns = append(pvs.fns, fns...)
	return pvs
}

// Scan applies the selector query and scans the result into the given value.
func (pvs *ProjectViewSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pvs.ctx, ent.OpQuerySelect)
	if err := pvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectViewQuery, *ProjectViewSelect](ctx, pvs.ProjectViewQuery, pvs, pvs.inters, v)
}

func (pvs *ProjectViewSelect) sqlScan(ctx context.Context, root *ProjectViewQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pvs.fns))
	for _, fn := range pvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
