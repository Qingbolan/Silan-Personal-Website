// Code generated by ent, DO NOT EDIT.

package projectdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the projectdetail type in the database.
	Label = "project_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldProjectDetails holds the string denoting the project_details field in the database.
	FieldProjectDetails = "project_details"
	// FieldQuickStart holds the string denoting the quick_start field in the database.
	FieldQuickStart = "quick_start"
	// FieldReleaseNotes holds the string denoting the release_notes field in the database.
	FieldReleaseNotes = "release_notes"
	// FieldDependencies holds the string denoting the dependencies field in the database.
	FieldDependencies = "dependencies"
	// FieldLicense holds the string denoting the license field in the database.
	FieldLicense = "license"
	// FieldLicenseText holds the string denoting the license_text field in the database.
	FieldLicenseText = "license_text"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// Table holds the table name of the projectdetail in the database.
	Table = "project_details"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "project_details"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "project_detail_translations"
	// TranslationsInverseTable is the table name for the ProjectDetailTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "projectdetailtranslation" package.
	TranslationsInverseTable = "project_detail_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "project_detail_id"
)

// Columns holds all SQL columns for projectdetail fields.
var Columns = []string{
	FieldID,
	FieldProjectID,
	FieldProjectDetails,
	FieldQuickStart,
	FieldReleaseNotes,
	FieldDependencies,
	FieldLicense,
	FieldLicenseText,
	FieldVersion,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LicenseValidator is a validator for the "license" field. It is called by the builders before save.
	LicenseValidator func(string) error
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ProjectDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByProjectDetails orders the results by the project_details field.
func ByProjectDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectDetails, opts...).ToFunc()
}

// ByQuickStart orders the results by the quick_start field.
func ByQuickStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuickStart, opts...).ToFunc()
}

// ByReleaseNotes orders the results by the release_notes field.
func ByReleaseNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseNotes, opts...).ToFunc()
}

// ByDependencies orders the results by the dependencies field.
func ByDependencies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependencies, opts...).ToFunc()
}

// ByLicense orders the results by the license field.
func ByLicense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicense, opts...).ToFunc()
}

// ByLicenseText orders the results by the license_text field.
func ByLicenseText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseText, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
