// Code generated by ent, DO NOT EDIT.

package projectdetail

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectID, v))
}

// ProjectDetails applies equality check predicate on the "project_details" field. It's identical to ProjectDetailsEQ.
func ProjectDetails(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectDetails, v))
}

// QuickStart applies equality check predicate on the "quick_start" field. It's identical to QuickStartEQ.
func QuickStart(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldQuickStart, v))
}

// ReleaseNotes applies equality check predicate on the "release_notes" field. It's identical to ReleaseNotesEQ.
func ReleaseNotes(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldReleaseNotes, v))
}

// Dependencies applies equality check predicate on the "dependencies" field. It's identical to DependenciesEQ.
func Dependencies(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldDependencies, v))
}

// License applies equality check predicate on the "license" field. It's identical to LicenseEQ.
func License(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLicense, v))
}

// LicenseText applies equality check predicate on the "license_text" field. It's identical to LicenseTextEQ.
func LicenseText(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLicenseText, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldVersion, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectDetailsEQ applies the EQ predicate on the "project_details" field.
func ProjectDetailsEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectDetails, v))
}

// ProjectDetailsNEQ applies the NEQ predicate on the "project_details" field.
func ProjectDetailsNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldProjectDetails, v))
}

// ProjectDetailsIn applies the In predicate on the "project_details" field.
func ProjectDetailsIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldProjectDetails, vs...))
}

// ProjectDetailsNotIn applies the NotIn predicate on the "project_details" field.
func ProjectDetailsNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldProjectDetails, vs...))
}

// ProjectDetailsGT applies the GT predicate on the "project_details" field.
func ProjectDetailsGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldProjectDetails, v))
}

// ProjectDetailsGTE applies the GTE predicate on the "project_details" field.
func ProjectDetailsGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldProjectDetails, v))
}

// ProjectDetailsLT applies the LT predicate on the "project_details" field.
func ProjectDetailsLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldProjectDetails, v))
}

// ProjectDetailsLTE applies the LTE predicate on the "project_details" field.
func ProjectDetailsLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldProjectDetails, v))
}

// ProjectDetailsContains applies the Contains predicate on the "project_details" field.
func ProjectDetailsContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldProjectDetails, v))
}

// ProjectDetailsHasPrefix applies the HasPrefix predicate on the "project_details" field.
func ProjectDetailsHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldProjectDetails, v))
}

// ProjectDetailsHasSuffix applies the HasSuffix predicate on the "project_details" field.
func ProjectDetailsHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldProjectDetails, v))
}

// ProjectDetailsIsNil applies the IsNil predicate on the "project_details" field.
func ProjectDetailsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldProjectDetails))
}

// ProjectDetailsNotNil applies the NotNil predicate on the "project_details" field.
func ProjectDetailsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldProjectDetails))
}

// ProjectDetailsEqualFold applies the EqualFold predicate on the "project_details" field.
func ProjectDetailsEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldProjectDetails, v))
}

// ProjectDetailsContainsFold applies the ContainsFold predicate on the "project_details" field.
func ProjectDetailsContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldProjectDetails, v))
}

// QuickStartEQ applies the EQ predicate on the "quick_start" field.
func QuickStartEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldQuickStart, v))
}

// QuickStartNEQ applies the NEQ predicate on the "quick_start" field.
func QuickStartNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldQuickStart, v))
}

// QuickStartIn applies the In predicate on the "quick_start" field.
func QuickStartIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldQuickStart, vs...))
}

// QuickStartNotIn applies the NotIn predicate on the "quick_start" field.
func QuickStartNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldQuickStart, vs...))
}

// QuickStartGT applies the GT predicate on the "quick_start" field.
func QuickStartGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldQuickStart, v))
}

// QuickStartGTE applies the GTE predicate on the "quick_start" field.
func QuickStartGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldQuickStart, v))
}

// QuickStartLT applies the LT predicate on the "quick_start" field.
func QuickStartLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldQuickStart, v))
}

// QuickStartLTE applies the LTE predicate on the "quick_start" field.
func QuickStartLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldQuickStart, v))
}

// QuickStartContains applies the Contains predicate on the "quick_start" field.
func QuickStartContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldQuickStart, v))
}

// QuickStartHasPrefix applies the HasPrefix predicate on the "quick_start" field.
func QuickStartHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldQuickStart, v))
}

// QuickStartHasSuffix applies the HasSuffix predicate on the "quick_start" field.
func QuickStartHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldQuickStart, v))
}

// QuickStartIsNil applies the IsNil predicate on the "quick_start" field.
func QuickStartIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldQuickStart))
}

// QuickStartNotNil applies the NotNil predicate on the "quick_start" field.
func QuickStartNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldQuickStart))
}

// QuickStartEqualFold applies the EqualFold predicate on the "quick_start" field.
func QuickStartEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldQuickStart, v))
}

// QuickStartContainsFold applies the ContainsFold predicate on the "quick_start" field.
func QuickStartContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldQuickStart, v))
}

// ReleaseNotesEQ applies the EQ predicate on the "release_notes" field.
func ReleaseNotesEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldReleaseNotes, v))
}

// ReleaseNotesNEQ applies the NEQ predicate on the "release_notes" field.
func ReleaseNotesNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldReleaseNotes, v))
}

// ReleaseNotesIn applies the In predicate on the "release_notes" field.
func ReleaseNotesIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldReleaseNotes, vs...))
}

// ReleaseNotesNotIn applies the NotIn predicate on the "release_notes" field.
func ReleaseNotesNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldReleaseNotes, vs...))
}

// ReleaseNotesGT applies the GT predicate on the "release_notes" field.
func ReleaseNotesGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldReleaseNotes, v))
}

// ReleaseNotesGTE applies the GTE predicate on the "release_notes" field.
func ReleaseNotesGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldReleaseNotes, v))
}

// ReleaseNotesLT applies the LT predicate on the "release_notes" field.
func ReleaseNotesLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldReleaseNotes, v))
}

// ReleaseNotesLTE applies the LTE predicate on the "release_notes" field.
func ReleaseNotesLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldReleaseNotes, v))
}

// ReleaseNotesContains applies the Contains predicate on the "release_notes" field.
func ReleaseNotesContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldReleaseNotes, v))
}

// ReleaseNotesHasPrefix applies the HasPrefix predicate on the "release_notes" field.
func ReleaseNotesHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldReleaseNotes, v))
}

// ReleaseNotesHasSuffix applies the HasSuffix predicate on the "release_notes" field.
func ReleaseNotesHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldReleaseNotes, v))
}

// ReleaseNotesIsNil applies the IsNil predicate on the "release_notes" field.
func ReleaseNotesIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldReleaseNotes))
}

// ReleaseNotesNotNil applies the NotNil predicate on the "release_notes" field.
func ReleaseNotesNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldReleaseNotes))
}

// ReleaseNotesEqualFold applies the EqualFold predicate on the "release_notes" field.
func ReleaseNotesEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldReleaseNotes, v))
}

// ReleaseNotesContainsFold applies the ContainsFold predicate on the "release_notes" field.
func ReleaseNotesContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldReleaseNotes, v))
}

// DependenciesEQ applies the EQ predicate on the "dependencies" field.
func DependenciesEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldDependencies, v))
}

// DependenciesNEQ applies the NEQ predicate on the "dependencies" field.
func DependenciesNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldDependencies, v))
}

// DependenciesIn applies the In predicate on the "dependencies" field.
func DependenciesIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldDependencies, vs...))
}

// DependenciesNotIn applies the NotIn predicate on the "dependencies" field.
func DependenciesNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldDependencies, vs...))
}

// DependenciesGT applies the GT predicate on the "dependencies" field.
func DependenciesGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldDependencies, v))
}

// DependenciesGTE applies the GTE predicate on the "dependencies" field.
func DependenciesGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldDependencies, v))
}

// DependenciesLT applies the LT predicate on the "dependencies" field.
func DependenciesLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldDependencies, v))
}

// DependenciesLTE applies the LTE predicate on the "dependencies" field.
func DependenciesLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldDependencies, v))
}

// DependenciesContains applies the Contains predicate on the "dependencies" field.
func DependenciesContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldDependencies, v))
}

// DependenciesHasPrefix applies the HasPrefix predicate on the "dependencies" field.
func DependenciesHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldDependencies, v))
}

// DependenciesHasSuffix applies the HasSuffix predicate on the "dependencies" field.
func DependenciesHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldDependencies, v))
}

// DependenciesIsNil applies the IsNil predicate on the "dependencies" field.
func DependenciesIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldDependencies))
}

// DependenciesNotNil applies the NotNil predicate on the "dependencies" field.
func DependenciesNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldDependencies))
}

// DependenciesEqualFold applies the EqualFold predicate on the "dependencies" field.
func DependenciesEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldDependencies, v))
}

// DependenciesContainsFold applies the ContainsFold predicate on the "dependencies" field.
func DependenciesContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldDependencies, v))
}

// LicenseEQ applies the EQ predicate on the "license" field.
func LicenseEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLicense, v))
}

// LicenseNEQ applies the NEQ predicate on the "license" field.
func LicenseNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldLicense, v))
}

// LicenseIn applies the In predicate on the "license" field.
func LicenseIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldLicense, vs...))
}

// LicenseNotIn applies the NotIn predicate on the "license" field.
func LicenseNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldLicense, vs...))
}

// LicenseGT applies the GT predicate on the "license" field.
func LicenseGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldLicense, v))
}

// LicenseGTE applies the GTE predicate on the "license" field.
func LicenseGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldLicense, v))
}

// LicenseLT applies the LT predicate on the "license" field.
func LicenseLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldLicense, v))
}

// LicenseLTE applies the LTE predicate on the "license" field.
func LicenseLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldLicense, v))
}

// LicenseContains applies the Contains predicate on the "license" field.
func LicenseContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldLicense, v))
}

// LicenseHasPrefix applies the HasPrefix predicate on the "license" field.
func LicenseHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldLicense, v))
}

// LicenseHasSuffix applies the HasSuffix predicate on the "license" field.
func LicenseHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldLicense, v))
}

// LicenseIsNil applies the IsNil predicate on the "license" field.
func LicenseIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldLicense))
}

// LicenseNotNil applies the NotNil predicate on the "license" field.
func LicenseNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldLicense))
}

// LicenseEqualFold applies the EqualFold predicate on the "license" field.
func LicenseEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldLicense, v))
}

// LicenseContainsFold applies the ContainsFold predicate on the "license" field.
func LicenseContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldLicense, v))
}

// LicenseTextEQ applies the EQ predicate on the "license_text" field.
func LicenseTextEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLicenseText, v))
}

// LicenseTextNEQ applies the NEQ predicate on the "license_text" field.
func LicenseTextNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldLicenseText, v))
}

// LicenseTextIn applies the In predicate on the "license_text" field.
func LicenseTextIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldLicenseText, vs...))
}

// LicenseTextNotIn applies the NotIn predicate on the "license_text" field.
func LicenseTextNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldLicenseText, vs...))
}

// LicenseTextGT applies the GT predicate on the "license_text" field.
func LicenseTextGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldLicenseText, v))
}

// LicenseTextGTE applies the GTE predicate on the "license_text" field.
func LicenseTextGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldLicenseText, v))
}

// LicenseTextLT applies the LT predicate on the "license_text" field.
func LicenseTextLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldLicenseText, v))
}

// LicenseTextLTE applies the LTE predicate on the "license_text" field.
func LicenseTextLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldLicenseText, v))
}

// LicenseTextContains applies the Contains predicate on the "license_text" field.
func LicenseTextContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldLicenseText, v))
}

// LicenseTextHasPrefix applies the HasPrefix predicate on the "license_text" field.
func LicenseTextHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldLicenseText, v))
}

// LicenseTextHasSuffix applies the HasSuffix predicate on the "license_text" field.
func LicenseTextHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldLicenseText, v))
}

// LicenseTextIsNil applies the IsNil predicate on the "license_text" field.
func LicenseTextIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldLicenseText))
}

// LicenseTextNotNil applies the NotNil predicate on the "license_text" field.
func LicenseTextNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldLicenseText))
}

// LicenseTextEqualFold applies the EqualFold predicate on the "license_text" field.
func LicenseTextEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldLicenseText, v))
}

// LicenseTextContainsFold applies the ContainsFold predicate on the "license_text" field.
func LicenseTextContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldLicenseText, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.ProjectDetailTranslation) predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.NotPredicates(p))
}
