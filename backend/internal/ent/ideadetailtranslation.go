// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/ideadetailtranslation"
	"silan-backend/internal/ent/language"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// IdeaDetailTranslation is the model entity for the IdeaDetailTranslation schema.
type IdeaDetailTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IdeaDetailID holds the value of the "idea_detail_id" field.
	IdeaDetailID uuid.UUID `json:"idea_detail_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress string `json:"progress,omitempty"`
	// Results holds the value of the "results" field.
	Results string `json:"results,omitempty"`
	// References holds the value of the "references" field.
	References string `json:"references,omitempty"`
	// RequiredResources holds the value of the "required_resources" field.
	RequiredResources string `json:"required_resources,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdeaDetailTranslationQuery when eager-loading is set.
	Edges        IdeaDetailTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdeaDetailTranslationEdges holds the relations/edges for other nodes in the graph.
type IdeaDetailTranslationEdges struct {
	// IdeaDetail holds the value of the idea_detail edge.
	IdeaDetail *IdeaDetail `json:"idea_detail,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IdeaDetailOrErr returns the IdeaDetail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdeaDetailTranslationEdges) IdeaDetailOrErr() (*IdeaDetail, error) {
	if e.IdeaDetail != nil {
		return e.IdeaDetail, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ideadetail.Label}
	}
	return nil, &NotLoadedError{edge: "idea_detail"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdeaDetailTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdeaDetailTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ideadetailtranslation.FieldLanguageCode, ideadetailtranslation.FieldProgress, ideadetailtranslation.FieldResults, ideadetailtranslation.FieldReferences, ideadetailtranslation.FieldRequiredResources:
			values[i] = new(sql.NullString)
		case ideadetailtranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case ideadetailtranslation.FieldID, ideadetailtranslation.FieldIdeaDetailID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdeaDetailTranslation fields.
func (idt *IdeaDetailTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ideadetailtranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				idt.ID = *value
			}
		case ideadetailtranslation.FieldIdeaDetailID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field idea_detail_id", values[i])
			} else if value != nil {
				idt.IdeaDetailID = *value
			}
		case ideadetailtranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				idt.LanguageCode = value.String
			}
		case ideadetailtranslation.FieldProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				idt.Progress = value.String
			}
		case ideadetailtranslation.FieldResults:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field results", values[i])
			} else if value.Valid {
				idt.Results = value.String
			}
		case ideadetailtranslation.FieldReferences:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field references", values[i])
			} else if value.Valid {
				idt.References = value.String
			}
		case ideadetailtranslation.FieldRequiredResources:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field required_resources", values[i])
			} else if value.Valid {
				idt.RequiredResources = value.String
			}
		case ideadetailtranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				idt.CreatedAt = value.Time
			}
		default:
			idt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IdeaDetailTranslation.
// This includes values selected through modifiers, order, etc.
func (idt *IdeaDetailTranslation) Value(name string) (ent.Value, error) {
	return idt.selectValues.Get(name)
}

// QueryIdeaDetail queries the "idea_detail" edge of the IdeaDetailTranslation entity.
func (idt *IdeaDetailTranslation) QueryIdeaDetail() *IdeaDetailQuery {
	return NewIdeaDetailTranslationClient(idt.config).QueryIdeaDetail(idt)
}

// QueryLanguage queries the "language" edge of the IdeaDetailTranslation entity.
func (idt *IdeaDetailTranslation) QueryLanguage() *LanguageQuery {
	return NewIdeaDetailTranslationClient(idt.config).QueryLanguage(idt)
}

// Update returns a builder for updating this IdeaDetailTranslation.
// Note that you need to call IdeaDetailTranslation.Unwrap() before calling this method if this IdeaDetailTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (idt *IdeaDetailTranslation) Update() *IdeaDetailTranslationUpdateOne {
	return NewIdeaDetailTranslationClient(idt.config).UpdateOne(idt)
}

// Unwrap unwraps the IdeaDetailTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (idt *IdeaDetailTranslation) Unwrap() *IdeaDetailTranslation {
	_tx, ok := idt.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdeaDetailTranslation is not a transactional entity")
	}
	idt.config.driver = _tx.drv
	return idt
}

// String implements the fmt.Stringer.
func (idt *IdeaDetailTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("IdeaDetailTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", idt.ID))
	builder.WriteString("idea_detail_id=")
	builder.WriteString(fmt.Sprintf("%v", idt.IdeaDetailID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(idt.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(idt.Progress)
	builder.WriteString(", ")
	builder.WriteString("results=")
	builder.WriteString(idt.Results)
	builder.WriteString(", ")
	builder.WriteString("references=")
	builder.WriteString(idt.References)
	builder.WriteString(", ")
	builder.WriteString("required_resources=")
	builder.WriteString(idt.RequiredResources)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(idt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IdeaDetailTranslations is a parsable slice of IdeaDetailTranslation.
type IdeaDetailTranslations []*IdeaDetailTranslation
