// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/ideadetailtranslation"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaDetailUpdate is the builder for updating IdeaDetail entities.
type IdeaDetailUpdate struct {
	config
	hooks    []Hook
	mutation *IdeaDetailMutation
}

// Where appends a list predicates to the IdeaDetailUpdate builder.
func (idu *IdeaDetailUpdate) Where(ps ...predicate.IdeaDetail) *IdeaDetailUpdate {
	idu.mutation.Where(ps...)
	return idu
}

// SetIdeaID sets the "idea_id" field.
func (idu *IdeaDetailUpdate) SetIdeaID(u uuid.UUID) *IdeaDetailUpdate {
	idu.mutation.SetIdeaID(u)
	return idu
}

// SetNillableIdeaID sets the "idea_id" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableIdeaID(u *uuid.UUID) *IdeaDetailUpdate {
	if u != nil {
		idu.SetIdeaID(*u)
	}
	return idu
}

// SetProgress sets the "progress" field.
func (idu *IdeaDetailUpdate) SetProgress(s string) *IdeaDetailUpdate {
	idu.mutation.SetProgress(s)
	return idu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableProgress(s *string) *IdeaDetailUpdate {
	if s != nil {
		idu.SetProgress(*s)
	}
	return idu
}

// ClearProgress clears the value of the "progress" field.
func (idu *IdeaDetailUpdate) ClearProgress() *IdeaDetailUpdate {
	idu.mutation.ClearProgress()
	return idu
}

// SetResults sets the "results" field.
func (idu *IdeaDetailUpdate) SetResults(s string) *IdeaDetailUpdate {
	idu.mutation.SetResults(s)
	return idu
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableResults(s *string) *IdeaDetailUpdate {
	if s != nil {
		idu.SetResults(*s)
	}
	return idu
}

// ClearResults clears the value of the "results" field.
func (idu *IdeaDetailUpdate) ClearResults() *IdeaDetailUpdate {
	idu.mutation.ClearResults()
	return idu
}

// SetReferences sets the "references" field.
func (idu *IdeaDetailUpdate) SetReferences(s string) *IdeaDetailUpdate {
	idu.mutation.SetReferences(s)
	return idu
}

// SetNillableReferences sets the "references" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableReferences(s *string) *IdeaDetailUpdate {
	if s != nil {
		idu.SetReferences(*s)
	}
	return idu
}

// ClearReferences clears the value of the "references" field.
func (idu *IdeaDetailUpdate) ClearReferences() *IdeaDetailUpdate {
	idu.mutation.ClearReferences()
	return idu
}

// SetEstimatedDurationMonths sets the "estimated_duration_months" field.
func (idu *IdeaDetailUpdate) SetEstimatedDurationMonths(i int) *IdeaDetailUpdate {
	idu.mutation.ResetEstimatedDurationMonths()
	idu.mutation.SetEstimatedDurationMonths(i)
	return idu
}

// SetNillableEstimatedDurationMonths sets the "estimated_duration_months" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableEstimatedDurationMonths(i *int) *IdeaDetailUpdate {
	if i != nil {
		idu.SetEstimatedDurationMonths(*i)
	}
	return idu
}

// AddEstimatedDurationMonths adds i to the "estimated_duration_months" field.
func (idu *IdeaDetailUpdate) AddEstimatedDurationMonths(i int) *IdeaDetailUpdate {
	idu.mutation.AddEstimatedDurationMonths(i)
	return idu
}

// ClearEstimatedDurationMonths clears the value of the "estimated_duration_months" field.
func (idu *IdeaDetailUpdate) ClearEstimatedDurationMonths() *IdeaDetailUpdate {
	idu.mutation.ClearEstimatedDurationMonths()
	return idu
}

// SetRequiredResources sets the "required_resources" field.
func (idu *IdeaDetailUpdate) SetRequiredResources(s string) *IdeaDetailUpdate {
	idu.mutation.SetRequiredResources(s)
	return idu
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableRequiredResources(s *string) *IdeaDetailUpdate {
	if s != nil {
		idu.SetRequiredResources(*s)
	}
	return idu
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (idu *IdeaDetailUpdate) ClearRequiredResources() *IdeaDetailUpdate {
	idu.mutation.ClearRequiredResources()
	return idu
}

// SetCollaborationNeeded sets the "collaboration_needed" field.
func (idu *IdeaDetailUpdate) SetCollaborationNeeded(b bool) *IdeaDetailUpdate {
	idu.mutation.SetCollaborationNeeded(b)
	return idu
}

// SetNillableCollaborationNeeded sets the "collaboration_needed" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableCollaborationNeeded(b *bool) *IdeaDetailUpdate {
	if b != nil {
		idu.SetCollaborationNeeded(*b)
	}
	return idu
}

// SetFundingRequired sets the "funding_required" field.
func (idu *IdeaDetailUpdate) SetFundingRequired(b bool) *IdeaDetailUpdate {
	idu.mutation.SetFundingRequired(b)
	return idu
}

// SetNillableFundingRequired sets the "funding_required" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableFundingRequired(b *bool) *IdeaDetailUpdate {
	if b != nil {
		idu.SetFundingRequired(*b)
	}
	return idu
}

// SetEstimatedBudget sets the "estimated_budget" field.
func (idu *IdeaDetailUpdate) SetEstimatedBudget(f float64) *IdeaDetailUpdate {
	idu.mutation.ResetEstimatedBudget()
	idu.mutation.SetEstimatedBudget(f)
	return idu
}

// SetNillableEstimatedBudget sets the "estimated_budget" field if the given value is not nil.
func (idu *IdeaDetailUpdate) SetNillableEstimatedBudget(f *float64) *IdeaDetailUpdate {
	if f != nil {
		idu.SetEstimatedBudget(*f)
	}
	return idu
}

// AddEstimatedBudget adds f to the "estimated_budget" field.
func (idu *IdeaDetailUpdate) AddEstimatedBudget(f float64) *IdeaDetailUpdate {
	idu.mutation.AddEstimatedBudget(f)
	return idu
}

// ClearEstimatedBudget clears the value of the "estimated_budget" field.
func (idu *IdeaDetailUpdate) ClearEstimatedBudget() *IdeaDetailUpdate {
	idu.mutation.ClearEstimatedBudget()
	return idu
}

// SetUpdatedAt sets the "updated_at" field.
func (idu *IdeaDetailUpdate) SetUpdatedAt(t time.Time) *IdeaDetailUpdate {
	idu.mutation.SetUpdatedAt(t)
	return idu
}

// SetIdea sets the "idea" edge to the Idea entity.
func (idu *IdeaDetailUpdate) SetIdea(i *Idea) *IdeaDetailUpdate {
	return idu.SetIdeaID(i.ID)
}

// AddTranslationIDs adds the "translations" edge to the IdeaDetailTranslation entity by IDs.
func (idu *IdeaDetailUpdate) AddTranslationIDs(ids ...uuid.UUID) *IdeaDetailUpdate {
	idu.mutation.AddTranslationIDs(ids...)
	return idu
}

// AddTranslations adds the "translations" edges to the IdeaDetailTranslation entity.
func (idu *IdeaDetailUpdate) AddTranslations(i ...*IdeaDetailTranslation) *IdeaDetailUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idu.AddTranslationIDs(ids...)
}

// Mutation returns the IdeaDetailMutation object of the builder.
func (idu *IdeaDetailUpdate) Mutation() *IdeaDetailMutation {
	return idu.mutation
}

// ClearIdea clears the "idea" edge to the Idea entity.
func (idu *IdeaDetailUpdate) ClearIdea() *IdeaDetailUpdate {
	idu.mutation.ClearIdea()
	return idu
}

// ClearTranslations clears all "translations" edges to the IdeaDetailTranslation entity.
func (idu *IdeaDetailUpdate) ClearTranslations() *IdeaDetailUpdate {
	idu.mutation.ClearTranslations()
	return idu
}

// RemoveTranslationIDs removes the "translations" edge to IdeaDetailTranslation entities by IDs.
func (idu *IdeaDetailUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *IdeaDetailUpdate {
	idu.mutation.RemoveTranslationIDs(ids...)
	return idu
}

// RemoveTranslations removes "translations" edges to IdeaDetailTranslation entities.
func (idu *IdeaDetailUpdate) RemoveTranslations(i ...*IdeaDetailTranslation) *IdeaDetailUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idu *IdeaDetailUpdate) Save(ctx context.Context) (int, error) {
	idu.defaults()
	return withHooks(ctx, idu.sqlSave, idu.mutation, idu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idu *IdeaDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := idu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idu *IdeaDetailUpdate) Exec(ctx context.Context) error {
	_, err := idu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idu *IdeaDetailUpdate) ExecX(ctx context.Context) {
	if err := idu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idu *IdeaDetailUpdate) defaults() {
	if _, ok := idu.mutation.UpdatedAt(); !ok {
		v := ideadetail.UpdateDefaultUpdatedAt()
		idu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idu *IdeaDetailUpdate) check() error {
	if idu.mutation.IdeaCleared() && len(idu.mutation.IdeaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaDetail.idea"`)
	}
	return nil
}

func (idu *IdeaDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideadetail.Table, ideadetail.Columns, sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID))
	if ps := idu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idu.mutation.Progress(); ok {
		_spec.SetField(ideadetail.FieldProgress, field.TypeString, value)
	}
	if idu.mutation.ProgressCleared() {
		_spec.ClearField(ideadetail.FieldProgress, field.TypeString)
	}
	if value, ok := idu.mutation.Results(); ok {
		_spec.SetField(ideadetail.FieldResults, field.TypeString, value)
	}
	if idu.mutation.ResultsCleared() {
		_spec.ClearField(ideadetail.FieldResults, field.TypeString)
	}
	if value, ok := idu.mutation.References(); ok {
		_spec.SetField(ideadetail.FieldReferences, field.TypeString, value)
	}
	if idu.mutation.ReferencesCleared() {
		_spec.ClearField(ideadetail.FieldReferences, field.TypeString)
	}
	if value, ok := idu.mutation.EstimatedDurationMonths(); ok {
		_spec.SetField(ideadetail.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AddedEstimatedDurationMonths(); ok {
		_spec.AddField(ideadetail.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if idu.mutation.EstimatedDurationMonthsCleared() {
		_spec.ClearField(ideadetail.FieldEstimatedDurationMonths, field.TypeInt)
	}
	if value, ok := idu.mutation.RequiredResources(); ok {
		_spec.SetField(ideadetail.FieldRequiredResources, field.TypeString, value)
	}
	if idu.mutation.RequiredResourcesCleared() {
		_spec.ClearField(ideadetail.FieldRequiredResources, field.TypeString)
	}
	if value, ok := idu.mutation.CollaborationNeeded(); ok {
		_spec.SetField(ideadetail.FieldCollaborationNeeded, field.TypeBool, value)
	}
	if value, ok := idu.mutation.FundingRequired(); ok {
		_spec.SetField(ideadetail.FieldFundingRequired, field.TypeBool, value)
	}
	if value, ok := idu.mutation.EstimatedBudget(); ok {
		_spec.SetField(ideadetail.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if value, ok := idu.mutation.AddedEstimatedBudget(); ok {
		_spec.AddField(ideadetail.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if idu.mutation.EstimatedBudgetCleared() {
		_spec.ClearField(ideadetail.FieldEstimatedBudget, field.TypeFloat64)
	}
	if value, ok := idu.mutation.UpdatedAt(); ok {
		_spec.SetField(ideadetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if idu.mutation.IdeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ideadetail.IdeaTable,
			Columns: []string{ideadetail.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.IdeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ideadetail.IdeaTable,
			Columns: []string{ideadetail.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ideadetail.TranslationsTable,
			Columns: []string{ideadetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !idu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ideadetail.TranslationsTable,
			Columns: []string{ideadetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ideadetail.TranslationsTable,
			Columns: []string{ideadetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, idu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideadetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idu.mutation.done = true
	return n, nil
}

// IdeaDetailUpdateOne is the builder for updating a single IdeaDetail entity.
type IdeaDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdeaDetailMutation
}

// SetIdeaID sets the "idea_id" field.
func (iduo *IdeaDetailUpdateOne) SetIdeaID(u uuid.UUID) *IdeaDetailUpdateOne {
	iduo.mutation.SetIdeaID(u)
	return iduo
}

// SetNillableIdeaID sets the "idea_id" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableIdeaID(u *uuid.UUID) *IdeaDetailUpdateOne {
	if u != nil {
		iduo.SetIdeaID(*u)
	}
	return iduo
}

// SetProgress sets the "progress" field.
func (iduo *IdeaDetailUpdateOne) SetProgress(s string) *IdeaDetailUpdateOne {
	iduo.mutation.SetProgress(s)
	return iduo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableProgress(s *string) *IdeaDetailUpdateOne {
	if s != nil {
		iduo.SetProgress(*s)
	}
	return iduo
}

// ClearProgress clears the value of the "progress" field.
func (iduo *IdeaDetailUpdateOne) ClearProgress() *IdeaDetailUpdateOne {
	iduo.mutation.ClearProgress()
	return iduo
}

// SetResults sets the "results" field.
func (iduo *IdeaDetailUpdateOne) SetResults(s string) *IdeaDetailUpdateOne {
	iduo.mutation.SetResults(s)
	return iduo
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableResults(s *string) *IdeaDetailUpdateOne {
	if s != nil {
		iduo.SetResults(*s)
	}
	return iduo
}

// ClearResults clears the value of the "results" field.
func (iduo *IdeaDetailUpdateOne) ClearResults() *IdeaDetailUpdateOne {
	iduo.mutation.ClearResults()
	return iduo
}

// SetReferences sets the "references" field.
func (iduo *IdeaDetailUpdateOne) SetReferences(s string) *IdeaDetailUpdateOne {
	iduo.mutation.SetReferences(s)
	return iduo
}

// SetNillableReferences sets the "references" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableReferences(s *string) *IdeaDetailUpdateOne {
	if s != nil {
		iduo.SetReferences(*s)
	}
	return iduo
}

// ClearReferences clears the value of the "references" field.
func (iduo *IdeaDetailUpdateOne) ClearReferences() *IdeaDetailUpdateOne {
	iduo.mutation.ClearReferences()
	return iduo
}

// SetEstimatedDurationMonths sets the "estimated_duration_months" field.
func (iduo *IdeaDetailUpdateOne) SetEstimatedDurationMonths(i int) *IdeaDetailUpdateOne {
	iduo.mutation.ResetEstimatedDurationMonths()
	iduo.mutation.SetEstimatedDurationMonths(i)
	return iduo
}

// SetNillableEstimatedDurationMonths sets the "estimated_duration_months" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableEstimatedDurationMonths(i *int) *IdeaDetailUpdateOne {
	if i != nil {
		iduo.SetEstimatedDurationMonths(*i)
	}
	return iduo
}

// AddEstimatedDurationMonths adds i to the "estimated_duration_months" field.
func (iduo *IdeaDetailUpdateOne) AddEstimatedDurationMonths(i int) *IdeaDetailUpdateOne {
	iduo.mutation.AddEstimatedDurationMonths(i)
	return iduo
}

// ClearEstimatedDurationMonths clears the value of the "estimated_duration_months" field.
func (iduo *IdeaDetailUpdateOne) ClearEstimatedDurationMonths() *IdeaDetailUpdateOne {
	iduo.mutation.ClearEstimatedDurationMonths()
	return iduo
}

// SetRequiredResources sets the "required_resources" field.
func (iduo *IdeaDetailUpdateOne) SetRequiredResources(s string) *IdeaDetailUpdateOne {
	iduo.mutation.SetRequiredResources(s)
	return iduo
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableRequiredResources(s *string) *IdeaDetailUpdateOne {
	if s != nil {
		iduo.SetRequiredResources(*s)
	}
	return iduo
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (iduo *IdeaDetailUpdateOne) ClearRequiredResources() *IdeaDetailUpdateOne {
	iduo.mutation.ClearRequiredResources()
	return iduo
}

// SetCollaborationNeeded sets the "collaboration_needed" field.
func (iduo *IdeaDetailUpdateOne) SetCollaborationNeeded(b bool) *IdeaDetailUpdateOne {
	iduo.mutation.SetCollaborationNeeded(b)
	return iduo
}

// SetNillableCollaborationNeeded sets the "collaboration_needed" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableCollaborationNeeded(b *bool) *IdeaDetailUpdateOne {
	if b != nil {
		iduo.SetCollaborationNeeded(*b)
	}
	return iduo
}

// SetFundingRequired sets the "funding_required" field.
func (iduo *IdeaDetailUpdateOne) SetFundingRequired(b bool) *IdeaDetailUpdateOne {
	iduo.mutation.SetFundingRequired(b)
	return iduo
}

// SetNillableFundingRequired sets the "funding_required" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableFundingRequired(b *bool) *IdeaDetailUpdateOne {
	if b != nil {
		iduo.SetFundingRequired(*b)
	}
	return iduo
}

// SetEstimatedBudget sets the "estimated_budget" field.
func (iduo *IdeaDetailUpdateOne) SetEstimatedBudget(f float64) *IdeaDetailUpdateOne {
	iduo.mutation.ResetEstimatedBudget()
	iduo.mutation.SetEstimatedBudget(f)
	return iduo
}

// SetNillableEstimatedBudget sets the "estimated_budget" field if the given value is not nil.
func (iduo *IdeaDetailUpdateOne) SetNillableEstimatedBudget(f *float64) *IdeaDetailUpdateOne {
	if f != nil {
		iduo.SetEstimatedBudget(*f)
	}
	return iduo
}

// AddEstimatedBudget adds f to the "estimated_budget" field.
func (iduo *IdeaDetailUpdateOne) AddEstimatedBudget(f float64) *IdeaDetailUpdateOne {
	iduo.mutation.AddEstimatedBudget(f)
	return iduo
}

// ClearEstimatedBudget clears the value of the "estimated_budget" field.
func (iduo *IdeaDetailUpdateOne) ClearEstimatedBudget() *IdeaDetailUpdateOne {
	iduo.mutation.ClearEstimatedBudget()
	return iduo
}

// SetUpdatedAt sets the "updated_at" field.
func (iduo *IdeaDetailUpdateOne) SetUpdatedAt(t time.Time) *IdeaDetailUpdateOne {
	iduo.mutation.SetUpdatedAt(t)
	return iduo
}

// SetIdea sets the "idea" edge to the Idea entity.
func (iduo *IdeaDetailUpdateOne) SetIdea(i *Idea) *IdeaDetailUpdateOne {
	return iduo.SetIdeaID(i.ID)
}

// AddTranslationIDs adds the "translations" edge to the IdeaDetailTranslation entity by IDs.
func (iduo *IdeaDetailUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *IdeaDetailUpdateOne {
	iduo.mutation.AddTranslationIDs(ids...)
	return iduo
}

// AddTranslations adds the "translations" edges to the IdeaDetailTranslation entity.
func (iduo *IdeaDetailUpdateOne) AddTranslations(i ...*IdeaDetailTranslation) *IdeaDetailUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iduo.AddTranslationIDs(ids...)
}

// Mutation returns the IdeaDetailMutation object of the builder.
func (iduo *IdeaDetailUpdateOne) Mutation() *IdeaDetailMutation {
	return iduo.mutation
}

// ClearIdea clears the "idea" edge to the Idea entity.
func (iduo *IdeaDetailUpdateOne) ClearIdea() *IdeaDetailUpdateOne {
	iduo.mutation.ClearIdea()
	return iduo
}

// ClearTranslations clears all "translations" edges to the IdeaDetailTranslation entity.
func (iduo *IdeaDetailUpdateOne) ClearTranslations() *IdeaDetailUpdateOne {
	iduo.mutation.ClearTranslations()
	return iduo
}

// RemoveTranslationIDs removes the "translations" edge to IdeaDetailTranslation entities by IDs.
func (iduo *IdeaDetailUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *IdeaDetailUpdateOne {
	iduo.mutation.RemoveTranslationIDs(ids...)
	return iduo
}

// RemoveTranslations removes "translations" edges to IdeaDetailTranslation entities.
func (iduo *IdeaDetailUpdateOne) RemoveTranslations(i ...*IdeaDetailTranslation) *IdeaDetailUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iduo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the IdeaDetailUpdate builder.
func (iduo *IdeaDetailUpdateOne) Where(ps ...predicate.IdeaDetail) *IdeaDetailUpdateOne {
	iduo.mutation.Where(ps...)
	return iduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iduo *IdeaDetailUpdateOne) Select(field string, fields ...string) *IdeaDetailUpdateOne {
	iduo.fields = append([]string{field}, fields...)
	return iduo
}

// Save executes the query and returns the updated IdeaDetail entity.
func (iduo *IdeaDetailUpdateOne) Save(ctx context.Context) (*IdeaDetail, error) {
	iduo.defaults()
	return withHooks(ctx, iduo.sqlSave, iduo.mutation, iduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iduo *IdeaDetailUpdateOne) SaveX(ctx context.Context) *IdeaDetail {
	node, err := iduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iduo *IdeaDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := iduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iduo *IdeaDetailUpdateOne) ExecX(ctx context.Context) {
	if err := iduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iduo *IdeaDetailUpdateOne) defaults() {
	if _, ok := iduo.mutation.UpdatedAt(); !ok {
		v := ideadetail.UpdateDefaultUpdatedAt()
		iduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iduo *IdeaDetailUpdateOne) check() error {
	if iduo.mutation.IdeaCleared() && len(iduo.mutation.IdeaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaDetail.idea"`)
	}
	return nil
}

func (iduo *IdeaDetailUpdateOne) sqlSave(ctx context.Context) (_node *IdeaDetail, err error) {
	if err := iduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideadetail.Table, ideadetail.Columns, sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID))
	id, ok := iduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdeaDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ideadetail.FieldID)
		for _, f := range fields {
			if !ideadetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ideadetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iduo.mutation.Progress(); ok {
		_spec.SetField(ideadetail.FieldProgress, field.TypeString, value)
	}
	if iduo.mutation.ProgressCleared() {
		_spec.ClearField(ideadetail.FieldProgress, field.TypeString)
	}
	if value, ok := iduo.mutation.Results(); ok {
		_spec.SetField(ideadetail.FieldResults, field.TypeString, value)
	}
	if iduo.mutation.ResultsCleared() {
		_spec.ClearField(ideadetail.FieldResults, field.TypeString)
	}
	if value, ok := iduo.mutation.References(); ok {
		_spec.SetField(ideadetail.FieldReferences, field.TypeString, value)
	}
	if iduo.mutation.ReferencesCleared() {
		_spec.ClearField(ideadetail.FieldReferences, field.TypeString)
	}
	if value, ok := iduo.mutation.EstimatedDurationMonths(); ok {
		_spec.SetField(ideadetail.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AddedEstimatedDurationMonths(); ok {
		_spec.AddField(ideadetail.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if iduo.mutation.EstimatedDurationMonthsCleared() {
		_spec.ClearField(ideadetail.FieldEstimatedDurationMonths, field.TypeInt)
	}
	if value, ok := iduo.mutation.RequiredResources(); ok {
		_spec.SetField(ideadetail.FieldRequiredResources, field.TypeString, value)
	}
	if iduo.mutation.RequiredResourcesCleared() {
		_spec.ClearField(ideadetail.FieldRequiredResources, field.TypeString)
	}
	if value, ok := iduo.mutation.CollaborationNeeded(); ok {
		_spec.SetField(ideadetail.FieldCollaborationNeeded, field.TypeBool, value)
	}
	if value, ok := iduo.mutation.FundingRequired(); ok {
		_spec.SetField(ideadetail.FieldFundingRequired, field.TypeBool, value)
	}
	if value, ok := iduo.mutation.EstimatedBudget(); ok {
		_spec.SetField(ideadetail.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if value, ok := iduo.mutation.AddedEstimatedBudget(); ok {
		_spec.AddField(ideadetail.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if iduo.mutation.EstimatedBudgetCleared() {
		_spec.ClearField(ideadetail.FieldEstimatedBudget, field.TypeFloat64)
	}
	if value, ok := iduo.mutation.UpdatedAt(); ok {
		_spec.SetField(ideadetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if iduo.mutation.IdeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ideadetail.IdeaTable,
			Columns: []string{ideadetail.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.IdeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ideadetail.IdeaTable,
			Columns: []string{ideadetail.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ideadetail.TranslationsTable,
			Columns: []string{ideadetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !iduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ideadetail.TranslationsTable,
			Columns: []string{ideadetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ideadetail.TranslationsTable,
			Columns: []string{ideadetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IdeaDetail{config: iduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideadetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iduo.mutation.done = true
	return _node, nil
}
