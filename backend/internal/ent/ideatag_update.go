// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatag"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaTagUpdate is the builder for updating IdeaTag entities.
type IdeaTagUpdate struct {
	config
	hooks    []Hook
	mutation *IdeaTagMutation
}

// Where appends a list predicates to the IdeaTagUpdate builder.
func (itu *IdeaTagUpdate) Where(ps ...predicate.IdeaTag) *IdeaTagUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetName sets the "name" field.
func (itu *IdeaTagUpdate) SetName(s string) *IdeaTagUpdate {
	itu.mutation.SetName(s)
	return itu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (itu *IdeaTagUpdate) SetNillableName(s *string) *IdeaTagUpdate {
	if s != nil {
		itu.SetName(*s)
	}
	return itu
}

// SetSlug sets the "slug" field.
func (itu *IdeaTagUpdate) SetSlug(s string) *IdeaTagUpdate {
	itu.mutation.SetSlug(s)
	return itu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (itu *IdeaTagUpdate) SetNillableSlug(s *string) *IdeaTagUpdate {
	if s != nil {
		itu.SetSlug(*s)
	}
	return itu
}

// SetUpdatedAt sets the "updated_at" field.
func (itu *IdeaTagUpdate) SetUpdatedAt(t time.Time) *IdeaTagUpdate {
	itu.mutation.SetUpdatedAt(t)
	return itu
}

// AddIdeaIDs adds the "ideas" edge to the Idea entity by IDs.
func (itu *IdeaTagUpdate) AddIdeaIDs(ids ...uuid.UUID) *IdeaTagUpdate {
	itu.mutation.AddIdeaIDs(ids...)
	return itu
}

// AddIdeas adds the "ideas" edges to the Idea entity.
func (itu *IdeaTagUpdate) AddIdeas(i ...*Idea) *IdeaTagUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itu.AddIdeaIDs(ids...)
}

// Mutation returns the IdeaTagMutation object of the builder.
func (itu *IdeaTagUpdate) Mutation() *IdeaTagMutation {
	return itu.mutation
}

// ClearIdeas clears all "ideas" edges to the Idea entity.
func (itu *IdeaTagUpdate) ClearIdeas() *IdeaTagUpdate {
	itu.mutation.ClearIdeas()
	return itu
}

// RemoveIdeaIDs removes the "ideas" edge to Idea entities by IDs.
func (itu *IdeaTagUpdate) RemoveIdeaIDs(ids ...uuid.UUID) *IdeaTagUpdate {
	itu.mutation.RemoveIdeaIDs(ids...)
	return itu
}

// RemoveIdeas removes "ideas" edges to Idea entities.
func (itu *IdeaTagUpdate) RemoveIdeas(i ...*Idea) *IdeaTagUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itu.RemoveIdeaIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *IdeaTagUpdate) Save(ctx context.Context) (int, error) {
	itu.defaults()
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *IdeaTagUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *IdeaTagUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *IdeaTagUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itu *IdeaTagUpdate) defaults() {
	if _, ok := itu.mutation.UpdatedAt(); !ok {
		v := ideatag.UpdateDefaultUpdatedAt()
		itu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itu *IdeaTagUpdate) check() error {
	if v, ok := itu.mutation.Name(); ok {
		if err := ideatag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IdeaTag.name": %w`, err)}
		}
	}
	if v, ok := itu.mutation.Slug(); ok {
		if err := ideatag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "IdeaTag.slug": %w`, err)}
		}
	}
	return nil
}

func (itu *IdeaTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := itu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideatag.Table, ideatag.Columns, sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.Name(); ok {
		_spec.SetField(ideatag.FieldName, field.TypeString, value)
	}
	if value, ok := itu.mutation.Slug(); ok {
		_spec.SetField(ideatag.FieldSlug, field.TypeString, value)
	}
	if value, ok := itu.mutation.UpdatedAt(); ok {
		_spec.SetField(ideatag.FieldUpdatedAt, field.TypeTime, value)
	}
	if itu.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ideatag.IdeasTable,
			Columns: ideatag.IdeasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.RemovedIdeasIDs(); len(nodes) > 0 && !itu.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ideatag.IdeasTable,
			Columns: ideatag.IdeasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.IdeasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ideatag.IdeasTable,
			Columns: ideatag.IdeasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideatag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// IdeaTagUpdateOne is the builder for updating a single IdeaTag entity.
type IdeaTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdeaTagMutation
}

// SetName sets the "name" field.
func (ituo *IdeaTagUpdateOne) SetName(s string) *IdeaTagUpdateOne {
	ituo.mutation.SetName(s)
	return ituo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ituo *IdeaTagUpdateOne) SetNillableName(s *string) *IdeaTagUpdateOne {
	if s != nil {
		ituo.SetName(*s)
	}
	return ituo
}

// SetSlug sets the "slug" field.
func (ituo *IdeaTagUpdateOne) SetSlug(s string) *IdeaTagUpdateOne {
	ituo.mutation.SetSlug(s)
	return ituo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ituo *IdeaTagUpdateOne) SetNillableSlug(s *string) *IdeaTagUpdateOne {
	if s != nil {
		ituo.SetSlug(*s)
	}
	return ituo
}

// SetUpdatedAt sets the "updated_at" field.
func (ituo *IdeaTagUpdateOne) SetUpdatedAt(t time.Time) *IdeaTagUpdateOne {
	ituo.mutation.SetUpdatedAt(t)
	return ituo
}

// AddIdeaIDs adds the "ideas" edge to the Idea entity by IDs.
func (ituo *IdeaTagUpdateOne) AddIdeaIDs(ids ...uuid.UUID) *IdeaTagUpdateOne {
	ituo.mutation.AddIdeaIDs(ids...)
	return ituo
}

// AddIdeas adds the "ideas" edges to the Idea entity.
func (ituo *IdeaTagUpdateOne) AddIdeas(i ...*Idea) *IdeaTagUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ituo.AddIdeaIDs(ids...)
}

// Mutation returns the IdeaTagMutation object of the builder.
func (ituo *IdeaTagUpdateOne) Mutation() *IdeaTagMutation {
	return ituo.mutation
}

// ClearIdeas clears all "ideas" edges to the Idea entity.
func (ituo *IdeaTagUpdateOne) ClearIdeas() *IdeaTagUpdateOne {
	ituo.mutation.ClearIdeas()
	return ituo
}

// RemoveIdeaIDs removes the "ideas" edge to Idea entities by IDs.
func (ituo *IdeaTagUpdateOne) RemoveIdeaIDs(ids ...uuid.UUID) *IdeaTagUpdateOne {
	ituo.mutation.RemoveIdeaIDs(ids...)
	return ituo
}

// RemoveIdeas removes "ideas" edges to Idea entities.
func (ituo *IdeaTagUpdateOne) RemoveIdeas(i ...*Idea) *IdeaTagUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ituo.RemoveIdeaIDs(ids...)
}

// Where appends a list predicates to the IdeaTagUpdate builder.
func (ituo *IdeaTagUpdateOne) Where(ps ...predicate.IdeaTag) *IdeaTagUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *IdeaTagUpdateOne) Select(field string, fields ...string) *IdeaTagUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated IdeaTag entity.
func (ituo *IdeaTagUpdateOne) Save(ctx context.Context) (*IdeaTag, error) {
	ituo.defaults()
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *IdeaTagUpdateOne) SaveX(ctx context.Context) *IdeaTag {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *IdeaTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *IdeaTagUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ituo *IdeaTagUpdateOne) defaults() {
	if _, ok := ituo.mutation.UpdatedAt(); !ok {
		v := ideatag.UpdateDefaultUpdatedAt()
		ituo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ituo *IdeaTagUpdateOne) check() error {
	if v, ok := ituo.mutation.Name(); ok {
		if err := ideatag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IdeaTag.name": %w`, err)}
		}
	}
	if v, ok := ituo.mutation.Slug(); ok {
		if err := ideatag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "IdeaTag.slug": %w`, err)}
		}
	}
	return nil
}

func (ituo *IdeaTagUpdateOne) sqlSave(ctx context.Context) (_node *IdeaTag, err error) {
	if err := ituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideatag.Table, ideatag.Columns, sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdeaTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ideatag.FieldID)
		for _, f := range fields {
			if !ideatag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ideatag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.Name(); ok {
		_spec.SetField(ideatag.FieldName, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Slug(); ok {
		_spec.SetField(ideatag.FieldSlug, field.TypeString, value)
	}
	if value, ok := ituo.mutation.UpdatedAt(); ok {
		_spec.SetField(ideatag.FieldUpdatedAt, field.TypeTime, value)
	}
	if ituo.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ideatag.IdeasTable,
			Columns: ideatag.IdeasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.RemovedIdeasIDs(); len(nodes) > 0 && !ituo.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ideatag.IdeasTable,
			Columns: ideatag.IdeasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.IdeasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ideatag.IdeasTable,
			Columns: ideatag.IdeasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IdeaTag{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideatag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
