// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Idea is the model entity for the Idea schema.
type Idea struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Abstract holds the value of the "abstract" field.
	Abstract string `json:"abstract,omitempty"`
	// Status holds the value of the "status" field.
	Status idea.Status `json:"status,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority idea.Priority `json:"priority,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// ViewCount holds the value of the "view_count" field.
	ViewCount int `json:"view_count,omitempty"`
	// LikeCount holds the value of the "like_count" field.
	LikeCount int `json:"like_count,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdeaQuery when eager-loading is set.
	Edges        IdeaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdeaEdges holds the relations/edges for other nodes in the graph.
type IdeaEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*IdeaTranslation `json:"translations,omitempty"`
	// Details holds the value of the details edge.
	Details *IdeaDetail `json:"details,omitempty"`
	// BlogPosts holds the value of the blog_posts edge.
	BlogPosts []*BlogPost `json:"blog_posts,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*IdeaTag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdeaEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e IdeaEdges) TranslationsOrErr() ([]*IdeaTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// DetailsOrErr returns the Details value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdeaEdges) DetailsOrErr() (*IdeaDetail, error) {
	if e.Details != nil {
		return e.Details, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: ideadetail.Label}
	}
	return nil, &NotLoadedError{edge: "details"}
}

// BlogPostsOrErr returns the BlogPosts value or an error if the edge
// was not loaded in eager-loading.
func (e IdeaEdges) BlogPostsOrErr() ([]*BlogPost, error) {
	if e.loadedTypes[3] {
		return e.BlogPosts, nil
	}
	return nil, &NotLoadedError{edge: "blog_posts"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e IdeaEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[4] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e IdeaEdges) TagsOrErr() ([]*IdeaTag, error) {
	if e.loadedTypes[5] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Idea) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case idea.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case idea.FieldViewCount, idea.FieldLikeCount:
			values[i] = new(sql.NullInt64)
		case idea.FieldTitle, idea.FieldSlug, idea.FieldDescription, idea.FieldAbstract, idea.FieldStatus, idea.FieldPriority, idea.FieldCategory:
			values[i] = new(sql.NullString)
		case idea.FieldCreatedAt, idea.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case idea.FieldID, idea.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Idea fields.
func (i *Idea) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case idea.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case idea.FieldUserID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[j])
			} else if value != nil {
				i.UserID = *value
			}
		case idea.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case idea.FieldSlug:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[j])
			} else if value.Valid {
				i.Slug = value.String
			}
		case idea.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case idea.FieldAbstract:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abstract", values[j])
			} else if value.Valid {
				i.Abstract = value.String
			}
		case idea.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = idea.Status(value.String)
			}
		case idea.FieldPriority:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[j])
			} else if value.Valid {
				i.Priority = idea.Priority(value.String)
			}
		case idea.FieldIsPublic:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[j])
			} else if value.Valid {
				i.IsPublic = value.Bool
			}
		case idea.FieldViewCount:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_count", values[j])
			} else if value.Valid {
				i.ViewCount = int(value.Int64)
			}
		case idea.FieldLikeCount:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[j])
			} else if value.Valid {
				i.LikeCount = int(value.Int64)
			}
		case idea.FieldCategory:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[j])
			} else if value.Valid {
				i.Category = value.String
			}
		case idea.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case idea.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Idea.
// This includes values selected through modifiers, order, etc.
func (i *Idea) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Idea entity.
func (i *Idea) QueryUser() *UserQuery {
	return NewIdeaClient(i.config).QueryUser(i)
}

// QueryTranslations queries the "translations" edge of the Idea entity.
func (i *Idea) QueryTranslations() *IdeaTranslationQuery {
	return NewIdeaClient(i.config).QueryTranslations(i)
}

// QueryDetails queries the "details" edge of the Idea entity.
func (i *Idea) QueryDetails() *IdeaDetailQuery {
	return NewIdeaClient(i.config).QueryDetails(i)
}

// QueryBlogPosts queries the "blog_posts" edge of the Idea entity.
func (i *Idea) QueryBlogPosts() *BlogPostQuery {
	return NewIdeaClient(i.config).QueryBlogPosts(i)
}

// QueryComments queries the "comments" edge of the Idea entity.
func (i *Idea) QueryComments() *CommentQuery {
	return NewIdeaClient(i.config).QueryComments(i)
}

// QueryTags queries the "tags" edge of the Idea entity.
func (i *Idea) QueryTags() *IdeaTagQuery {
	return NewIdeaClient(i.config).QueryTags(i)
}

// Update returns a builder for updating this Idea.
// Note that you need to call Idea.Unwrap() before calling this method if this Idea
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Idea) Update() *IdeaUpdateOne {
	return NewIdeaClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Idea entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Idea) Unwrap() *Idea {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Idea is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Idea) String() string {
	var builder strings.Builder
	builder.WriteString("Idea(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", i.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(i.Slug)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("abstract=")
	builder.WriteString(i.Abstract)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", i.Status))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", i.Priority))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", i.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("view_count=")
	builder.WriteString(fmt.Sprintf("%v", i.ViewCount))
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", i.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(i.Category)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Ideas is a parsable slice of Idea.
type Ideas []*Idea
