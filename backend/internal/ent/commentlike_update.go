// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/commentlike"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/useridentity"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CommentLikeUpdate is the builder for updating CommentLike entities.
type CommentLikeUpdate struct {
	config
	hooks    []Hook
	mutation *CommentLikeMutation
}

// Where appends a list predicates to the CommentLikeUpdate builder.
func (clu *CommentLikeUpdate) Where(ps ...predicate.CommentLike) *CommentLikeUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetCommentID sets the "comment_id" field.
func (clu *CommentLikeUpdate) SetCommentID(u uuid.UUID) *CommentLikeUpdate {
	clu.mutation.SetCommentID(u)
	return clu
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (clu *CommentLikeUpdate) SetNillableCommentID(u *uuid.UUID) *CommentLikeUpdate {
	if u != nil {
		clu.SetCommentID(*u)
	}
	return clu
}

// SetUserIdentityID sets the "user_identity_id" field.
func (clu *CommentLikeUpdate) SetUserIdentityID(s string) *CommentLikeUpdate {
	clu.mutation.SetUserIdentityID(s)
	return clu
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (clu *CommentLikeUpdate) SetNillableUserIdentityID(s *string) *CommentLikeUpdate {
	if s != nil {
		clu.SetUserIdentityID(*s)
	}
	return clu
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (clu *CommentLikeUpdate) ClearUserIdentityID() *CommentLikeUpdate {
	clu.mutation.ClearUserIdentityID()
	return clu
}

// SetFingerprint sets the "fingerprint" field.
func (clu *CommentLikeUpdate) SetFingerprint(s string) *CommentLikeUpdate {
	clu.mutation.SetFingerprint(s)
	return clu
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (clu *CommentLikeUpdate) SetNillableFingerprint(s *string) *CommentLikeUpdate {
	if s != nil {
		clu.SetFingerprint(*s)
	}
	return clu
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (clu *CommentLikeUpdate) ClearFingerprint() *CommentLikeUpdate {
	clu.mutation.ClearFingerprint()
	return clu
}

// SetIPAddress sets the "ip_address" field.
func (clu *CommentLikeUpdate) SetIPAddress(s string) *CommentLikeUpdate {
	clu.mutation.SetIPAddress(s)
	return clu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (clu *CommentLikeUpdate) SetNillableIPAddress(s *string) *CommentLikeUpdate {
	if s != nil {
		clu.SetIPAddress(*s)
	}
	return clu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (clu *CommentLikeUpdate) ClearIPAddress() *CommentLikeUpdate {
	clu.mutation.ClearIPAddress()
	return clu
}

// SetUpdatedAt sets the "updated_at" field.
func (clu *CommentLikeUpdate) SetUpdatedAt(t time.Time) *CommentLikeUpdate {
	clu.mutation.SetUpdatedAt(t)
	return clu
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (clu *CommentLikeUpdate) SetUserIdentity(u *UserIdentity) *CommentLikeUpdate {
	return clu.SetUserIdentityID(u.ID)
}

// Mutation returns the CommentLikeMutation object of the builder.
func (clu *CommentLikeUpdate) Mutation() *CommentLikeMutation {
	return clu.mutation
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (clu *CommentLikeUpdate) ClearUserIdentity() *CommentLikeUpdate {
	clu.mutation.ClearUserIdentity()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CommentLikeUpdate) Save(ctx context.Context) (int, error) {
	clu.defaults()
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CommentLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CommentLikeUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CommentLikeUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clu *CommentLikeUpdate) defaults() {
	if _, ok := clu.mutation.UpdatedAt(); !ok {
		v := commentlike.UpdateDefaultUpdatedAt()
		clu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *CommentLikeUpdate) check() error {
	if v, ok := clu.mutation.IPAddress(); ok {
		if err := commentlike.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "CommentLike.ip_address": %w`, err)}
		}
	}
	return nil
}

func (clu *CommentLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentlike.Table, commentlike.Columns, sqlgraph.NewFieldSpec(commentlike.FieldID, field.TypeUUID))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.CommentID(); ok {
		_spec.SetField(commentlike.FieldCommentID, field.TypeUUID, value)
	}
	if value, ok := clu.mutation.Fingerprint(); ok {
		_spec.SetField(commentlike.FieldFingerprint, field.TypeString, value)
	}
	if clu.mutation.FingerprintCleared() {
		_spec.ClearField(commentlike.FieldFingerprint, field.TypeString)
	}
	if value, ok := clu.mutation.IPAddress(); ok {
		_spec.SetField(commentlike.FieldIPAddress, field.TypeString, value)
	}
	if clu.mutation.IPAddressCleared() {
		_spec.ClearField(commentlike.FieldIPAddress, field.TypeString)
	}
	if value, ok := clu.mutation.UpdatedAt(); ok {
		_spec.SetField(commentlike.FieldUpdatedAt, field.TypeTime, value)
	}
	if clu.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commentlike.UserIdentityTable,
			Columns: []string{commentlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commentlike.UserIdentityTable,
			Columns: []string{commentlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CommentLikeUpdateOne is the builder for updating a single CommentLike entity.
type CommentLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentLikeMutation
}

// SetCommentID sets the "comment_id" field.
func (cluo *CommentLikeUpdateOne) SetCommentID(u uuid.UUID) *CommentLikeUpdateOne {
	cluo.mutation.SetCommentID(u)
	return cluo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cluo *CommentLikeUpdateOne) SetNillableCommentID(u *uuid.UUID) *CommentLikeUpdateOne {
	if u != nil {
		cluo.SetCommentID(*u)
	}
	return cluo
}

// SetUserIdentityID sets the "user_identity_id" field.
func (cluo *CommentLikeUpdateOne) SetUserIdentityID(s string) *CommentLikeUpdateOne {
	cluo.mutation.SetUserIdentityID(s)
	return cluo
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (cluo *CommentLikeUpdateOne) SetNillableUserIdentityID(s *string) *CommentLikeUpdateOne {
	if s != nil {
		cluo.SetUserIdentityID(*s)
	}
	return cluo
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (cluo *CommentLikeUpdateOne) ClearUserIdentityID() *CommentLikeUpdateOne {
	cluo.mutation.ClearUserIdentityID()
	return cluo
}

// SetFingerprint sets the "fingerprint" field.
func (cluo *CommentLikeUpdateOne) SetFingerprint(s string) *CommentLikeUpdateOne {
	cluo.mutation.SetFingerprint(s)
	return cluo
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (cluo *CommentLikeUpdateOne) SetNillableFingerprint(s *string) *CommentLikeUpdateOne {
	if s != nil {
		cluo.SetFingerprint(*s)
	}
	return cluo
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (cluo *CommentLikeUpdateOne) ClearFingerprint() *CommentLikeUpdateOne {
	cluo.mutation.ClearFingerprint()
	return cluo
}

// SetIPAddress sets the "ip_address" field.
func (cluo *CommentLikeUpdateOne) SetIPAddress(s string) *CommentLikeUpdateOne {
	cluo.mutation.SetIPAddress(s)
	return cluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cluo *CommentLikeUpdateOne) SetNillableIPAddress(s *string) *CommentLikeUpdateOne {
	if s != nil {
		cluo.SetIPAddress(*s)
	}
	return cluo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (cluo *CommentLikeUpdateOne) ClearIPAddress() *CommentLikeUpdateOne {
	cluo.mutation.ClearIPAddress()
	return cluo
}

// SetUpdatedAt sets the "updated_at" field.
func (cluo *CommentLikeUpdateOne) SetUpdatedAt(t time.Time) *CommentLikeUpdateOne {
	cluo.mutation.SetUpdatedAt(t)
	return cluo
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (cluo *CommentLikeUpdateOne) SetUserIdentity(u *UserIdentity) *CommentLikeUpdateOne {
	return cluo.SetUserIdentityID(u.ID)
}

// Mutation returns the CommentLikeMutation object of the builder.
func (cluo *CommentLikeUpdateOne) Mutation() *CommentLikeMutation {
	return cluo.mutation
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (cluo *CommentLikeUpdateOne) ClearUserIdentity() *CommentLikeUpdateOne {
	cluo.mutation.ClearUserIdentity()
	return cluo
}

// Where appends a list predicates to the CommentLikeUpdate builder.
func (cluo *CommentLikeUpdateOne) Where(ps ...predicate.CommentLike) *CommentLikeUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CommentLikeUpdateOne) Select(field string, fields ...string) *CommentLikeUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CommentLike entity.
func (cluo *CommentLikeUpdateOne) Save(ctx context.Context) (*CommentLike, error) {
	cluo.defaults()
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CommentLikeUpdateOne) SaveX(ctx context.Context) *CommentLike {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CommentLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CommentLikeUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cluo *CommentLikeUpdateOne) defaults() {
	if _, ok := cluo.mutation.UpdatedAt(); !ok {
		v := commentlike.UpdateDefaultUpdatedAt()
		cluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *CommentLikeUpdateOne) check() error {
	if v, ok := cluo.mutation.IPAddress(); ok {
		if err := commentlike.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "CommentLike.ip_address": %w`, err)}
		}
	}
	return nil
}

func (cluo *CommentLikeUpdateOne) sqlSave(ctx context.Context) (_node *CommentLike, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentlike.Table, commentlike.Columns, sqlgraph.NewFieldSpec(commentlike.FieldID, field.TypeUUID))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommentLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentlike.FieldID)
		for _, f := range fields {
			if !commentlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.CommentID(); ok {
		_spec.SetField(commentlike.FieldCommentID, field.TypeUUID, value)
	}
	if value, ok := cluo.mutation.Fingerprint(); ok {
		_spec.SetField(commentlike.FieldFingerprint, field.TypeString, value)
	}
	if cluo.mutation.FingerprintCleared() {
		_spec.ClearField(commentlike.FieldFingerprint, field.TypeString)
	}
	if value, ok := cluo.mutation.IPAddress(); ok {
		_spec.SetField(commentlike.FieldIPAddress, field.TypeString, value)
	}
	if cluo.mutation.IPAddressCleared() {
		_spec.ClearField(commentlike.FieldIPAddress, field.TypeString)
	}
	if value, ok := cluo.mutation.UpdatedAt(); ok {
		_spec.SetField(commentlike.FieldUpdatedAt, field.TypeTime, value)
	}
	if cluo.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commentlike.UserIdentityTable,
			Columns: []string{commentlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commentlike.UserIdentityTable,
			Columns: []string{commentlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommentLike{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
