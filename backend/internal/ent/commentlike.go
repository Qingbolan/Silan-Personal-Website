// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/commentlike"
	"silan-backend/internal/ent/useridentity"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// CommentLike is the model entity for the CommentLike schema.
type CommentLike struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID uuid.UUID `json:"comment_id,omitempty"`
	// ID of the authenticated user who liked
	UserIdentityID string `json:"user_identity_id,omitempty"`
	// Browser fingerprint for anonymous likes
	Fingerprint string `json:"fingerprint,omitempty"`
	// IP address of the user who liked
	IPAddress string `json:"ip_address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentLikeQuery when eager-loading is set.
	Edges        CommentLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentLikeEdges holds the relations/edges for other nodes in the graph.
type CommentLikeEdges struct {
	// Comment holds the value of the comment edge.
	Comment *BlogComment `json:"comment,omitempty"`
	// UserIdentity holds the value of the user_identity edge.
	UserIdentity *UserIdentity `json:"user_identity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentLikeEdges) CommentOrErr() (*BlogComment, error) {
	if e.Comment != nil {
		return e.Comment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blogcomment.Label}
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// UserIdentityOrErr returns the UserIdentity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentLikeEdges) UserIdentityOrErr() (*UserIdentity, error) {
	if e.UserIdentity != nil {
		return e.UserIdentity, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: useridentity.Label}
	}
	return nil, &NotLoadedError{edge: "user_identity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommentLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commentlike.FieldUserIdentityID, commentlike.FieldFingerprint, commentlike.FieldIPAddress:
			values[i] = new(sql.NullString)
		case commentlike.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case commentlike.FieldID, commentlike.FieldCommentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommentLike fields.
func (cl *CommentLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commentlike.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cl.ID = *value
			}
		case commentlike.FieldCommentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value != nil {
				cl.CommentID = *value
			}
		case commentlike.FieldUserIdentityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_identity_id", values[i])
			} else if value.Valid {
				cl.UserIdentityID = value.String
			}
		case commentlike.FieldFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fingerprint", values[i])
			} else if value.Valid {
				cl.Fingerprint = value.String
			}
		case commentlike.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				cl.IPAddress = value.String
			}
		case commentlike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = value.Time
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommentLike.
// This includes values selected through modifiers, order, etc.
func (cl *CommentLike) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryComment queries the "comment" edge of the CommentLike entity.
func (cl *CommentLike) QueryComment() *BlogCommentQuery {
	return NewCommentLikeClient(cl.config).QueryComment(cl)
}

// QueryUserIdentity queries the "user_identity" edge of the CommentLike entity.
func (cl *CommentLike) QueryUserIdentity() *UserIdentityQuery {
	return NewCommentLikeClient(cl.config).QueryUserIdentity(cl)
}

// Update returns a builder for updating this CommentLike.
// Note that you need to call CommentLike.Unwrap() before calling this method if this CommentLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CommentLike) Update() *CommentLikeUpdateOne {
	return NewCommentLikeClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CommentLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CommentLike) Unwrap() *CommentLike {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommentLike is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CommentLike) String() string {
	var builder strings.Builder
	builder.WriteString("CommentLike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("comment_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.CommentID))
	builder.WriteString(", ")
	builder.WriteString("user_identity_id=")
	builder.WriteString(cl.UserIdentityID)
	builder.WriteString(", ")
	builder.WriteString("fingerprint=")
	builder.WriteString(cl.Fingerprint)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(cl.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CommentLikes is a parsable slice of CommentLike.
type CommentLikes []*CommentLike
