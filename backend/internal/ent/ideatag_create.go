// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatag"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaTagCreate is the builder for creating a IdeaTag entity.
type IdeaTagCreate struct {
	config
	mutation *IdeaTagMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (itc *IdeaTagCreate) SetName(s string) *IdeaTagCreate {
	itc.mutation.SetName(s)
	return itc
}

// SetSlug sets the "slug" field.
func (itc *IdeaTagCreate) SetSlug(s string) *IdeaTagCreate {
	itc.mutation.SetSlug(s)
	return itc
}

// SetCreatedAt sets the "created_at" field.
func (itc *IdeaTagCreate) SetCreatedAt(t time.Time) *IdeaTagCreate {
	itc.mutation.SetCreatedAt(t)
	return itc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (itc *IdeaTagCreate) SetNillableCreatedAt(t *time.Time) *IdeaTagCreate {
	if t != nil {
		itc.SetCreatedAt(*t)
	}
	return itc
}

// SetUpdatedAt sets the "updated_at" field.
func (itc *IdeaTagCreate) SetUpdatedAt(t time.Time) *IdeaTagCreate {
	itc.mutation.SetUpdatedAt(t)
	return itc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (itc *IdeaTagCreate) SetNillableUpdatedAt(t *time.Time) *IdeaTagCreate {
	if t != nil {
		itc.SetUpdatedAt(*t)
	}
	return itc
}

// SetID sets the "id" field.
func (itc *IdeaTagCreate) SetID(u uuid.UUID) *IdeaTagCreate {
	itc.mutation.SetID(u)
	return itc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (itc *IdeaTagCreate) SetNillableID(u *uuid.UUID) *IdeaTagCreate {
	if u != nil {
		itc.SetID(*u)
	}
	return itc
}

// AddIdeaIDs adds the "ideas" edge to the Idea entity by IDs.
func (itc *IdeaTagCreate) AddIdeaIDs(ids ...uuid.UUID) *IdeaTagCreate {
	itc.mutation.AddIdeaIDs(ids...)
	return itc
}

// AddIdeas adds the "ideas" edges to the Idea entity.
func (itc *IdeaTagCreate) AddIdeas(i ...*Idea) *IdeaTagCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itc.AddIdeaIDs(ids...)
}

// Mutation returns the IdeaTagMutation object of the builder.
func (itc *IdeaTagCreate) Mutation() *IdeaTagMutation {
	return itc.mutation
}

// Save creates the IdeaTag in the database.
func (itc *IdeaTagCreate) Save(ctx context.Context) (*IdeaTag, error) {
	itc.defaults()
	return withHooks(ctx, itc.sqlSave, itc.mutation, itc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itc *IdeaTagCreate) SaveX(ctx context.Context) *IdeaTag {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itc *IdeaTagCreate) Exec(ctx context.Context) error {
	_, err := itc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itc *IdeaTagCreate) ExecX(ctx context.Context) {
	if err := itc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itc *IdeaTagCreate) defaults() {
	if _, ok := itc.mutation.CreatedAt(); !ok {
		v := ideatag.DefaultCreatedAt()
		itc.mutation.SetCreatedAt(v)
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		v := ideatag.DefaultUpdatedAt()
		itc.mutation.SetUpdatedAt(v)
	}
	if _, ok := itc.mutation.ID(); !ok {
		v := ideatag.DefaultID()
		itc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itc *IdeaTagCreate) check() error {
	if _, ok := itc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "IdeaTag.name"`)}
	}
	if v, ok := itc.mutation.Name(); ok {
		if err := ideatag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IdeaTag.name": %w`, err)}
		}
	}
	if _, ok := itc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "IdeaTag.slug"`)}
	}
	if v, ok := itc.mutation.Slug(); ok {
		if err := ideatag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "IdeaTag.slug": %w`, err)}
		}
	}
	if _, ok := itc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IdeaTag.created_at"`)}
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IdeaTag.updated_at"`)}
	}
	return nil
}

func (itc *IdeaTagCreate) sqlSave(ctx context.Context) (*IdeaTag, error) {
	if err := itc.check(); err != nil {
		return nil, err
	}
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	itc.mutation.id = &_node.ID
	itc.mutation.done = true
	return _node, nil
}

func (itc *IdeaTagCreate) createSpec() (*IdeaTag, *sqlgraph.CreateSpec) {
	var (
		_node = &IdeaTag{config: itc.config}
		_spec = sqlgraph.NewCreateSpec(ideatag.Table, sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID))
	)
	if id, ok := itc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := itc.mutation.Name(); ok {
		_spec.SetField(ideatag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := itc.mutation.Slug(); ok {
		_spec.SetField(ideatag.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := itc.mutation.CreatedAt(); ok {
		_spec.SetField(ideatag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := itc.mutation.UpdatedAt(); ok {
		_spec.SetField(ideatag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := itc.mutation.IdeasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ideatag.IdeasTable,
			Columns: ideatag.IdeasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdeaTagCreateBulk is the builder for creating many IdeaTag entities in bulk.
type IdeaTagCreateBulk struct {
	config
	err      error
	builders []*IdeaTagCreate
}

// Save creates the IdeaTag entities in the database.
func (itcb *IdeaTagCreateBulk) Save(ctx context.Context) ([]*IdeaTag, error) {
	if itcb.err != nil {
		return nil, itcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*IdeaTag, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdeaTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *IdeaTagCreateBulk) SaveX(ctx context.Context) []*IdeaTag {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itcb *IdeaTagCreateBulk) Exec(ctx context.Context) error {
	_, err := itcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itcb *IdeaTagCreateBulk) ExecX(ctx context.Context) {
	if err := itcb.Exec(ctx); err != nil {
		panic(err)
	}
}
