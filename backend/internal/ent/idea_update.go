// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/comment"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/ideatag"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaUpdate is the builder for updating Idea entities.
type IdeaUpdate struct {
	config
	hooks    []Hook
	mutation *IdeaMutation
}

// Where appends a list predicates to the IdeaUpdate builder.
func (iu *IdeaUpdate) Where(ps ...predicate.Idea) *IdeaUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUserID sets the "user_id" field.
func (iu *IdeaUpdate) SetUserID(u uuid.UUID) *IdeaUpdate {
	iu.mutation.SetUserID(u)
	return iu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableUserID(u *uuid.UUID) *IdeaUpdate {
	if u != nil {
		iu.SetUserID(*u)
	}
	return iu
}

// SetTitle sets the "title" field.
func (iu *IdeaUpdate) SetTitle(s string) *IdeaUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableTitle(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetSlug sets the "slug" field.
func (iu *IdeaUpdate) SetSlug(s string) *IdeaUpdate {
	iu.mutation.SetSlug(s)
	return iu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableSlug(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetSlug(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *IdeaUpdate) SetDescription(s string) *IdeaUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableDescription(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *IdeaUpdate) ClearDescription() *IdeaUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetAbstract sets the "abstract" field.
func (iu *IdeaUpdate) SetAbstract(s string) *IdeaUpdate {
	iu.mutation.SetAbstract(s)
	return iu
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableAbstract(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetAbstract(*s)
	}
	return iu
}

// ClearAbstract clears the value of the "abstract" field.
func (iu *IdeaUpdate) ClearAbstract() *IdeaUpdate {
	iu.mutation.ClearAbstract()
	return iu
}

// SetStatus sets the "status" field.
func (iu *IdeaUpdate) SetStatus(i idea.Status) *IdeaUpdate {
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableStatus(i *idea.Status) *IdeaUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// SetPriority sets the "priority" field.
func (iu *IdeaUpdate) SetPriority(i idea.Priority) *IdeaUpdate {
	iu.mutation.SetPriority(i)
	return iu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillablePriority(i *idea.Priority) *IdeaUpdate {
	if i != nil {
		iu.SetPriority(*i)
	}
	return iu
}

// SetIsPublic sets the "is_public" field.
func (iu *IdeaUpdate) SetIsPublic(b bool) *IdeaUpdate {
	iu.mutation.SetIsPublic(b)
	return iu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableIsPublic(b *bool) *IdeaUpdate {
	if b != nil {
		iu.SetIsPublic(*b)
	}
	return iu
}

// SetViewCount sets the "view_count" field.
func (iu *IdeaUpdate) SetViewCount(i int) *IdeaUpdate {
	iu.mutation.ResetViewCount()
	iu.mutation.SetViewCount(i)
	return iu
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableViewCount(i *int) *IdeaUpdate {
	if i != nil {
		iu.SetViewCount(*i)
	}
	return iu
}

// AddViewCount adds i to the "view_count" field.
func (iu *IdeaUpdate) AddViewCount(i int) *IdeaUpdate {
	iu.mutation.AddViewCount(i)
	return iu
}

// SetLikeCount sets the "like_count" field.
func (iu *IdeaUpdate) SetLikeCount(i int) *IdeaUpdate {
	iu.mutation.ResetLikeCount()
	iu.mutation.SetLikeCount(i)
	return iu
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableLikeCount(i *int) *IdeaUpdate {
	if i != nil {
		iu.SetLikeCount(*i)
	}
	return iu
}

// AddLikeCount adds i to the "like_count" field.
func (iu *IdeaUpdate) AddLikeCount(i int) *IdeaUpdate {
	iu.mutation.AddLikeCount(i)
	return iu
}

// SetCategory sets the "category" field.
func (iu *IdeaUpdate) SetCategory(s string) *IdeaUpdate {
	iu.mutation.SetCategory(s)
	return iu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableCategory(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetCategory(*s)
	}
	return iu
}

// ClearCategory clears the value of the "category" field.
func (iu *IdeaUpdate) ClearCategory() *IdeaUpdate {
	iu.mutation.ClearCategory()
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IdeaUpdate) SetUpdatedAt(t time.Time) *IdeaUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *IdeaUpdate) SetUser(u *User) *IdeaUpdate {
	return iu.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the IdeaTranslation entity by IDs.
func (iu *IdeaUpdate) AddTranslationIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.AddTranslationIDs(ids...)
	return iu
}

// AddTranslations adds the "translations" edges to the IdeaTranslation entity.
func (iu *IdeaUpdate) AddTranslations(i ...*IdeaTranslation) *IdeaUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddTranslationIDs(ids...)
}

// SetDetailsID sets the "details" edge to the IdeaDetail entity by ID.
func (iu *IdeaUpdate) SetDetailsID(id uuid.UUID) *IdeaUpdate {
	iu.mutation.SetDetailsID(id)
	return iu
}

// SetNillableDetailsID sets the "details" edge to the IdeaDetail entity by ID if the given value is not nil.
func (iu *IdeaUpdate) SetNillableDetailsID(id *uuid.UUID) *IdeaUpdate {
	if id != nil {
		iu = iu.SetDetailsID(*id)
	}
	return iu
}

// SetDetails sets the "details" edge to the IdeaDetail entity.
func (iu *IdeaUpdate) SetDetails(i *IdeaDetail) *IdeaUpdate {
	return iu.SetDetailsID(i.ID)
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (iu *IdeaUpdate) AddBlogPostIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.AddBlogPostIDs(ids...)
	return iu
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (iu *IdeaUpdate) AddBlogPosts(b ...*BlogPost) *IdeaUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.AddBlogPostIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (iu *IdeaUpdate) AddCommentIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.AddCommentIDs(ids...)
	return iu
}

// AddComments adds the "comments" edges to the Comment entity.
func (iu *IdeaUpdate) AddComments(c ...*Comment) *IdeaUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the IdeaTag entity by IDs.
func (iu *IdeaUpdate) AddTagIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.AddTagIDs(ids...)
	return iu
}

// AddTags adds the "tags" edges to the IdeaTag entity.
func (iu *IdeaUpdate) AddTags(i ...*IdeaTag) *IdeaUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddTagIDs(ids...)
}

// Mutation returns the IdeaMutation object of the builder.
func (iu *IdeaUpdate) Mutation() *IdeaMutation {
	return iu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iu *IdeaUpdate) ClearUser() *IdeaUpdate {
	iu.mutation.ClearUser()
	return iu
}

// ClearTranslations clears all "translations" edges to the IdeaTranslation entity.
func (iu *IdeaUpdate) ClearTranslations() *IdeaUpdate {
	iu.mutation.ClearTranslations()
	return iu
}

// RemoveTranslationIDs removes the "translations" edge to IdeaTranslation entities by IDs.
func (iu *IdeaUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.RemoveTranslationIDs(ids...)
	return iu
}

// RemoveTranslations removes "translations" edges to IdeaTranslation entities.
func (iu *IdeaUpdate) RemoveTranslations(i ...*IdeaTranslation) *IdeaUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveTranslationIDs(ids...)
}

// ClearDetails clears the "details" edge to the IdeaDetail entity.
func (iu *IdeaUpdate) ClearDetails() *IdeaUpdate {
	iu.mutation.ClearDetails()
	return iu
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (iu *IdeaUpdate) ClearBlogPosts() *IdeaUpdate {
	iu.mutation.ClearBlogPosts()
	return iu
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (iu *IdeaUpdate) RemoveBlogPostIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.RemoveBlogPostIDs(ids...)
	return iu
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (iu *IdeaUpdate) RemoveBlogPosts(b ...*BlogPost) *IdeaUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.RemoveBlogPostIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (iu *IdeaUpdate) ClearComments() *IdeaUpdate {
	iu.mutation.ClearComments()
	return iu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (iu *IdeaUpdate) RemoveCommentIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.RemoveCommentIDs(ids...)
	return iu
}

// RemoveComments removes "comments" edges to Comment entities.
func (iu *IdeaUpdate) RemoveComments(c ...*Comment) *IdeaUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the IdeaTag entity.
func (iu *IdeaUpdate) ClearTags() *IdeaUpdate {
	iu.mutation.ClearTags()
	return iu
}

// RemoveTagIDs removes the "tags" edge to IdeaTag entities by IDs.
func (iu *IdeaUpdate) RemoveTagIDs(ids ...uuid.UUID) *IdeaUpdate {
	iu.mutation.RemoveTagIDs(ids...)
	return iu
}

// RemoveTags removes "tags" edges to IdeaTag entities.
func (iu *IdeaUpdate) RemoveTags(i ...*IdeaTag) *IdeaUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdeaUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdeaUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdeaUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdeaUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IdeaUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := idea.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IdeaUpdate) check() error {
	if v, ok := iu.mutation.Title(); ok {
		if err := idea.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Idea.title": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Slug(); ok {
		if err := idea.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Idea.slug": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Status(); ok {
		if err := idea.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Idea.status": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Priority(); ok {
		if err := idea.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Idea.priority": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Category(); ok {
		if err := idea.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Idea.category": %w`, err)}
		}
	}
	if iu.mutation.UserCleared() && len(iu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Idea.user"`)
	}
	return nil
}

func (iu *IdeaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(idea.Table, idea.Columns, sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(idea.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.Slug(); ok {
		_spec.SetField(idea.FieldSlug, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(idea.FieldDescription, field.TypeString, value)
	}
	if iu.mutation.DescriptionCleared() {
		_spec.ClearField(idea.FieldDescription, field.TypeString)
	}
	if value, ok := iu.mutation.Abstract(); ok {
		_spec.SetField(idea.FieldAbstract, field.TypeString, value)
	}
	if iu.mutation.AbstractCleared() {
		_spec.ClearField(idea.FieldAbstract, field.TypeString)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(idea.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.Priority(); ok {
		_spec.SetField(idea.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.IsPublic(); ok {
		_spec.SetField(idea.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := iu.mutation.ViewCount(); ok {
		_spec.SetField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedViewCount(); ok {
		_spec.AddField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.LikeCount(); ok {
		_spec.SetField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedLikeCount(); ok {
		_spec.AddField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.Category(); ok {
		_spec.SetField(idea.FieldCategory, field.TypeString, value)
	}
	if iu.mutation.CategoryCleared() {
		_spec.ClearField(idea.FieldCategory, field.TypeString)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(idea.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.TranslationsTable,
			Columns: []string{idea.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !iu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.TranslationsTable,
			Columns: []string{idea.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.TranslationsTable,
			Columns: []string{idea.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   idea.DetailsTable,
			Columns: []string{idea.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   idea.DetailsTable,
			Columns: []string{idea.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.BlogPostsTable,
			Columns: []string{idea.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !iu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.BlogPostsTable,
			Columns: []string{idea.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.BlogPostsTable,
			Columns: []string{idea.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.CommentsTable,
			Columns: []string{idea.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.CommentsTable,
			Columns: []string{idea.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.CommentsTable,
			Columns: []string{idea.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   idea.TagsTable,
			Columns: idea.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !iu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   idea.TagsTable,
			Columns: idea.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   idea.TagsTable,
			Columns: idea.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdeaUpdateOne is the builder for updating a single Idea entity.
type IdeaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdeaMutation
}

// SetUserID sets the "user_id" field.
func (iuo *IdeaUpdateOne) SetUserID(u uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.SetUserID(u)
	return iuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableUserID(u *uuid.UUID) *IdeaUpdateOne {
	if u != nil {
		iuo.SetUserID(*u)
	}
	return iuo
}

// SetTitle sets the "title" field.
func (iuo *IdeaUpdateOne) SetTitle(s string) *IdeaUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableTitle(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetSlug sets the "slug" field.
func (iuo *IdeaUpdateOne) SetSlug(s string) *IdeaUpdateOne {
	iuo.mutation.SetSlug(s)
	return iuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableSlug(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetSlug(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *IdeaUpdateOne) SetDescription(s string) *IdeaUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableDescription(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *IdeaUpdateOne) ClearDescription() *IdeaUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetAbstract sets the "abstract" field.
func (iuo *IdeaUpdateOne) SetAbstract(s string) *IdeaUpdateOne {
	iuo.mutation.SetAbstract(s)
	return iuo
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableAbstract(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetAbstract(*s)
	}
	return iuo
}

// ClearAbstract clears the value of the "abstract" field.
func (iuo *IdeaUpdateOne) ClearAbstract() *IdeaUpdateOne {
	iuo.mutation.ClearAbstract()
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *IdeaUpdateOne) SetStatus(i idea.Status) *IdeaUpdateOne {
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableStatus(i *idea.Status) *IdeaUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// SetPriority sets the "priority" field.
func (iuo *IdeaUpdateOne) SetPriority(i idea.Priority) *IdeaUpdateOne {
	iuo.mutation.SetPriority(i)
	return iuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillablePriority(i *idea.Priority) *IdeaUpdateOne {
	if i != nil {
		iuo.SetPriority(*i)
	}
	return iuo
}

// SetIsPublic sets the "is_public" field.
func (iuo *IdeaUpdateOne) SetIsPublic(b bool) *IdeaUpdateOne {
	iuo.mutation.SetIsPublic(b)
	return iuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableIsPublic(b *bool) *IdeaUpdateOne {
	if b != nil {
		iuo.SetIsPublic(*b)
	}
	return iuo
}

// SetViewCount sets the "view_count" field.
func (iuo *IdeaUpdateOne) SetViewCount(i int) *IdeaUpdateOne {
	iuo.mutation.ResetViewCount()
	iuo.mutation.SetViewCount(i)
	return iuo
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableViewCount(i *int) *IdeaUpdateOne {
	if i != nil {
		iuo.SetViewCount(*i)
	}
	return iuo
}

// AddViewCount adds i to the "view_count" field.
func (iuo *IdeaUpdateOne) AddViewCount(i int) *IdeaUpdateOne {
	iuo.mutation.AddViewCount(i)
	return iuo
}

// SetLikeCount sets the "like_count" field.
func (iuo *IdeaUpdateOne) SetLikeCount(i int) *IdeaUpdateOne {
	iuo.mutation.ResetLikeCount()
	iuo.mutation.SetLikeCount(i)
	return iuo
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableLikeCount(i *int) *IdeaUpdateOne {
	if i != nil {
		iuo.SetLikeCount(*i)
	}
	return iuo
}

// AddLikeCount adds i to the "like_count" field.
func (iuo *IdeaUpdateOne) AddLikeCount(i int) *IdeaUpdateOne {
	iuo.mutation.AddLikeCount(i)
	return iuo
}

// SetCategory sets the "category" field.
func (iuo *IdeaUpdateOne) SetCategory(s string) *IdeaUpdateOne {
	iuo.mutation.SetCategory(s)
	return iuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableCategory(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetCategory(*s)
	}
	return iuo
}

// ClearCategory clears the value of the "category" field.
func (iuo *IdeaUpdateOne) ClearCategory() *IdeaUpdateOne {
	iuo.mutation.ClearCategory()
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IdeaUpdateOne) SetUpdatedAt(t time.Time) *IdeaUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *IdeaUpdateOne) SetUser(u *User) *IdeaUpdateOne {
	return iuo.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the IdeaTranslation entity by IDs.
func (iuo *IdeaUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.AddTranslationIDs(ids...)
	return iuo
}

// AddTranslations adds the "translations" edges to the IdeaTranslation entity.
func (iuo *IdeaUpdateOne) AddTranslations(i ...*IdeaTranslation) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddTranslationIDs(ids...)
}

// SetDetailsID sets the "details" edge to the IdeaDetail entity by ID.
func (iuo *IdeaUpdateOne) SetDetailsID(id uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.SetDetailsID(id)
	return iuo
}

// SetNillableDetailsID sets the "details" edge to the IdeaDetail entity by ID if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableDetailsID(id *uuid.UUID) *IdeaUpdateOne {
	if id != nil {
		iuo = iuo.SetDetailsID(*id)
	}
	return iuo
}

// SetDetails sets the "details" edge to the IdeaDetail entity.
func (iuo *IdeaUpdateOne) SetDetails(i *IdeaDetail) *IdeaUpdateOne {
	return iuo.SetDetailsID(i.ID)
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (iuo *IdeaUpdateOne) AddBlogPostIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.AddBlogPostIDs(ids...)
	return iuo
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (iuo *IdeaUpdateOne) AddBlogPosts(b ...*BlogPost) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.AddBlogPostIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (iuo *IdeaUpdateOne) AddCommentIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.AddCommentIDs(ids...)
	return iuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (iuo *IdeaUpdateOne) AddComments(c ...*Comment) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the IdeaTag entity by IDs.
func (iuo *IdeaUpdateOne) AddTagIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.AddTagIDs(ids...)
	return iuo
}

// AddTags adds the "tags" edges to the IdeaTag entity.
func (iuo *IdeaUpdateOne) AddTags(i ...*IdeaTag) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddTagIDs(ids...)
}

// Mutation returns the IdeaMutation object of the builder.
func (iuo *IdeaUpdateOne) Mutation() *IdeaMutation {
	return iuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *IdeaUpdateOne) ClearUser() *IdeaUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// ClearTranslations clears all "translations" edges to the IdeaTranslation entity.
func (iuo *IdeaUpdateOne) ClearTranslations() *IdeaUpdateOne {
	iuo.mutation.ClearTranslations()
	return iuo
}

// RemoveTranslationIDs removes the "translations" edge to IdeaTranslation entities by IDs.
func (iuo *IdeaUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.RemoveTranslationIDs(ids...)
	return iuo
}

// RemoveTranslations removes "translations" edges to IdeaTranslation entities.
func (iuo *IdeaUpdateOne) RemoveTranslations(i ...*IdeaTranslation) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveTranslationIDs(ids...)
}

// ClearDetails clears the "details" edge to the IdeaDetail entity.
func (iuo *IdeaUpdateOne) ClearDetails() *IdeaUpdateOne {
	iuo.mutation.ClearDetails()
	return iuo
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (iuo *IdeaUpdateOne) ClearBlogPosts() *IdeaUpdateOne {
	iuo.mutation.ClearBlogPosts()
	return iuo
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (iuo *IdeaUpdateOne) RemoveBlogPostIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.RemoveBlogPostIDs(ids...)
	return iuo
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (iuo *IdeaUpdateOne) RemoveBlogPosts(b ...*BlogPost) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.RemoveBlogPostIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (iuo *IdeaUpdateOne) ClearComments() *IdeaUpdateOne {
	iuo.mutation.ClearComments()
	return iuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (iuo *IdeaUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.RemoveCommentIDs(ids...)
	return iuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (iuo *IdeaUpdateOne) RemoveComments(c ...*Comment) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the IdeaTag entity.
func (iuo *IdeaUpdateOne) ClearTags() *IdeaUpdateOne {
	iuo.mutation.ClearTags()
	return iuo
}

// RemoveTagIDs removes the "tags" edge to IdeaTag entities by IDs.
func (iuo *IdeaUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.RemoveTagIDs(ids...)
	return iuo
}

// RemoveTags removes "tags" edges to IdeaTag entities.
func (iuo *IdeaUpdateOne) RemoveTags(i ...*IdeaTag) *IdeaUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the IdeaUpdate builder.
func (iuo *IdeaUpdateOne) Where(ps ...predicate.Idea) *IdeaUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdeaUpdateOne) Select(field string, fields ...string) *IdeaUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Idea entity.
func (iuo *IdeaUpdateOne) Save(ctx context.Context) (*Idea, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdeaUpdateOne) SaveX(ctx context.Context) *Idea {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdeaUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdeaUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IdeaUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := idea.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IdeaUpdateOne) check() error {
	if v, ok := iuo.mutation.Title(); ok {
		if err := idea.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Idea.title": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Slug(); ok {
		if err := idea.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Idea.slug": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Status(); ok {
		if err := idea.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Idea.status": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Priority(); ok {
		if err := idea.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Idea.priority": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Category(); ok {
		if err := idea.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Idea.category": %w`, err)}
		}
	}
	if iuo.mutation.UserCleared() && len(iuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Idea.user"`)
	}
	return nil
}

func (iuo *IdeaUpdateOne) sqlSave(ctx context.Context) (_node *Idea, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(idea.Table, idea.Columns, sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Idea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, idea.FieldID)
		for _, f := range fields {
			if !idea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != idea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(idea.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Slug(); ok {
		_spec.SetField(idea.FieldSlug, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(idea.FieldDescription, field.TypeString, value)
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.ClearField(idea.FieldDescription, field.TypeString)
	}
	if value, ok := iuo.mutation.Abstract(); ok {
		_spec.SetField(idea.FieldAbstract, field.TypeString, value)
	}
	if iuo.mutation.AbstractCleared() {
		_spec.ClearField(idea.FieldAbstract, field.TypeString)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(idea.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.Priority(); ok {
		_spec.SetField(idea.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.IsPublic(); ok {
		_spec.SetField(idea.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.ViewCount(); ok {
		_spec.SetField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedViewCount(); ok {
		_spec.AddField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.LikeCount(); ok {
		_spec.SetField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedLikeCount(); ok {
		_spec.AddField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.Category(); ok {
		_spec.SetField(idea.FieldCategory, field.TypeString, value)
	}
	if iuo.mutation.CategoryCleared() {
		_spec.ClearField(idea.FieldCategory, field.TypeString)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(idea.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.TranslationsTable,
			Columns: []string{idea.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !iuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.TranslationsTable,
			Columns: []string{idea.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.TranslationsTable,
			Columns: []string{idea.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   idea.DetailsTable,
			Columns: []string{idea.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   idea.DetailsTable,
			Columns: []string{idea.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.BlogPostsTable,
			Columns: []string{idea.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !iuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.BlogPostsTable,
			Columns: []string{idea.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.BlogPostsTable,
			Columns: []string{idea.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.CommentsTable,
			Columns: []string{idea.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.CommentsTable,
			Columns: []string{idea.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.CommentsTable,
			Columns: []string{idea.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   idea.TagsTable,
			Columns: idea.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !iuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   idea.TagsTable,
			Columns: idea.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   idea.TagsTable,
			Columns: idea.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Idea{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
