// Code generated by ent, DO NOT EDIT.

package ideadetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ideadetail type in the database.
	Label = "idea_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdeaID holds the string denoting the idea_id field in the database.
	FieldIdeaID = "idea_id"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldResults holds the string denoting the results field in the database.
	FieldResults = "results"
	// FieldReferences holds the string denoting the references field in the database.
	FieldReferences = "references"
	// FieldEstimatedDurationMonths holds the string denoting the estimated_duration_months field in the database.
	FieldEstimatedDurationMonths = "estimated_duration_months"
	// FieldRequiredResources holds the string denoting the required_resources field in the database.
	FieldRequiredResources = "required_resources"
	// FieldCollaborationNeeded holds the string denoting the collaboration_needed field in the database.
	FieldCollaborationNeeded = "collaboration_needed"
	// FieldFundingRequired holds the string denoting the funding_required field in the database.
	FieldFundingRequired = "funding_required"
	// FieldEstimatedBudget holds the string denoting the estimated_budget field in the database.
	FieldEstimatedBudget = "estimated_budget"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeIdea holds the string denoting the idea edge name in mutations.
	EdgeIdea = "idea"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// Table holds the table name of the ideadetail in the database.
	Table = "idea_details"
	// IdeaTable is the table that holds the idea relation/edge.
	IdeaTable = "idea_details"
	// IdeaInverseTable is the table name for the Idea entity.
	// It exists in this package in order to avoid circular dependency with the "idea" package.
	IdeaInverseTable = "ideas"
	// IdeaColumn is the table column denoting the idea relation/edge.
	IdeaColumn = "idea_id"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "idea_detail_translations"
	// TranslationsInverseTable is the table name for the IdeaDetailTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "ideadetailtranslation" package.
	TranslationsInverseTable = "idea_detail_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "idea_detail_id"
)

// Columns holds all SQL columns for ideadetail fields.
var Columns = []string{
	FieldID,
	FieldIdeaID,
	FieldProgress,
	FieldResults,
	FieldReferences,
	FieldEstimatedDurationMonths,
	FieldRequiredResources,
	FieldCollaborationNeeded,
	FieldFundingRequired,
	FieldEstimatedBudget,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCollaborationNeeded holds the default value on creation for the "collaboration_needed" field.
	DefaultCollaborationNeeded bool
	// DefaultFundingRequired holds the default value on creation for the "funding_required" field.
	DefaultFundingRequired bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the IdeaDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIdeaID orders the results by the idea_id field.
func ByIdeaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdeaID, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByResults orders the results by the results field.
func ByResults(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResults, opts...).ToFunc()
}

// ByReferences orders the results by the references field.
func ByReferences(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferences, opts...).ToFunc()
}

// ByEstimatedDurationMonths orders the results by the estimated_duration_months field.
func ByEstimatedDurationMonths(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedDurationMonths, opts...).ToFunc()
}

// ByRequiredResources orders the results by the required_resources field.
func ByRequiredResources(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiredResources, opts...).ToFunc()
}

// ByCollaborationNeeded orders the results by the collaboration_needed field.
func ByCollaborationNeeded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollaborationNeeded, opts...).ToFunc()
}

// ByFundingRequired orders the results by the funding_required field.
func ByFundingRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFundingRequired, opts...).ToFunc()
}

// ByEstimatedBudget orders the results by the estimated_budget field.
func ByEstimatedBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedBudget, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIdeaField orders the results by idea field.
func ByIdeaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdeaStep(), sql.OrderByField(field, opts...))
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIdeaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdeaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, IdeaTable, IdeaColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
