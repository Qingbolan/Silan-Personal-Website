// Code generated by ent, DO NOT EDIT.

package ideadetail

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldID, id))
}

// IdeaID applies equality check predicate on the "idea_id" field. It's identical to IdeaIDEQ.
func IdeaID(v uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldIdeaID, v))
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldProgress, v))
}

// Results applies equality check predicate on the "results" field. It's identical to ResultsEQ.
func Results(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldResults, v))
}

// References applies equality check predicate on the "references" field. It's identical to ReferencesEQ.
func References(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldReferences, v))
}

// EstimatedDurationMonths applies equality check predicate on the "estimated_duration_months" field. It's identical to EstimatedDurationMonthsEQ.
func EstimatedDurationMonths(v int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldEstimatedDurationMonths, v))
}

// RequiredResources applies equality check predicate on the "required_resources" field. It's identical to RequiredResourcesEQ.
func RequiredResources(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldRequiredResources, v))
}

// CollaborationNeeded applies equality check predicate on the "collaboration_needed" field. It's identical to CollaborationNeededEQ.
func CollaborationNeeded(v bool) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldCollaborationNeeded, v))
}

// FundingRequired applies equality check predicate on the "funding_required" field. It's identical to FundingRequiredEQ.
func FundingRequired(v bool) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldFundingRequired, v))
}

// EstimatedBudget applies equality check predicate on the "estimated_budget" field. It's identical to EstimatedBudgetEQ.
func EstimatedBudget(v float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldEstimatedBudget, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// IdeaIDEQ applies the EQ predicate on the "idea_id" field.
func IdeaIDEQ(v uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldIdeaID, v))
}

// IdeaIDNEQ applies the NEQ predicate on the "idea_id" field.
func IdeaIDNEQ(v uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldIdeaID, v))
}

// IdeaIDIn applies the In predicate on the "idea_id" field.
func IdeaIDIn(vs ...uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldIdeaID, vs...))
}

// IdeaIDNotIn applies the NotIn predicate on the "idea_id" field.
func IdeaIDNotIn(vs ...uuid.UUID) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldIdeaID, vs...))
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldProgress, v))
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldProgress, v))
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldProgress, vs...))
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldProgress, vs...))
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldProgress, v))
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldProgress, v))
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldProgress, v))
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldProgress, v))
}

// ProgressContains applies the Contains predicate on the "progress" field.
func ProgressContains(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContains(FieldProgress, v))
}

// ProgressHasPrefix applies the HasPrefix predicate on the "progress" field.
func ProgressHasPrefix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasPrefix(FieldProgress, v))
}

// ProgressHasSuffix applies the HasSuffix predicate on the "progress" field.
func ProgressHasSuffix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasSuffix(FieldProgress, v))
}

// ProgressIsNil applies the IsNil predicate on the "progress" field.
func ProgressIsNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIsNull(FieldProgress))
}

// ProgressNotNil applies the NotNil predicate on the "progress" field.
func ProgressNotNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotNull(FieldProgress))
}

// ProgressEqualFold applies the EqualFold predicate on the "progress" field.
func ProgressEqualFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEqualFold(FieldProgress, v))
}

// ProgressContainsFold applies the ContainsFold predicate on the "progress" field.
func ProgressContainsFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContainsFold(FieldProgress, v))
}

// ResultsEQ applies the EQ predicate on the "results" field.
func ResultsEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldResults, v))
}

// ResultsNEQ applies the NEQ predicate on the "results" field.
func ResultsNEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldResults, v))
}

// ResultsIn applies the In predicate on the "results" field.
func ResultsIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldResults, vs...))
}

// ResultsNotIn applies the NotIn predicate on the "results" field.
func ResultsNotIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldResults, vs...))
}

// ResultsGT applies the GT predicate on the "results" field.
func ResultsGT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldResults, v))
}

// ResultsGTE applies the GTE predicate on the "results" field.
func ResultsGTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldResults, v))
}

// ResultsLT applies the LT predicate on the "results" field.
func ResultsLT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldResults, v))
}

// ResultsLTE applies the LTE predicate on the "results" field.
func ResultsLTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldResults, v))
}

// ResultsContains applies the Contains predicate on the "results" field.
func ResultsContains(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContains(FieldResults, v))
}

// ResultsHasPrefix applies the HasPrefix predicate on the "results" field.
func ResultsHasPrefix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasPrefix(FieldResults, v))
}

// ResultsHasSuffix applies the HasSuffix predicate on the "results" field.
func ResultsHasSuffix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasSuffix(FieldResults, v))
}

// ResultsIsNil applies the IsNil predicate on the "results" field.
func ResultsIsNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIsNull(FieldResults))
}

// ResultsNotNil applies the NotNil predicate on the "results" field.
func ResultsNotNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotNull(FieldResults))
}

// ResultsEqualFold applies the EqualFold predicate on the "results" field.
func ResultsEqualFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEqualFold(FieldResults, v))
}

// ResultsContainsFold applies the ContainsFold predicate on the "results" field.
func ResultsContainsFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContainsFold(FieldResults, v))
}

// ReferencesEQ applies the EQ predicate on the "references" field.
func ReferencesEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldReferences, v))
}

// ReferencesNEQ applies the NEQ predicate on the "references" field.
func ReferencesNEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldReferences, v))
}

// ReferencesIn applies the In predicate on the "references" field.
func ReferencesIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldReferences, vs...))
}

// ReferencesNotIn applies the NotIn predicate on the "references" field.
func ReferencesNotIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldReferences, vs...))
}

// ReferencesGT applies the GT predicate on the "references" field.
func ReferencesGT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldReferences, v))
}

// ReferencesGTE applies the GTE predicate on the "references" field.
func ReferencesGTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldReferences, v))
}

// ReferencesLT applies the LT predicate on the "references" field.
func ReferencesLT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldReferences, v))
}

// ReferencesLTE applies the LTE predicate on the "references" field.
func ReferencesLTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldReferences, v))
}

// ReferencesContains applies the Contains predicate on the "references" field.
func ReferencesContains(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContains(FieldReferences, v))
}

// ReferencesHasPrefix applies the HasPrefix predicate on the "references" field.
func ReferencesHasPrefix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasPrefix(FieldReferences, v))
}

// ReferencesHasSuffix applies the HasSuffix predicate on the "references" field.
func ReferencesHasSuffix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasSuffix(FieldReferences, v))
}

// ReferencesIsNil applies the IsNil predicate on the "references" field.
func ReferencesIsNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIsNull(FieldReferences))
}

// ReferencesNotNil applies the NotNil predicate on the "references" field.
func ReferencesNotNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotNull(FieldReferences))
}

// ReferencesEqualFold applies the EqualFold predicate on the "references" field.
func ReferencesEqualFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEqualFold(FieldReferences, v))
}

// ReferencesContainsFold applies the ContainsFold predicate on the "references" field.
func ReferencesContainsFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContainsFold(FieldReferences, v))
}

// EstimatedDurationMonthsEQ applies the EQ predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsEQ(v int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldEstimatedDurationMonths, v))
}

// EstimatedDurationMonthsNEQ applies the NEQ predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsNEQ(v int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldEstimatedDurationMonths, v))
}

// EstimatedDurationMonthsIn applies the In predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsIn(vs ...int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldEstimatedDurationMonths, vs...))
}

// EstimatedDurationMonthsNotIn applies the NotIn predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsNotIn(vs ...int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldEstimatedDurationMonths, vs...))
}

// EstimatedDurationMonthsGT applies the GT predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsGT(v int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldEstimatedDurationMonths, v))
}

// EstimatedDurationMonthsGTE applies the GTE predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsGTE(v int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldEstimatedDurationMonths, v))
}

// EstimatedDurationMonthsLT applies the LT predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsLT(v int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldEstimatedDurationMonths, v))
}

// EstimatedDurationMonthsLTE applies the LTE predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsLTE(v int) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldEstimatedDurationMonths, v))
}

// EstimatedDurationMonthsIsNil applies the IsNil predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsIsNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIsNull(FieldEstimatedDurationMonths))
}

// EstimatedDurationMonthsNotNil applies the NotNil predicate on the "estimated_duration_months" field.
func EstimatedDurationMonthsNotNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotNull(FieldEstimatedDurationMonths))
}

// RequiredResourcesEQ applies the EQ predicate on the "required_resources" field.
func RequiredResourcesEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldRequiredResources, v))
}

// RequiredResourcesNEQ applies the NEQ predicate on the "required_resources" field.
func RequiredResourcesNEQ(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldRequiredResources, v))
}

// RequiredResourcesIn applies the In predicate on the "required_resources" field.
func RequiredResourcesIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldRequiredResources, vs...))
}

// RequiredResourcesNotIn applies the NotIn predicate on the "required_resources" field.
func RequiredResourcesNotIn(vs ...string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldRequiredResources, vs...))
}

// RequiredResourcesGT applies the GT predicate on the "required_resources" field.
func RequiredResourcesGT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldRequiredResources, v))
}

// RequiredResourcesGTE applies the GTE predicate on the "required_resources" field.
func RequiredResourcesGTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldRequiredResources, v))
}

// RequiredResourcesLT applies the LT predicate on the "required_resources" field.
func RequiredResourcesLT(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldRequiredResources, v))
}

// RequiredResourcesLTE applies the LTE predicate on the "required_resources" field.
func RequiredResourcesLTE(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldRequiredResources, v))
}

// RequiredResourcesContains applies the Contains predicate on the "required_resources" field.
func RequiredResourcesContains(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContains(FieldRequiredResources, v))
}

// RequiredResourcesHasPrefix applies the HasPrefix predicate on the "required_resources" field.
func RequiredResourcesHasPrefix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasPrefix(FieldRequiredResources, v))
}

// RequiredResourcesHasSuffix applies the HasSuffix predicate on the "required_resources" field.
func RequiredResourcesHasSuffix(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldHasSuffix(FieldRequiredResources, v))
}

// RequiredResourcesIsNil applies the IsNil predicate on the "required_resources" field.
func RequiredResourcesIsNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIsNull(FieldRequiredResources))
}

// RequiredResourcesNotNil applies the NotNil predicate on the "required_resources" field.
func RequiredResourcesNotNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotNull(FieldRequiredResources))
}

// RequiredResourcesEqualFold applies the EqualFold predicate on the "required_resources" field.
func RequiredResourcesEqualFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEqualFold(FieldRequiredResources, v))
}

// RequiredResourcesContainsFold applies the ContainsFold predicate on the "required_resources" field.
func RequiredResourcesContainsFold(v string) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldContainsFold(FieldRequiredResources, v))
}

// CollaborationNeededEQ applies the EQ predicate on the "collaboration_needed" field.
func CollaborationNeededEQ(v bool) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldCollaborationNeeded, v))
}

// CollaborationNeededNEQ applies the NEQ predicate on the "collaboration_needed" field.
func CollaborationNeededNEQ(v bool) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldCollaborationNeeded, v))
}

// FundingRequiredEQ applies the EQ predicate on the "funding_required" field.
func FundingRequiredEQ(v bool) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldFundingRequired, v))
}

// FundingRequiredNEQ applies the NEQ predicate on the "funding_required" field.
func FundingRequiredNEQ(v bool) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldFundingRequired, v))
}

// EstimatedBudgetEQ applies the EQ predicate on the "estimated_budget" field.
func EstimatedBudgetEQ(v float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldEstimatedBudget, v))
}

// EstimatedBudgetNEQ applies the NEQ predicate on the "estimated_budget" field.
func EstimatedBudgetNEQ(v float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldEstimatedBudget, v))
}

// EstimatedBudgetIn applies the In predicate on the "estimated_budget" field.
func EstimatedBudgetIn(vs ...float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldEstimatedBudget, vs...))
}

// EstimatedBudgetNotIn applies the NotIn predicate on the "estimated_budget" field.
func EstimatedBudgetNotIn(vs ...float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldEstimatedBudget, vs...))
}

// EstimatedBudgetGT applies the GT predicate on the "estimated_budget" field.
func EstimatedBudgetGT(v float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldEstimatedBudget, v))
}

// EstimatedBudgetGTE applies the GTE predicate on the "estimated_budget" field.
func EstimatedBudgetGTE(v float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldEstimatedBudget, v))
}

// EstimatedBudgetLT applies the LT predicate on the "estimated_budget" field.
func EstimatedBudgetLT(v float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldEstimatedBudget, v))
}

// EstimatedBudgetLTE applies the LTE predicate on the "estimated_budget" field.
func EstimatedBudgetLTE(v float64) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldEstimatedBudget, v))
}

// EstimatedBudgetIsNil applies the IsNil predicate on the "estimated_budget" field.
func EstimatedBudgetIsNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIsNull(FieldEstimatedBudget))
}

// EstimatedBudgetNotNil applies the NotNil predicate on the "estimated_budget" field.
func EstimatedBudgetNotNil() predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotNull(FieldEstimatedBudget))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasIdea applies the HasEdge predicate on the "idea" edge.
func HasIdea() predicate.IdeaDetail {
	return predicate.IdeaDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, IdeaTable, IdeaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdeaWith applies the HasEdge predicate on the "idea" edge with a given conditions (other predicates).
func HasIdeaWith(preds ...predicate.Idea) predicate.IdeaDetail {
	return predicate.IdeaDetail(func(s *sql.Selector) {
		step := newIdeaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.IdeaDetail {
	return predicate.IdeaDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.IdeaDetailTranslation) predicate.IdeaDetail {
	return predicate.IdeaDetail(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IdeaDetail) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IdeaDetail) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IdeaDetail) predicate.IdeaDetail {
	return predicate.IdeaDetail(sql.NotPredicates(p))
}
