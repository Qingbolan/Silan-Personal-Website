// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/ideadetailtranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaDetailTranslationUpdate is the builder for updating IdeaDetailTranslation entities.
type IdeaDetailTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *IdeaDetailTranslationMutation
}

// Where appends a list predicates to the IdeaDetailTranslationUpdate builder.
func (idtu *IdeaDetailTranslationUpdate) Where(ps ...predicate.IdeaDetailTranslation) *IdeaDetailTranslationUpdate {
	idtu.mutation.Where(ps...)
	return idtu
}

// SetIdeaDetailID sets the "idea_detail_id" field.
func (idtu *IdeaDetailTranslationUpdate) SetIdeaDetailID(u uuid.UUID) *IdeaDetailTranslationUpdate {
	idtu.mutation.SetIdeaDetailID(u)
	return idtu
}

// SetNillableIdeaDetailID sets the "idea_detail_id" field if the given value is not nil.
func (idtu *IdeaDetailTranslationUpdate) SetNillableIdeaDetailID(u *uuid.UUID) *IdeaDetailTranslationUpdate {
	if u != nil {
		idtu.SetIdeaDetailID(*u)
	}
	return idtu
}

// SetLanguageCode sets the "language_code" field.
func (idtu *IdeaDetailTranslationUpdate) SetLanguageCode(s string) *IdeaDetailTranslationUpdate {
	idtu.mutation.SetLanguageCode(s)
	return idtu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (idtu *IdeaDetailTranslationUpdate) SetNillableLanguageCode(s *string) *IdeaDetailTranslationUpdate {
	if s != nil {
		idtu.SetLanguageCode(*s)
	}
	return idtu
}

// SetProgress sets the "progress" field.
func (idtu *IdeaDetailTranslationUpdate) SetProgress(s string) *IdeaDetailTranslationUpdate {
	idtu.mutation.SetProgress(s)
	return idtu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (idtu *IdeaDetailTranslationUpdate) SetNillableProgress(s *string) *IdeaDetailTranslationUpdate {
	if s != nil {
		idtu.SetProgress(*s)
	}
	return idtu
}

// ClearProgress clears the value of the "progress" field.
func (idtu *IdeaDetailTranslationUpdate) ClearProgress() *IdeaDetailTranslationUpdate {
	idtu.mutation.ClearProgress()
	return idtu
}

// SetResults sets the "results" field.
func (idtu *IdeaDetailTranslationUpdate) SetResults(s string) *IdeaDetailTranslationUpdate {
	idtu.mutation.SetResults(s)
	return idtu
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (idtu *IdeaDetailTranslationUpdate) SetNillableResults(s *string) *IdeaDetailTranslationUpdate {
	if s != nil {
		idtu.SetResults(*s)
	}
	return idtu
}

// ClearResults clears the value of the "results" field.
func (idtu *IdeaDetailTranslationUpdate) ClearResults() *IdeaDetailTranslationUpdate {
	idtu.mutation.ClearResults()
	return idtu
}

// SetReferences sets the "references" field.
func (idtu *IdeaDetailTranslationUpdate) SetReferences(s string) *IdeaDetailTranslationUpdate {
	idtu.mutation.SetReferences(s)
	return idtu
}

// SetNillableReferences sets the "references" field if the given value is not nil.
func (idtu *IdeaDetailTranslationUpdate) SetNillableReferences(s *string) *IdeaDetailTranslationUpdate {
	if s != nil {
		idtu.SetReferences(*s)
	}
	return idtu
}

// ClearReferences clears the value of the "references" field.
func (idtu *IdeaDetailTranslationUpdate) ClearReferences() *IdeaDetailTranslationUpdate {
	idtu.mutation.ClearReferences()
	return idtu
}

// SetRequiredResources sets the "required_resources" field.
func (idtu *IdeaDetailTranslationUpdate) SetRequiredResources(s string) *IdeaDetailTranslationUpdate {
	idtu.mutation.SetRequiredResources(s)
	return idtu
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (idtu *IdeaDetailTranslationUpdate) SetNillableRequiredResources(s *string) *IdeaDetailTranslationUpdate {
	if s != nil {
		idtu.SetRequiredResources(*s)
	}
	return idtu
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (idtu *IdeaDetailTranslationUpdate) ClearRequiredResources() *IdeaDetailTranslationUpdate {
	idtu.mutation.ClearRequiredResources()
	return idtu
}

// SetIdeaDetail sets the "idea_detail" edge to the IdeaDetail entity.
func (idtu *IdeaDetailTranslationUpdate) SetIdeaDetail(i *IdeaDetail) *IdeaDetailTranslationUpdate {
	return idtu.SetIdeaDetailID(i.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (idtu *IdeaDetailTranslationUpdate) SetLanguageID(id string) *IdeaDetailTranslationUpdate {
	idtu.mutation.SetLanguageID(id)
	return idtu
}

// SetLanguage sets the "language" edge to the Language entity.
func (idtu *IdeaDetailTranslationUpdate) SetLanguage(l *Language) *IdeaDetailTranslationUpdate {
	return idtu.SetLanguageID(l.ID)
}

// Mutation returns the IdeaDetailTranslationMutation object of the builder.
func (idtu *IdeaDetailTranslationUpdate) Mutation() *IdeaDetailTranslationMutation {
	return idtu.mutation
}

// ClearIdeaDetail clears the "idea_detail" edge to the IdeaDetail entity.
func (idtu *IdeaDetailTranslationUpdate) ClearIdeaDetail() *IdeaDetailTranslationUpdate {
	idtu.mutation.ClearIdeaDetail()
	return idtu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (idtu *IdeaDetailTranslationUpdate) ClearLanguage() *IdeaDetailTranslationUpdate {
	idtu.mutation.ClearLanguage()
	return idtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idtu *IdeaDetailTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, idtu.sqlSave, idtu.mutation, idtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idtu *IdeaDetailTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := idtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idtu *IdeaDetailTranslationUpdate) Exec(ctx context.Context) error {
	_, err := idtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idtu *IdeaDetailTranslationUpdate) ExecX(ctx context.Context) {
	if err := idtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idtu *IdeaDetailTranslationUpdate) check() error {
	if v, ok := idtu.mutation.LanguageCode(); ok {
		if err := ideadetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "IdeaDetailTranslation.language_code": %w`, err)}
		}
	}
	if idtu.mutation.IdeaDetailCleared() && len(idtu.mutation.IdeaDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaDetailTranslation.idea_detail"`)
	}
	if idtu.mutation.LanguageCleared() && len(idtu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaDetailTranslation.language"`)
	}
	return nil
}

func (idtu *IdeaDetailTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideadetailtranslation.Table, ideadetailtranslation.Columns, sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID))
	if ps := idtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idtu.mutation.Progress(); ok {
		_spec.SetField(ideadetailtranslation.FieldProgress, field.TypeString, value)
	}
	if idtu.mutation.ProgressCleared() {
		_spec.ClearField(ideadetailtranslation.FieldProgress, field.TypeString)
	}
	if value, ok := idtu.mutation.Results(); ok {
		_spec.SetField(ideadetailtranslation.FieldResults, field.TypeString, value)
	}
	if idtu.mutation.ResultsCleared() {
		_spec.ClearField(ideadetailtranslation.FieldResults, field.TypeString)
	}
	if value, ok := idtu.mutation.References(); ok {
		_spec.SetField(ideadetailtranslation.FieldReferences, field.TypeString, value)
	}
	if idtu.mutation.ReferencesCleared() {
		_spec.ClearField(ideadetailtranslation.FieldReferences, field.TypeString)
	}
	if value, ok := idtu.mutation.RequiredResources(); ok {
		_spec.SetField(ideadetailtranslation.FieldRequiredResources, field.TypeString, value)
	}
	if idtu.mutation.RequiredResourcesCleared() {
		_spec.ClearField(ideadetailtranslation.FieldRequiredResources, field.TypeString)
	}
	if idtu.mutation.IdeaDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.IdeaDetailTable,
			Columns: []string{ideadetailtranslation.IdeaDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idtu.mutation.IdeaDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.IdeaDetailTable,
			Columns: []string{ideadetailtranslation.IdeaDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idtu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.LanguageTable,
			Columns: []string{ideadetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idtu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.LanguageTable,
			Columns: []string{ideadetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, idtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideadetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idtu.mutation.done = true
	return n, nil
}

// IdeaDetailTranslationUpdateOne is the builder for updating a single IdeaDetailTranslation entity.
type IdeaDetailTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdeaDetailTranslationMutation
}

// SetIdeaDetailID sets the "idea_detail_id" field.
func (idtuo *IdeaDetailTranslationUpdateOne) SetIdeaDetailID(u uuid.UUID) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.SetIdeaDetailID(u)
	return idtuo
}

// SetNillableIdeaDetailID sets the "idea_detail_id" field if the given value is not nil.
func (idtuo *IdeaDetailTranslationUpdateOne) SetNillableIdeaDetailID(u *uuid.UUID) *IdeaDetailTranslationUpdateOne {
	if u != nil {
		idtuo.SetIdeaDetailID(*u)
	}
	return idtuo
}

// SetLanguageCode sets the "language_code" field.
func (idtuo *IdeaDetailTranslationUpdateOne) SetLanguageCode(s string) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.SetLanguageCode(s)
	return idtuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (idtuo *IdeaDetailTranslationUpdateOne) SetNillableLanguageCode(s *string) *IdeaDetailTranslationUpdateOne {
	if s != nil {
		idtuo.SetLanguageCode(*s)
	}
	return idtuo
}

// SetProgress sets the "progress" field.
func (idtuo *IdeaDetailTranslationUpdateOne) SetProgress(s string) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.SetProgress(s)
	return idtuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (idtuo *IdeaDetailTranslationUpdateOne) SetNillableProgress(s *string) *IdeaDetailTranslationUpdateOne {
	if s != nil {
		idtuo.SetProgress(*s)
	}
	return idtuo
}

// ClearProgress clears the value of the "progress" field.
func (idtuo *IdeaDetailTranslationUpdateOne) ClearProgress() *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.ClearProgress()
	return idtuo
}

// SetResults sets the "results" field.
func (idtuo *IdeaDetailTranslationUpdateOne) SetResults(s string) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.SetResults(s)
	return idtuo
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (idtuo *IdeaDetailTranslationUpdateOne) SetNillableResults(s *string) *IdeaDetailTranslationUpdateOne {
	if s != nil {
		idtuo.SetResults(*s)
	}
	return idtuo
}

// ClearResults clears the value of the "results" field.
func (idtuo *IdeaDetailTranslationUpdateOne) ClearResults() *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.ClearResults()
	return idtuo
}

// SetReferences sets the "references" field.
func (idtuo *IdeaDetailTranslationUpdateOne) SetReferences(s string) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.SetReferences(s)
	return idtuo
}

// SetNillableReferences sets the "references" field if the given value is not nil.
func (idtuo *IdeaDetailTranslationUpdateOne) SetNillableReferences(s *string) *IdeaDetailTranslationUpdateOne {
	if s != nil {
		idtuo.SetReferences(*s)
	}
	return idtuo
}

// ClearReferences clears the value of the "references" field.
func (idtuo *IdeaDetailTranslationUpdateOne) ClearReferences() *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.ClearReferences()
	return idtuo
}

// SetRequiredResources sets the "required_resources" field.
func (idtuo *IdeaDetailTranslationUpdateOne) SetRequiredResources(s string) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.SetRequiredResources(s)
	return idtuo
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (idtuo *IdeaDetailTranslationUpdateOne) SetNillableRequiredResources(s *string) *IdeaDetailTranslationUpdateOne {
	if s != nil {
		idtuo.SetRequiredResources(*s)
	}
	return idtuo
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (idtuo *IdeaDetailTranslationUpdateOne) ClearRequiredResources() *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.ClearRequiredResources()
	return idtuo
}

// SetIdeaDetail sets the "idea_detail" edge to the IdeaDetail entity.
func (idtuo *IdeaDetailTranslationUpdateOne) SetIdeaDetail(i *IdeaDetail) *IdeaDetailTranslationUpdateOne {
	return idtuo.SetIdeaDetailID(i.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (idtuo *IdeaDetailTranslationUpdateOne) SetLanguageID(id string) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.SetLanguageID(id)
	return idtuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (idtuo *IdeaDetailTranslationUpdateOne) SetLanguage(l *Language) *IdeaDetailTranslationUpdateOne {
	return idtuo.SetLanguageID(l.ID)
}

// Mutation returns the IdeaDetailTranslationMutation object of the builder.
func (idtuo *IdeaDetailTranslationUpdateOne) Mutation() *IdeaDetailTranslationMutation {
	return idtuo.mutation
}

// ClearIdeaDetail clears the "idea_detail" edge to the IdeaDetail entity.
func (idtuo *IdeaDetailTranslationUpdateOne) ClearIdeaDetail() *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.ClearIdeaDetail()
	return idtuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (idtuo *IdeaDetailTranslationUpdateOne) ClearLanguage() *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.ClearLanguage()
	return idtuo
}

// Where appends a list predicates to the IdeaDetailTranslationUpdate builder.
func (idtuo *IdeaDetailTranslationUpdateOne) Where(ps ...predicate.IdeaDetailTranslation) *IdeaDetailTranslationUpdateOne {
	idtuo.mutation.Where(ps...)
	return idtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (idtuo *IdeaDetailTranslationUpdateOne) Select(field string, fields ...string) *IdeaDetailTranslationUpdateOne {
	idtuo.fields = append([]string{field}, fields...)
	return idtuo
}

// Save executes the query and returns the updated IdeaDetailTranslation entity.
func (idtuo *IdeaDetailTranslationUpdateOne) Save(ctx context.Context) (*IdeaDetailTranslation, error) {
	return withHooks(ctx, idtuo.sqlSave, idtuo.mutation, idtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idtuo *IdeaDetailTranslationUpdateOne) SaveX(ctx context.Context) *IdeaDetailTranslation {
	node, err := idtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (idtuo *IdeaDetailTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := idtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idtuo *IdeaDetailTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := idtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idtuo *IdeaDetailTranslationUpdateOne) check() error {
	if v, ok := idtuo.mutation.LanguageCode(); ok {
		if err := ideadetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "IdeaDetailTranslation.language_code": %w`, err)}
		}
	}
	if idtuo.mutation.IdeaDetailCleared() && len(idtuo.mutation.IdeaDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaDetailTranslation.idea_detail"`)
	}
	if idtuo.mutation.LanguageCleared() && len(idtuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaDetailTranslation.language"`)
	}
	return nil
}

func (idtuo *IdeaDetailTranslationUpdateOne) sqlSave(ctx context.Context) (_node *IdeaDetailTranslation, err error) {
	if err := idtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideadetailtranslation.Table, ideadetailtranslation.Columns, sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID))
	id, ok := idtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdeaDetailTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := idtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ideadetailtranslation.FieldID)
		for _, f := range fields {
			if !ideadetailtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ideadetailtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := idtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idtuo.mutation.Progress(); ok {
		_spec.SetField(ideadetailtranslation.FieldProgress, field.TypeString, value)
	}
	if idtuo.mutation.ProgressCleared() {
		_spec.ClearField(ideadetailtranslation.FieldProgress, field.TypeString)
	}
	if value, ok := idtuo.mutation.Results(); ok {
		_spec.SetField(ideadetailtranslation.FieldResults, field.TypeString, value)
	}
	if idtuo.mutation.ResultsCleared() {
		_spec.ClearField(ideadetailtranslation.FieldResults, field.TypeString)
	}
	if value, ok := idtuo.mutation.References(); ok {
		_spec.SetField(ideadetailtranslation.FieldReferences, field.TypeString, value)
	}
	if idtuo.mutation.ReferencesCleared() {
		_spec.ClearField(ideadetailtranslation.FieldReferences, field.TypeString)
	}
	if value, ok := idtuo.mutation.RequiredResources(); ok {
		_spec.SetField(ideadetailtranslation.FieldRequiredResources, field.TypeString, value)
	}
	if idtuo.mutation.RequiredResourcesCleared() {
		_spec.ClearField(ideadetailtranslation.FieldRequiredResources, field.TypeString)
	}
	if idtuo.mutation.IdeaDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.IdeaDetailTable,
			Columns: []string{ideadetailtranslation.IdeaDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idtuo.mutation.IdeaDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.IdeaDetailTable,
			Columns: []string{ideadetailtranslation.IdeaDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if idtuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.LanguageTable,
			Columns: []string{ideadetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idtuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.LanguageTable,
			Columns: []string{ideadetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IdeaDetailTranslation{config: idtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, idtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideadetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	idtuo.mutation.done = true
	return _node, nil
}
