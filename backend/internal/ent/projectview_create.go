// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectview"
	"silan-backend/internal/ent/useridentity"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectViewCreate is the builder for creating a ProjectView entity.
type ProjectViewCreate struct {
	config
	mutation *ProjectViewMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (pvc *ProjectViewCreate) SetProjectID(u uuid.UUID) *ProjectViewCreate {
	pvc.mutation.SetProjectID(u)
	return pvc
}

// SetUserIdentityID sets the "user_identity_id" field.
func (pvc *ProjectViewCreate) SetUserIdentityID(s string) *ProjectViewCreate {
	pvc.mutation.SetUserIdentityID(s)
	return pvc
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableUserIdentityID(s *string) *ProjectViewCreate {
	if s != nil {
		pvc.SetUserIdentityID(*s)
	}
	return pvc
}

// SetFingerprint sets the "fingerprint" field.
func (pvc *ProjectViewCreate) SetFingerprint(s string) *ProjectViewCreate {
	pvc.mutation.SetFingerprint(s)
	return pvc
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableFingerprint(s *string) *ProjectViewCreate {
	if s != nil {
		pvc.SetFingerprint(*s)
	}
	return pvc
}

// SetIPAddress sets the "ip_address" field.
func (pvc *ProjectViewCreate) SetIPAddress(s string) *ProjectViewCreate {
	pvc.mutation.SetIPAddress(s)
	return pvc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableIPAddress(s *string) *ProjectViewCreate {
	if s != nil {
		pvc.SetIPAddress(*s)
	}
	return pvc
}

// SetUserAgent sets the "user_agent" field.
func (pvc *ProjectViewCreate) SetUserAgent(s string) *ProjectViewCreate {
	pvc.mutation.SetUserAgent(s)
	return pvc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableUserAgent(s *string) *ProjectViewCreate {
	if s != nil {
		pvc.SetUserAgent(*s)
	}
	return pvc
}

// SetReferrer sets the "referrer" field.
func (pvc *ProjectViewCreate) SetReferrer(s string) *ProjectViewCreate {
	pvc.mutation.SetReferrer(s)
	return pvc
}

// SetNillableReferrer sets the "referrer" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableReferrer(s *string) *ProjectViewCreate {
	if s != nil {
		pvc.SetReferrer(*s)
	}
	return pvc
}

// SetSessionDuration sets the "session_duration" field.
func (pvc *ProjectViewCreate) SetSessionDuration(i int) *ProjectViewCreate {
	pvc.mutation.SetSessionDuration(i)
	return pvc
}

// SetNillableSessionDuration sets the "session_duration" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableSessionDuration(i *int) *ProjectViewCreate {
	if i != nil {
		pvc.SetSessionDuration(*i)
	}
	return pvc
}

// SetCreatedAt sets the "created_at" field.
func (pvc *ProjectViewCreate) SetCreatedAt(t time.Time) *ProjectViewCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableCreatedAt(t *time.Time) *ProjectViewCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvc *ProjectViewCreate) SetUpdatedAt(t time.Time) *ProjectViewCreate {
	pvc.mutation.SetUpdatedAt(t)
	return pvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableUpdatedAt(t *time.Time) *ProjectViewCreate {
	if t != nil {
		pvc.SetUpdatedAt(*t)
	}
	return pvc
}

// SetID sets the "id" field.
func (pvc *ProjectViewCreate) SetID(u uuid.UUID) *ProjectViewCreate {
	pvc.mutation.SetID(u)
	return pvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pvc *ProjectViewCreate) SetNillableID(u *uuid.UUID) *ProjectViewCreate {
	if u != nil {
		pvc.SetID(*u)
	}
	return pvc
}

// SetProject sets the "project" edge to the Project entity.
func (pvc *ProjectViewCreate) SetProject(p *Project) *ProjectViewCreate {
	return pvc.SetProjectID(p.ID)
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (pvc *ProjectViewCreate) SetUserIdentity(u *UserIdentity) *ProjectViewCreate {
	return pvc.SetUserIdentityID(u.ID)
}

// Mutation returns the ProjectViewMutation object of the builder.
func (pvc *ProjectViewCreate) Mutation() *ProjectViewMutation {
	return pvc.mutation
}

// Save creates the ProjectView in the database.
func (pvc *ProjectViewCreate) Save(ctx context.Context) (*ProjectView, error) {
	pvc.defaults()
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *ProjectViewCreate) SaveX(ctx context.Context) *ProjectView {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *ProjectViewCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *ProjectViewCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *ProjectViewCreate) defaults() {
	if _, ok := pvc.mutation.SessionDuration(); !ok {
		v := projectview.DefaultSessionDuration
		pvc.mutation.SetSessionDuration(v)
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		v := projectview.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		v := projectview.DefaultUpdatedAt()
		pvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pvc.mutation.ID(); !ok {
		v := projectview.DefaultID()
		pvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *ProjectViewCreate) check() error {
	if _, ok := pvc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectView.project_id"`)}
	}
	if v, ok := pvc.mutation.IPAddress(); ok {
		if err := projectview.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ProjectView.ip_address": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectView.created_at"`)}
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectView.updated_at"`)}
	}
	if len(pvc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectView.project"`)}
	}
	return nil
}

func (pvc *ProjectViewCreate) sqlSave(ctx context.Context) (*ProjectView, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *ProjectViewCreate) createSpec() (*ProjectView, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectView{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(projectview.Table, sqlgraph.NewFieldSpec(projectview.FieldID, field.TypeUUID))
	)
	if id, ok := pvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pvc.mutation.Fingerprint(); ok {
		_spec.SetField(projectview.FieldFingerprint, field.TypeString, value)
		_node.Fingerprint = value
	}
	if value, ok := pvc.mutation.IPAddress(); ok {
		_spec.SetField(projectview.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := pvc.mutation.UserAgent(); ok {
		_spec.SetField(projectview.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := pvc.mutation.Referrer(); ok {
		_spec.SetField(projectview.FieldReferrer, field.TypeString, value)
		_node.Referrer = value
	}
	if value, ok := pvc.mutation.SessionDuration(); ok {
		_spec.SetField(projectview.FieldSessionDuration, field.TypeInt, value)
		_node.SessionDuration = value
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(projectview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectview.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pvc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectview.ProjectTable,
			Columns: []string{projectview.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectview.UserIdentityTable,
			Columns: []string{projectview.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserIdentityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectViewCreateBulk is the builder for creating many ProjectView entities in bulk.
type ProjectViewCreateBulk struct {
	config
	err      error
	builders []*ProjectViewCreate
}

// Save creates the ProjectView entities in the database.
func (pvcb *ProjectViewCreateBulk) Save(ctx context.Context) ([]*ProjectView, error) {
	if pvcb.err != nil {
		return nil, pvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*ProjectView, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectViewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *ProjectViewCreateBulk) SaveX(ctx context.Context) []*ProjectView {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *ProjectViewCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *ProjectViewCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
