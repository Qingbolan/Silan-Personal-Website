// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/ideadetailtranslation"
	"silan-backend/internal/ent/language"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaDetailTranslationCreate is the builder for creating a IdeaDetailTranslation entity.
type IdeaDetailTranslationCreate struct {
	config
	mutation *IdeaDetailTranslationMutation
	hooks    []Hook
}

// SetIdeaDetailID sets the "idea_detail_id" field.
func (idtc *IdeaDetailTranslationCreate) SetIdeaDetailID(u uuid.UUID) *IdeaDetailTranslationCreate {
	idtc.mutation.SetIdeaDetailID(u)
	return idtc
}

// SetLanguageCode sets the "language_code" field.
func (idtc *IdeaDetailTranslationCreate) SetLanguageCode(s string) *IdeaDetailTranslationCreate {
	idtc.mutation.SetLanguageCode(s)
	return idtc
}

// SetProgress sets the "progress" field.
func (idtc *IdeaDetailTranslationCreate) SetProgress(s string) *IdeaDetailTranslationCreate {
	idtc.mutation.SetProgress(s)
	return idtc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (idtc *IdeaDetailTranslationCreate) SetNillableProgress(s *string) *IdeaDetailTranslationCreate {
	if s != nil {
		idtc.SetProgress(*s)
	}
	return idtc
}

// SetResults sets the "results" field.
func (idtc *IdeaDetailTranslationCreate) SetResults(s string) *IdeaDetailTranslationCreate {
	idtc.mutation.SetResults(s)
	return idtc
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (idtc *IdeaDetailTranslationCreate) SetNillableResults(s *string) *IdeaDetailTranslationCreate {
	if s != nil {
		idtc.SetResults(*s)
	}
	return idtc
}

// SetReferences sets the "references" field.
func (idtc *IdeaDetailTranslationCreate) SetReferences(s string) *IdeaDetailTranslationCreate {
	idtc.mutation.SetReferences(s)
	return idtc
}

// SetNillableReferences sets the "references" field if the given value is not nil.
func (idtc *IdeaDetailTranslationCreate) SetNillableReferences(s *string) *IdeaDetailTranslationCreate {
	if s != nil {
		idtc.SetReferences(*s)
	}
	return idtc
}

// SetRequiredResources sets the "required_resources" field.
func (idtc *IdeaDetailTranslationCreate) SetRequiredResources(s string) *IdeaDetailTranslationCreate {
	idtc.mutation.SetRequiredResources(s)
	return idtc
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (idtc *IdeaDetailTranslationCreate) SetNillableRequiredResources(s *string) *IdeaDetailTranslationCreate {
	if s != nil {
		idtc.SetRequiredResources(*s)
	}
	return idtc
}

// SetCreatedAt sets the "created_at" field.
func (idtc *IdeaDetailTranslationCreate) SetCreatedAt(t time.Time) *IdeaDetailTranslationCreate {
	idtc.mutation.SetCreatedAt(t)
	return idtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (idtc *IdeaDetailTranslationCreate) SetNillableCreatedAt(t *time.Time) *IdeaDetailTranslationCreate {
	if t != nil {
		idtc.SetCreatedAt(*t)
	}
	return idtc
}

// SetID sets the "id" field.
func (idtc *IdeaDetailTranslationCreate) SetID(u uuid.UUID) *IdeaDetailTranslationCreate {
	idtc.mutation.SetID(u)
	return idtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (idtc *IdeaDetailTranslationCreate) SetNillableID(u *uuid.UUID) *IdeaDetailTranslationCreate {
	if u != nil {
		idtc.SetID(*u)
	}
	return idtc
}

// SetIdeaDetail sets the "idea_detail" edge to the IdeaDetail entity.
func (idtc *IdeaDetailTranslationCreate) SetIdeaDetail(i *IdeaDetail) *IdeaDetailTranslationCreate {
	return idtc.SetIdeaDetailID(i.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (idtc *IdeaDetailTranslationCreate) SetLanguageID(id string) *IdeaDetailTranslationCreate {
	idtc.mutation.SetLanguageID(id)
	return idtc
}

// SetLanguage sets the "language" edge to the Language entity.
func (idtc *IdeaDetailTranslationCreate) SetLanguage(l *Language) *IdeaDetailTranslationCreate {
	return idtc.SetLanguageID(l.ID)
}

// Mutation returns the IdeaDetailTranslationMutation object of the builder.
func (idtc *IdeaDetailTranslationCreate) Mutation() *IdeaDetailTranslationMutation {
	return idtc.mutation
}

// Save creates the IdeaDetailTranslation in the database.
func (idtc *IdeaDetailTranslationCreate) Save(ctx context.Context) (*IdeaDetailTranslation, error) {
	idtc.defaults()
	return withHooks(ctx, idtc.sqlSave, idtc.mutation, idtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idtc *IdeaDetailTranslationCreate) SaveX(ctx context.Context) *IdeaDetailTranslation {
	v, err := idtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idtc *IdeaDetailTranslationCreate) Exec(ctx context.Context) error {
	_, err := idtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idtc *IdeaDetailTranslationCreate) ExecX(ctx context.Context) {
	if err := idtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idtc *IdeaDetailTranslationCreate) defaults() {
	if _, ok := idtc.mutation.CreatedAt(); !ok {
		v := ideadetailtranslation.DefaultCreatedAt()
		idtc.mutation.SetCreatedAt(v)
	}
	if _, ok := idtc.mutation.ID(); !ok {
		v := ideadetailtranslation.DefaultID()
		idtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idtc *IdeaDetailTranslationCreate) check() error {
	if _, ok := idtc.mutation.IdeaDetailID(); !ok {
		return &ValidationError{Name: "idea_detail_id", err: errors.New(`ent: missing required field "IdeaDetailTranslation.idea_detail_id"`)}
	}
	if _, ok := idtc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "IdeaDetailTranslation.language_code"`)}
	}
	if v, ok := idtc.mutation.LanguageCode(); ok {
		if err := ideadetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "IdeaDetailTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := idtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IdeaDetailTranslation.created_at"`)}
	}
	if len(idtc.mutation.IdeaDetailIDs()) == 0 {
		return &ValidationError{Name: "idea_detail", err: errors.New(`ent: missing required edge "IdeaDetailTranslation.idea_detail"`)}
	}
	if len(idtc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "IdeaDetailTranslation.language"`)}
	}
	return nil
}

func (idtc *IdeaDetailTranslationCreate) sqlSave(ctx context.Context) (*IdeaDetailTranslation, error) {
	if err := idtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	idtc.mutation.id = &_node.ID
	idtc.mutation.done = true
	return _node, nil
}

func (idtc *IdeaDetailTranslationCreate) createSpec() (*IdeaDetailTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &IdeaDetailTranslation{config: idtc.config}
		_spec = sqlgraph.NewCreateSpec(ideadetailtranslation.Table, sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID))
	)
	if id, ok := idtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := idtc.mutation.Progress(); ok {
		_spec.SetField(ideadetailtranslation.FieldProgress, field.TypeString, value)
		_node.Progress = value
	}
	if value, ok := idtc.mutation.Results(); ok {
		_spec.SetField(ideadetailtranslation.FieldResults, field.TypeString, value)
		_node.Results = value
	}
	if value, ok := idtc.mutation.References(); ok {
		_spec.SetField(ideadetailtranslation.FieldReferences, field.TypeString, value)
		_node.References = value
	}
	if value, ok := idtc.mutation.RequiredResources(); ok {
		_spec.SetField(ideadetailtranslation.FieldRequiredResources, field.TypeString, value)
		_node.RequiredResources = value
	}
	if value, ok := idtc.mutation.CreatedAt(); ok {
		_spec.SetField(ideadetailtranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := idtc.mutation.IdeaDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.IdeaDetailTable,
			Columns: []string{ideadetailtranslation.IdeaDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IdeaDetailID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idtc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideadetailtranslation.LanguageTable,
			Columns: []string{ideadetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdeaDetailTranslationCreateBulk is the builder for creating many IdeaDetailTranslation entities in bulk.
type IdeaDetailTranslationCreateBulk struct {
	config
	err      error
	builders []*IdeaDetailTranslationCreate
}

// Save creates the IdeaDetailTranslation entities in the database.
func (idtcb *IdeaDetailTranslationCreateBulk) Save(ctx context.Context) ([]*IdeaDetailTranslation, error) {
	if idtcb.err != nil {
		return nil, idtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(idtcb.builders))
	nodes := make([]*IdeaDetailTranslation, len(idtcb.builders))
	mutators := make([]Mutator, len(idtcb.builders))
	for i := range idtcb.builders {
		func(i int, root context.Context) {
			builder := idtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdeaDetailTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idtcb *IdeaDetailTranslationCreateBulk) SaveX(ctx context.Context) []*IdeaDetailTranslation {
	v, err := idtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idtcb *IdeaDetailTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := idtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idtcb *IdeaDetailTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := idtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
