// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/comment"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/useridentity"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetEntityType sets the "entity_type" field.
func (cu *CommentUpdate) SetEntityType(s string) *CommentUpdate {
	cu.mutation.SetEntityType(s)
	return cu
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableEntityType(s *string) *CommentUpdate {
	if s != nil {
		cu.SetEntityType(*s)
	}
	return cu
}

// SetEntityID sets the "entity_id" field.
func (cu *CommentUpdate) SetEntityID(u uuid.UUID) *CommentUpdate {
	cu.mutation.SetEntityID(u)
	return cu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableEntityID(u *uuid.UUID) *CommentUpdate {
	if u != nil {
		cu.SetEntityID(*u)
	}
	return cu
}

// SetParentID sets the "parent_id" field.
func (cu *CommentUpdate) SetParentID(u uuid.UUID) *CommentUpdate {
	cu.mutation.SetParentID(u)
	return cu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableParentID(u *uuid.UUID) *CommentUpdate {
	if u != nil {
		cu.SetParentID(*u)
	}
	return cu
}

// ClearParentID clears the value of the "parent_id" field.
func (cu *CommentUpdate) ClearParentID() *CommentUpdate {
	cu.mutation.ClearParentID()
	return cu
}

// SetAuthorName sets the "author_name" field.
func (cu *CommentUpdate) SetAuthorName(s string) *CommentUpdate {
	cu.mutation.SetAuthorName(s)
	return cu
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAuthorName(s *string) *CommentUpdate {
	if s != nil {
		cu.SetAuthorName(*s)
	}
	return cu
}

// SetAuthorEmail sets the "author_email" field.
func (cu *CommentUpdate) SetAuthorEmail(s string) *CommentUpdate {
	cu.mutation.SetAuthorEmail(s)
	return cu
}

// SetNillableAuthorEmail sets the "author_email" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAuthorEmail(s *string) *CommentUpdate {
	if s != nil {
		cu.SetAuthorEmail(*s)
	}
	return cu
}

// SetAuthorWebsite sets the "author_website" field.
func (cu *CommentUpdate) SetAuthorWebsite(s string) *CommentUpdate {
	cu.mutation.SetAuthorWebsite(s)
	return cu
}

// SetNillableAuthorWebsite sets the "author_website" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAuthorWebsite(s *string) *CommentUpdate {
	if s != nil {
		cu.SetAuthorWebsite(*s)
	}
	return cu
}

// ClearAuthorWebsite clears the value of the "author_website" field.
func (cu *CommentUpdate) ClearAuthorWebsite() *CommentUpdate {
	cu.mutation.ClearAuthorWebsite()
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentUpdate) SetContent(s string) *CommentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableContent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CommentUpdate) SetType(s string) *CommentUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableType(s *string) *CommentUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetIsApproved sets the "is_approved" field.
func (cu *CommentUpdate) SetIsApproved(b bool) *CommentUpdate {
	cu.mutation.SetIsApproved(b)
	return cu
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIsApproved(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetIsApproved(*b)
	}
	return cu
}

// SetIPAddress sets the "ip_address" field.
func (cu *CommentUpdate) SetIPAddress(s string) *CommentUpdate {
	cu.mutation.SetIPAddress(s)
	return cu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIPAddress(s *string) *CommentUpdate {
	if s != nil {
		cu.SetIPAddress(*s)
	}
	return cu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (cu *CommentUpdate) ClearIPAddress() *CommentUpdate {
	cu.mutation.ClearIPAddress()
	return cu
}

// SetUserAgent sets the "user_agent" field.
func (cu *CommentUpdate) SetUserAgent(s string) *CommentUpdate {
	cu.mutation.SetUserAgent(s)
	return cu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserAgent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetUserAgent(*s)
	}
	return cu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (cu *CommentUpdate) ClearUserAgent() *CommentUpdate {
	cu.mutation.ClearUserAgent()
	return cu
}

// SetUserIdentityID sets the "user_identity_id" field.
func (cu *CommentUpdate) SetUserIdentityID(s string) *CommentUpdate {
	cu.mutation.SetUserIdentityID(s)
	return cu
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserIdentityID(s *string) *CommentUpdate {
	if s != nil {
		cu.SetUserIdentityID(*s)
	}
	return cu
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (cu *CommentUpdate) ClearUserIdentityID() *CommentUpdate {
	cu.mutation.ClearUserIdentityID()
	return cu
}

// SetLikesCount sets the "likes_count" field.
func (cu *CommentUpdate) SetLikesCount(i int) *CommentUpdate {
	cu.mutation.ResetLikesCount()
	cu.mutation.SetLikesCount(i)
	return cu
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableLikesCount(i *int) *CommentUpdate {
	if i != nil {
		cu.SetLikesCount(*i)
	}
	return cu
}

// AddLikesCount adds i to the "likes_count" field.
func (cu *CommentUpdate) AddLikesCount(i int) *CommentUpdate {
	cu.mutation.AddLikesCount(i)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentUpdate) SetUpdatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetParent sets the "parent" edge to the Comment entity.
func (cu *CommentUpdate) SetParent(c *Comment) *CommentUpdate {
	return cu.SetParentID(c.ID)
}

// AddReplyIDs adds the "replies" edge to the Comment entity by IDs.
func (cu *CommentUpdate) AddReplyIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.AddReplyIDs(ids...)
	return cu
}

// AddReplies adds the "replies" edges to the Comment entity.
func (cu *CommentUpdate) AddReplies(c ...*Comment) *CommentUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddReplyIDs(ids...)
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (cu *CommentUpdate) SetUserIdentity(u *UserIdentity) *CommentUpdate {
	return cu.SetUserIdentityID(u.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearParent clears the "parent" edge to the Comment entity.
func (cu *CommentUpdate) ClearParent() *CommentUpdate {
	cu.mutation.ClearParent()
	return cu
}

// ClearReplies clears all "replies" edges to the Comment entity.
func (cu *CommentUpdate) ClearReplies() *CommentUpdate {
	cu.mutation.ClearReplies()
	return cu
}

// RemoveReplyIDs removes the "replies" edge to Comment entities by IDs.
func (cu *CommentUpdate) RemoveReplyIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.RemoveReplyIDs(ids...)
	return cu
}

// RemoveReplies removes "replies" edges to Comment entities.
func (cu *CommentUpdate) RemoveReplies(c ...*Comment) *CommentUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveReplyIDs(ids...)
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (cu *CommentUpdate) ClearUserIdentity() *CommentUpdate {
	cu.mutation.ClearUserIdentity()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if v, ok := cu.mutation.AuthorName(); ok {
		if err := comment.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Comment.author_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.AuthorEmail(); ok {
		if err := comment.AuthorEmailValidator(v); err != nil {
			return &ValidationError{Name: "author_email", err: fmt.Errorf(`ent: validator failed for field "Comment.author_email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.AuthorWebsite(); ok {
		if err := comment.AuthorWebsiteValidator(v); err != nil {
			return &ValidationError{Name: "author_website", err: fmt.Errorf(`ent: validator failed for field "Comment.author_website": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := cu.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := cu.mutation.UserAgent(); ok {
		if err := comment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Comment.user_agent": %w`, err)}
		}
	}
	return nil
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.EntityType(); ok {
		_spec.SetField(comment.FieldEntityType, field.TypeString, value)
	}
	if value, ok := cu.mutation.EntityID(); ok {
		_spec.SetField(comment.FieldEntityID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.AuthorName(); ok {
		_spec.SetField(comment.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := cu.mutation.AuthorEmail(); ok {
		_spec.SetField(comment.FieldAuthorEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.AuthorWebsite(); ok {
		_spec.SetField(comment.FieldAuthorWebsite, field.TypeString, value)
	}
	if cu.mutation.AuthorWebsiteCleared() {
		_spec.ClearField(comment.FieldAuthorWebsite, field.TypeString)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(comment.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsApproved(); ok {
		_spec.SetField(comment.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := cu.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if cu.mutation.IPAddressCleared() {
		_spec.ClearField(comment.FieldIPAddress, field.TypeString)
	}
	if value, ok := cu.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if cu.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := cu.mutation.LikesCount(); ok {
		_spec.SetField(comment.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLikesCount(); ok {
		_spec.AddField(comment.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !cu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.UserIdentityTable,
			Columns: []string{comment.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.UserIdentityTable,
			Columns: []string{comment.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetEntityType sets the "entity_type" field.
func (cuo *CommentUpdateOne) SetEntityType(s string) *CommentUpdateOne {
	cuo.mutation.SetEntityType(s)
	return cuo
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableEntityType(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetEntityType(*s)
	}
	return cuo
}

// SetEntityID sets the "entity_id" field.
func (cuo *CommentUpdateOne) SetEntityID(u uuid.UUID) *CommentUpdateOne {
	cuo.mutation.SetEntityID(u)
	return cuo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableEntityID(u *uuid.UUID) *CommentUpdateOne {
	if u != nil {
		cuo.SetEntityID(*u)
	}
	return cuo
}

// SetParentID sets the "parent_id" field.
func (cuo *CommentUpdateOne) SetParentID(u uuid.UUID) *CommentUpdateOne {
	cuo.mutation.SetParentID(u)
	return cuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableParentID(u *uuid.UUID) *CommentUpdateOne {
	if u != nil {
		cuo.SetParentID(*u)
	}
	return cuo
}

// ClearParentID clears the value of the "parent_id" field.
func (cuo *CommentUpdateOne) ClearParentID() *CommentUpdateOne {
	cuo.mutation.ClearParentID()
	return cuo
}

// SetAuthorName sets the "author_name" field.
func (cuo *CommentUpdateOne) SetAuthorName(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthorName(s)
	return cuo
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAuthorName(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetAuthorName(*s)
	}
	return cuo
}

// SetAuthorEmail sets the "author_email" field.
func (cuo *CommentUpdateOne) SetAuthorEmail(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthorEmail(s)
	return cuo
}

// SetNillableAuthorEmail sets the "author_email" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAuthorEmail(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetAuthorEmail(*s)
	}
	return cuo
}

// SetAuthorWebsite sets the "author_website" field.
func (cuo *CommentUpdateOne) SetAuthorWebsite(s string) *CommentUpdateOne {
	cuo.mutation.SetAuthorWebsite(s)
	return cuo
}

// SetNillableAuthorWebsite sets the "author_website" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAuthorWebsite(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetAuthorWebsite(*s)
	}
	return cuo
}

// ClearAuthorWebsite clears the value of the "author_website" field.
func (cuo *CommentUpdateOne) ClearAuthorWebsite() *CommentUpdateOne {
	cuo.mutation.ClearAuthorWebsite()
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentUpdateOne) SetContent(s string) *CommentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableContent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CommentUpdateOne) SetType(s string) *CommentUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableType(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetIsApproved sets the "is_approved" field.
func (cuo *CommentUpdateOne) SetIsApproved(b bool) *CommentUpdateOne {
	cuo.mutation.SetIsApproved(b)
	return cuo
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIsApproved(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetIsApproved(*b)
	}
	return cuo
}

// SetIPAddress sets the "ip_address" field.
func (cuo *CommentUpdateOne) SetIPAddress(s string) *CommentUpdateOne {
	cuo.mutation.SetIPAddress(s)
	return cuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIPAddress(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetIPAddress(*s)
	}
	return cuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (cuo *CommentUpdateOne) ClearIPAddress() *CommentUpdateOne {
	cuo.mutation.ClearIPAddress()
	return cuo
}

// SetUserAgent sets the "user_agent" field.
func (cuo *CommentUpdateOne) SetUserAgent(s string) *CommentUpdateOne {
	cuo.mutation.SetUserAgent(s)
	return cuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserAgent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetUserAgent(*s)
	}
	return cuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (cuo *CommentUpdateOne) ClearUserAgent() *CommentUpdateOne {
	cuo.mutation.ClearUserAgent()
	return cuo
}

// SetUserIdentityID sets the "user_identity_id" field.
func (cuo *CommentUpdateOne) SetUserIdentityID(s string) *CommentUpdateOne {
	cuo.mutation.SetUserIdentityID(s)
	return cuo
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserIdentityID(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetUserIdentityID(*s)
	}
	return cuo
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (cuo *CommentUpdateOne) ClearUserIdentityID() *CommentUpdateOne {
	cuo.mutation.ClearUserIdentityID()
	return cuo
}

// SetLikesCount sets the "likes_count" field.
func (cuo *CommentUpdateOne) SetLikesCount(i int) *CommentUpdateOne {
	cuo.mutation.ResetLikesCount()
	cuo.mutation.SetLikesCount(i)
	return cuo
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableLikesCount(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetLikesCount(*i)
	}
	return cuo
}

// AddLikesCount adds i to the "likes_count" field.
func (cuo *CommentUpdateOne) AddLikesCount(i int) *CommentUpdateOne {
	cuo.mutation.AddLikesCount(i)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentUpdateOne) SetUpdatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetParent sets the "parent" edge to the Comment entity.
func (cuo *CommentUpdateOne) SetParent(c *Comment) *CommentUpdateOne {
	return cuo.SetParentID(c.ID)
}

// AddReplyIDs adds the "replies" edge to the Comment entity by IDs.
func (cuo *CommentUpdateOne) AddReplyIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.AddReplyIDs(ids...)
	return cuo
}

// AddReplies adds the "replies" edges to the Comment entity.
func (cuo *CommentUpdateOne) AddReplies(c ...*Comment) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddReplyIDs(ids...)
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (cuo *CommentUpdateOne) SetUserIdentity(u *UserIdentity) *CommentUpdateOne {
	return cuo.SetUserIdentityID(u.ID)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearParent clears the "parent" edge to the Comment entity.
func (cuo *CommentUpdateOne) ClearParent() *CommentUpdateOne {
	cuo.mutation.ClearParent()
	return cuo
}

// ClearReplies clears all "replies" edges to the Comment entity.
func (cuo *CommentUpdateOne) ClearReplies() *CommentUpdateOne {
	cuo.mutation.ClearReplies()
	return cuo
}

// RemoveReplyIDs removes the "replies" edge to Comment entities by IDs.
func (cuo *CommentUpdateOne) RemoveReplyIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.RemoveReplyIDs(ids...)
	return cuo
}

// RemoveReplies removes "replies" edges to Comment entities.
func (cuo *CommentUpdateOne) RemoveReplies(c ...*Comment) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveReplyIDs(ids...)
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (cuo *CommentUpdateOne) ClearUserIdentity() *CommentUpdateOne {
	cuo.mutation.ClearUserIdentity()
	return cuo
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if v, ok := cuo.mutation.AuthorName(); ok {
		if err := comment.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Comment.author_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.AuthorEmail(); ok {
		if err := comment.AuthorEmailValidator(v); err != nil {
			return &ValidationError{Name: "author_email", err: fmt.Errorf(`ent: validator failed for field "Comment.author_email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.AuthorWebsite(); ok {
		if err := comment.AuthorWebsiteValidator(v); err != nil {
			return &ValidationError{Name: "author_website", err: fmt.Errorf(`ent: validator failed for field "Comment.author_website": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.UserAgent(); ok {
		if err := comment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Comment.user_agent": %w`, err)}
		}
	}
	return nil
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.EntityType(); ok {
		_spec.SetField(comment.FieldEntityType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.EntityID(); ok {
		_spec.SetField(comment.FieldEntityID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.AuthorName(); ok {
		_spec.SetField(comment.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AuthorEmail(); ok {
		_spec.SetField(comment.FieldAuthorEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AuthorWebsite(); ok {
		_spec.SetField(comment.FieldAuthorWebsite, field.TypeString, value)
	}
	if cuo.mutation.AuthorWebsiteCleared() {
		_spec.ClearField(comment.FieldAuthorWebsite, field.TypeString)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(comment.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsApproved(); ok {
		_spec.SetField(comment.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if cuo.mutation.IPAddressCleared() {
		_spec.ClearField(comment.FieldIPAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if cuo.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := cuo.mutation.LikesCount(); ok {
		_spec.SetField(comment.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLikesCount(); ok {
		_spec.AddField(comment.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !cuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.UserIdentityTable,
			Columns: []string{comment.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   comment.UserIdentityTable,
			Columns: []string{comment.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
