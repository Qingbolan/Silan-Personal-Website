// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectlike"
	"silan-backend/internal/ent/useridentity"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectLikeUpdate is the builder for updating ProjectLike entities.
type ProjectLikeUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectLikeMutation
}

// Where appends a list predicates to the ProjectLikeUpdate builder.
func (plu *ProjectLikeUpdate) Where(ps ...predicate.ProjectLike) *ProjectLikeUpdate {
	plu.mutation.Where(ps...)
	return plu
}

// SetProjectID sets the "project_id" field.
func (plu *ProjectLikeUpdate) SetProjectID(u uuid.UUID) *ProjectLikeUpdate {
	plu.mutation.SetProjectID(u)
	return plu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (plu *ProjectLikeUpdate) SetNillableProjectID(u *uuid.UUID) *ProjectLikeUpdate {
	if u != nil {
		plu.SetProjectID(*u)
	}
	return plu
}

// SetUserIdentityID sets the "user_identity_id" field.
func (plu *ProjectLikeUpdate) SetUserIdentityID(s string) *ProjectLikeUpdate {
	plu.mutation.SetUserIdentityID(s)
	return plu
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (plu *ProjectLikeUpdate) SetNillableUserIdentityID(s *string) *ProjectLikeUpdate {
	if s != nil {
		plu.SetUserIdentityID(*s)
	}
	return plu
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (plu *ProjectLikeUpdate) ClearUserIdentityID() *ProjectLikeUpdate {
	plu.mutation.ClearUserIdentityID()
	return plu
}

// SetFingerprint sets the "fingerprint" field.
func (plu *ProjectLikeUpdate) SetFingerprint(s string) *ProjectLikeUpdate {
	plu.mutation.SetFingerprint(s)
	return plu
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (plu *ProjectLikeUpdate) SetNillableFingerprint(s *string) *ProjectLikeUpdate {
	if s != nil {
		plu.SetFingerprint(*s)
	}
	return plu
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (plu *ProjectLikeUpdate) ClearFingerprint() *ProjectLikeUpdate {
	plu.mutation.ClearFingerprint()
	return plu
}

// SetIPAddress sets the "ip_address" field.
func (plu *ProjectLikeUpdate) SetIPAddress(s string) *ProjectLikeUpdate {
	plu.mutation.SetIPAddress(s)
	return plu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (plu *ProjectLikeUpdate) SetNillableIPAddress(s *string) *ProjectLikeUpdate {
	if s != nil {
		plu.SetIPAddress(*s)
	}
	return plu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (plu *ProjectLikeUpdate) ClearIPAddress() *ProjectLikeUpdate {
	plu.mutation.ClearIPAddress()
	return plu
}

// SetUserAgent sets the "user_agent" field.
func (plu *ProjectLikeUpdate) SetUserAgent(s string) *ProjectLikeUpdate {
	plu.mutation.SetUserAgent(s)
	return plu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (plu *ProjectLikeUpdate) SetNillableUserAgent(s *string) *ProjectLikeUpdate {
	if s != nil {
		plu.SetUserAgent(*s)
	}
	return plu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (plu *ProjectLikeUpdate) ClearUserAgent() *ProjectLikeUpdate {
	plu.mutation.ClearUserAgent()
	return plu
}

// SetUpdatedAt sets the "updated_at" field.
func (plu *ProjectLikeUpdate) SetUpdatedAt(t time.Time) *ProjectLikeUpdate {
	plu.mutation.SetUpdatedAt(t)
	return plu
}

// SetProject sets the "project" edge to the Project entity.
func (plu *ProjectLikeUpdate) SetProject(p *Project) *ProjectLikeUpdate {
	return plu.SetProjectID(p.ID)
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (plu *ProjectLikeUpdate) SetUserIdentity(u *UserIdentity) *ProjectLikeUpdate {
	return plu.SetUserIdentityID(u.ID)
}

// Mutation returns the ProjectLikeMutation object of the builder.
func (plu *ProjectLikeUpdate) Mutation() *ProjectLikeMutation {
	return plu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (plu *ProjectLikeUpdate) ClearProject() *ProjectLikeUpdate {
	plu.mutation.ClearProject()
	return plu
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (plu *ProjectLikeUpdate) ClearUserIdentity() *ProjectLikeUpdate {
	plu.mutation.ClearUserIdentity()
	return plu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (plu *ProjectLikeUpdate) Save(ctx context.Context) (int, error) {
	plu.defaults()
	return withHooks(ctx, plu.sqlSave, plu.mutation, plu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (plu *ProjectLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := plu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (plu *ProjectLikeUpdate) Exec(ctx context.Context) error {
	_, err := plu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plu *ProjectLikeUpdate) ExecX(ctx context.Context) {
	if err := plu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plu *ProjectLikeUpdate) defaults() {
	if _, ok := plu.mutation.UpdatedAt(); !ok {
		v := projectlike.UpdateDefaultUpdatedAt()
		plu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plu *ProjectLikeUpdate) check() error {
	if v, ok := plu.mutation.IPAddress(); ok {
		if err := projectlike.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ProjectLike.ip_address": %w`, err)}
		}
	}
	if plu.mutation.ProjectCleared() && len(plu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectLike.project"`)
	}
	return nil
}

func (plu *ProjectLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := plu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectlike.Table, projectlike.Columns, sqlgraph.NewFieldSpec(projectlike.FieldID, field.TypeUUID))
	if ps := plu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plu.mutation.Fingerprint(); ok {
		_spec.SetField(projectlike.FieldFingerprint, field.TypeString, value)
	}
	if plu.mutation.FingerprintCleared() {
		_spec.ClearField(projectlike.FieldFingerprint, field.TypeString)
	}
	if value, ok := plu.mutation.IPAddress(); ok {
		_spec.SetField(projectlike.FieldIPAddress, field.TypeString, value)
	}
	if plu.mutation.IPAddressCleared() {
		_spec.ClearField(projectlike.FieldIPAddress, field.TypeString)
	}
	if value, ok := plu.mutation.UserAgent(); ok {
		_spec.SetField(projectlike.FieldUserAgent, field.TypeString, value)
	}
	if plu.mutation.UserAgentCleared() {
		_spec.ClearField(projectlike.FieldUserAgent, field.TypeString)
	}
	if value, ok := plu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectlike.FieldUpdatedAt, field.TypeTime, value)
	}
	if plu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlike.ProjectTable,
			Columns: []string{projectlike.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlike.ProjectTable,
			Columns: []string{projectlike.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if plu.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectlike.UserIdentityTable,
			Columns: []string{projectlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectlike.UserIdentityTable,
			Columns: []string{projectlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, plu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	plu.mutation.done = true
	return n, nil
}

// ProjectLikeUpdateOne is the builder for updating a single ProjectLike entity.
type ProjectLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectLikeMutation
}

// SetProjectID sets the "project_id" field.
func (pluo *ProjectLikeUpdateOne) SetProjectID(u uuid.UUID) *ProjectLikeUpdateOne {
	pluo.mutation.SetProjectID(u)
	return pluo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pluo *ProjectLikeUpdateOne) SetNillableProjectID(u *uuid.UUID) *ProjectLikeUpdateOne {
	if u != nil {
		pluo.SetProjectID(*u)
	}
	return pluo
}

// SetUserIdentityID sets the "user_identity_id" field.
func (pluo *ProjectLikeUpdateOne) SetUserIdentityID(s string) *ProjectLikeUpdateOne {
	pluo.mutation.SetUserIdentityID(s)
	return pluo
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (pluo *ProjectLikeUpdateOne) SetNillableUserIdentityID(s *string) *ProjectLikeUpdateOne {
	if s != nil {
		pluo.SetUserIdentityID(*s)
	}
	return pluo
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (pluo *ProjectLikeUpdateOne) ClearUserIdentityID() *ProjectLikeUpdateOne {
	pluo.mutation.ClearUserIdentityID()
	return pluo
}

// SetFingerprint sets the "fingerprint" field.
func (pluo *ProjectLikeUpdateOne) SetFingerprint(s string) *ProjectLikeUpdateOne {
	pluo.mutation.SetFingerprint(s)
	return pluo
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (pluo *ProjectLikeUpdateOne) SetNillableFingerprint(s *string) *ProjectLikeUpdateOne {
	if s != nil {
		pluo.SetFingerprint(*s)
	}
	return pluo
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (pluo *ProjectLikeUpdateOne) ClearFingerprint() *ProjectLikeUpdateOne {
	pluo.mutation.ClearFingerprint()
	return pluo
}

// SetIPAddress sets the "ip_address" field.
func (pluo *ProjectLikeUpdateOne) SetIPAddress(s string) *ProjectLikeUpdateOne {
	pluo.mutation.SetIPAddress(s)
	return pluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (pluo *ProjectLikeUpdateOne) SetNillableIPAddress(s *string) *ProjectLikeUpdateOne {
	if s != nil {
		pluo.SetIPAddress(*s)
	}
	return pluo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (pluo *ProjectLikeUpdateOne) ClearIPAddress() *ProjectLikeUpdateOne {
	pluo.mutation.ClearIPAddress()
	return pluo
}

// SetUserAgent sets the "user_agent" field.
func (pluo *ProjectLikeUpdateOne) SetUserAgent(s string) *ProjectLikeUpdateOne {
	pluo.mutation.SetUserAgent(s)
	return pluo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (pluo *ProjectLikeUpdateOne) SetNillableUserAgent(s *string) *ProjectLikeUpdateOne {
	if s != nil {
		pluo.SetUserAgent(*s)
	}
	return pluo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (pluo *ProjectLikeUpdateOne) ClearUserAgent() *ProjectLikeUpdateOne {
	pluo.mutation.ClearUserAgent()
	return pluo
}

// SetUpdatedAt sets the "updated_at" field.
func (pluo *ProjectLikeUpdateOne) SetUpdatedAt(t time.Time) *ProjectLikeUpdateOne {
	pluo.mutation.SetUpdatedAt(t)
	return pluo
}

// SetProject sets the "project" edge to the Project entity.
func (pluo *ProjectLikeUpdateOne) SetProject(p *Project) *ProjectLikeUpdateOne {
	return pluo.SetProjectID(p.ID)
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (pluo *ProjectLikeUpdateOne) SetUserIdentity(u *UserIdentity) *ProjectLikeUpdateOne {
	return pluo.SetUserIdentityID(u.ID)
}

// Mutation returns the ProjectLikeMutation object of the builder.
func (pluo *ProjectLikeUpdateOne) Mutation() *ProjectLikeMutation {
	return pluo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pluo *ProjectLikeUpdateOne) ClearProject() *ProjectLikeUpdateOne {
	pluo.mutation.ClearProject()
	return pluo
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (pluo *ProjectLikeUpdateOne) ClearUserIdentity() *ProjectLikeUpdateOne {
	pluo.mutation.ClearUserIdentity()
	return pluo
}

// Where appends a list predicates to the ProjectLikeUpdate builder.
func (pluo *ProjectLikeUpdateOne) Where(ps ...predicate.ProjectLike) *ProjectLikeUpdateOne {
	pluo.mutation.Where(ps...)
	return pluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pluo *ProjectLikeUpdateOne) Select(field string, fields ...string) *ProjectLikeUpdateOne {
	pluo.fields = append([]string{field}, fields...)
	return pluo
}

// Save executes the query and returns the updated ProjectLike entity.
func (pluo *ProjectLikeUpdateOne) Save(ctx context.Context) (*ProjectLike, error) {
	pluo.defaults()
	return withHooks(ctx, pluo.sqlSave, pluo.mutation, pluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pluo *ProjectLikeUpdateOne) SaveX(ctx context.Context) *ProjectLike {
	node, err := pluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pluo *ProjectLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := pluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pluo *ProjectLikeUpdateOne) ExecX(ctx context.Context) {
	if err := pluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pluo *ProjectLikeUpdateOne) defaults() {
	if _, ok := pluo.mutation.UpdatedAt(); !ok {
		v := projectlike.UpdateDefaultUpdatedAt()
		pluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pluo *ProjectLikeUpdateOne) check() error {
	if v, ok := pluo.mutation.IPAddress(); ok {
		if err := projectlike.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ProjectLike.ip_address": %w`, err)}
		}
	}
	if pluo.mutation.ProjectCleared() && len(pluo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectLike.project"`)
	}
	return nil
}

func (pluo *ProjectLikeUpdateOne) sqlSave(ctx context.Context) (_node *ProjectLike, err error) {
	if err := pluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectlike.Table, projectlike.Columns, sqlgraph.NewFieldSpec(projectlike.FieldID, field.TypeUUID))
	id, ok := pluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectlike.FieldID)
		for _, f := range fields {
			if !projectlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pluo.mutation.Fingerprint(); ok {
		_spec.SetField(projectlike.FieldFingerprint, field.TypeString, value)
	}
	if pluo.mutation.FingerprintCleared() {
		_spec.ClearField(projectlike.FieldFingerprint, field.TypeString)
	}
	if value, ok := pluo.mutation.IPAddress(); ok {
		_spec.SetField(projectlike.FieldIPAddress, field.TypeString, value)
	}
	if pluo.mutation.IPAddressCleared() {
		_spec.ClearField(projectlike.FieldIPAddress, field.TypeString)
	}
	if value, ok := pluo.mutation.UserAgent(); ok {
		_spec.SetField(projectlike.FieldUserAgent, field.TypeString, value)
	}
	if pluo.mutation.UserAgentCleared() {
		_spec.ClearField(projectlike.FieldUserAgent, field.TypeString)
	}
	if value, ok := pluo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectlike.FieldUpdatedAt, field.TypeTime, value)
	}
	if pluo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlike.ProjectTable,
			Columns: []string{projectlike.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlike.ProjectTable,
			Columns: []string{projectlike.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pluo.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectlike.UserIdentityTable,
			Columns: []string{projectlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectlike.UserIdentityTable,
			Columns: []string{projectlike.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectLike{config: pluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pluo.mutation.done = true
	return _node, nil
}
