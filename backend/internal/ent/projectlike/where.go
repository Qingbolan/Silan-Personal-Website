// Code generated by ent, DO NOT EDIT.

package projectlike

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldProjectID, v))
}

// UserIdentityID applies equality check predicate on the "user_identity_id" field. It's identical to UserIdentityIDEQ.
func UserIdentityID(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldUserIdentityID, v))
}

// Fingerprint applies equality check predicate on the "fingerprint" field. It's identical to FingerprintEQ.
func Fingerprint(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldFingerprint, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldUserAgent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldProjectID, vs...))
}

// UserIdentityIDEQ applies the EQ predicate on the "user_identity_id" field.
func UserIdentityIDEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldUserIdentityID, v))
}

// UserIdentityIDNEQ applies the NEQ predicate on the "user_identity_id" field.
func UserIdentityIDNEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldUserIdentityID, v))
}

// UserIdentityIDIn applies the In predicate on the "user_identity_id" field.
func UserIdentityIDIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldUserIdentityID, vs...))
}

// UserIdentityIDNotIn applies the NotIn predicate on the "user_identity_id" field.
func UserIdentityIDNotIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldUserIdentityID, vs...))
}

// UserIdentityIDGT applies the GT predicate on the "user_identity_id" field.
func UserIdentityIDGT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGT(FieldUserIdentityID, v))
}

// UserIdentityIDGTE applies the GTE predicate on the "user_identity_id" field.
func UserIdentityIDGTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGTE(FieldUserIdentityID, v))
}

// UserIdentityIDLT applies the LT predicate on the "user_identity_id" field.
func UserIdentityIDLT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLT(FieldUserIdentityID, v))
}

// UserIdentityIDLTE applies the LTE predicate on the "user_identity_id" field.
func UserIdentityIDLTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLTE(FieldUserIdentityID, v))
}

// UserIdentityIDContains applies the Contains predicate on the "user_identity_id" field.
func UserIdentityIDContains(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContains(FieldUserIdentityID, v))
}

// UserIdentityIDHasPrefix applies the HasPrefix predicate on the "user_identity_id" field.
func UserIdentityIDHasPrefix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasPrefix(FieldUserIdentityID, v))
}

// UserIdentityIDHasSuffix applies the HasSuffix predicate on the "user_identity_id" field.
func UserIdentityIDHasSuffix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasSuffix(FieldUserIdentityID, v))
}

// UserIdentityIDIsNil applies the IsNil predicate on the "user_identity_id" field.
func UserIdentityIDIsNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIsNull(FieldUserIdentityID))
}

// UserIdentityIDNotNil applies the NotNil predicate on the "user_identity_id" field.
func UserIdentityIDNotNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotNull(FieldUserIdentityID))
}

// UserIdentityIDEqualFold applies the EqualFold predicate on the "user_identity_id" field.
func UserIdentityIDEqualFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEqualFold(FieldUserIdentityID, v))
}

// UserIdentityIDContainsFold applies the ContainsFold predicate on the "user_identity_id" field.
func UserIdentityIDContainsFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContainsFold(FieldUserIdentityID, v))
}

// FingerprintEQ applies the EQ predicate on the "fingerprint" field.
func FingerprintEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldFingerprint, v))
}

// FingerprintNEQ applies the NEQ predicate on the "fingerprint" field.
func FingerprintNEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldFingerprint, v))
}

// FingerprintIn applies the In predicate on the "fingerprint" field.
func FingerprintIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldFingerprint, vs...))
}

// FingerprintNotIn applies the NotIn predicate on the "fingerprint" field.
func FingerprintNotIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldFingerprint, vs...))
}

// FingerprintGT applies the GT predicate on the "fingerprint" field.
func FingerprintGT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGT(FieldFingerprint, v))
}

// FingerprintGTE applies the GTE predicate on the "fingerprint" field.
func FingerprintGTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGTE(FieldFingerprint, v))
}

// FingerprintLT applies the LT predicate on the "fingerprint" field.
func FingerprintLT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLT(FieldFingerprint, v))
}

// FingerprintLTE applies the LTE predicate on the "fingerprint" field.
func FingerprintLTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLTE(FieldFingerprint, v))
}

// FingerprintContains applies the Contains predicate on the "fingerprint" field.
func FingerprintContains(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContains(FieldFingerprint, v))
}

// FingerprintHasPrefix applies the HasPrefix predicate on the "fingerprint" field.
func FingerprintHasPrefix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasPrefix(FieldFingerprint, v))
}

// FingerprintHasSuffix applies the HasSuffix predicate on the "fingerprint" field.
func FingerprintHasSuffix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasSuffix(FieldFingerprint, v))
}

// FingerprintIsNil applies the IsNil predicate on the "fingerprint" field.
func FingerprintIsNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIsNull(FieldFingerprint))
}

// FingerprintNotNil applies the NotNil predicate on the "fingerprint" field.
func FingerprintNotNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotNull(FieldFingerprint))
}

// FingerprintEqualFold applies the EqualFold predicate on the "fingerprint" field.
func FingerprintEqualFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEqualFold(FieldFingerprint, v))
}

// FingerprintContainsFold applies the ContainsFold predicate on the "fingerprint" field.
func FingerprintContainsFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContainsFold(FieldFingerprint, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldContainsFold(FieldUserAgent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectLike {
	return predicate.ProjectLike(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectLike {
	return predicate.ProjectLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectLike {
	return predicate.ProjectLike(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserIdentity applies the HasEdge predicate on the "user_identity" edge.
func HasUserIdentity() predicate.ProjectLike {
	return predicate.ProjectLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserIdentityTable, UserIdentityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIdentityWith applies the HasEdge predicate on the "user_identity" edge with a given conditions (other predicates).
func HasUserIdentityWith(preds ...predicate.UserIdentity) predicate.ProjectLike {
	return predicate.ProjectLike(func(s *sql.Selector) {
		step := newUserIdentityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectLike) predicate.ProjectLike {
	return predicate.ProjectLike(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectLike) predicate.ProjectLike {
	return predicate.ProjectLike(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectLike) predicate.ProjectLike {
	return predicate.ProjectLike(sql.NotPredicates(p))
}
