// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/ideadetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaDetailCreate is the builder for creating a IdeaDetail entity.
type IdeaDetailCreate struct {
	config
	mutation *IdeaDetailMutation
	hooks    []Hook
}

// SetIdeaID sets the "idea_id" field.
func (idc *IdeaDetailCreate) SetIdeaID(u uuid.UUID) *IdeaDetailCreate {
	idc.mutation.SetIdeaID(u)
	return idc
}

// SetProgress sets the "progress" field.
func (idc *IdeaDetailCreate) SetProgress(s string) *IdeaDetailCreate {
	idc.mutation.SetProgress(s)
	return idc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableProgress(s *string) *IdeaDetailCreate {
	if s != nil {
		idc.SetProgress(*s)
	}
	return idc
}

// SetResults sets the "results" field.
func (idc *IdeaDetailCreate) SetResults(s string) *IdeaDetailCreate {
	idc.mutation.SetResults(s)
	return idc
}

// SetNillableResults sets the "results" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableResults(s *string) *IdeaDetailCreate {
	if s != nil {
		idc.SetResults(*s)
	}
	return idc
}

// SetReferences sets the "references" field.
func (idc *IdeaDetailCreate) SetReferences(s string) *IdeaDetailCreate {
	idc.mutation.SetReferences(s)
	return idc
}

// SetNillableReferences sets the "references" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableReferences(s *string) *IdeaDetailCreate {
	if s != nil {
		idc.SetReferences(*s)
	}
	return idc
}

// SetEstimatedDurationMonths sets the "estimated_duration_months" field.
func (idc *IdeaDetailCreate) SetEstimatedDurationMonths(i int) *IdeaDetailCreate {
	idc.mutation.SetEstimatedDurationMonths(i)
	return idc
}

// SetNillableEstimatedDurationMonths sets the "estimated_duration_months" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableEstimatedDurationMonths(i *int) *IdeaDetailCreate {
	if i != nil {
		idc.SetEstimatedDurationMonths(*i)
	}
	return idc
}

// SetRequiredResources sets the "required_resources" field.
func (idc *IdeaDetailCreate) SetRequiredResources(s string) *IdeaDetailCreate {
	idc.mutation.SetRequiredResources(s)
	return idc
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableRequiredResources(s *string) *IdeaDetailCreate {
	if s != nil {
		idc.SetRequiredResources(*s)
	}
	return idc
}

// SetCollaborationNeeded sets the "collaboration_needed" field.
func (idc *IdeaDetailCreate) SetCollaborationNeeded(b bool) *IdeaDetailCreate {
	idc.mutation.SetCollaborationNeeded(b)
	return idc
}

// SetNillableCollaborationNeeded sets the "collaboration_needed" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableCollaborationNeeded(b *bool) *IdeaDetailCreate {
	if b != nil {
		idc.SetCollaborationNeeded(*b)
	}
	return idc
}

// SetFundingRequired sets the "funding_required" field.
func (idc *IdeaDetailCreate) SetFundingRequired(b bool) *IdeaDetailCreate {
	idc.mutation.SetFundingRequired(b)
	return idc
}

// SetNillableFundingRequired sets the "funding_required" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableFundingRequired(b *bool) *IdeaDetailCreate {
	if b != nil {
		idc.SetFundingRequired(*b)
	}
	return idc
}

// SetEstimatedBudget sets the "estimated_budget" field.
func (idc *IdeaDetailCreate) SetEstimatedBudget(f float64) *IdeaDetailCreate {
	idc.mutation.SetEstimatedBudget(f)
	return idc
}

// SetNillableEstimatedBudget sets the "estimated_budget" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableEstimatedBudget(f *float64) *IdeaDetailCreate {
	if f != nil {
		idc.SetEstimatedBudget(*f)
	}
	return idc
}

// SetCreatedAt sets the "created_at" field.
func (idc *IdeaDetailCreate) SetCreatedAt(t time.Time) *IdeaDetailCreate {
	idc.mutation.SetCreatedAt(t)
	return idc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableCreatedAt(t *time.Time) *IdeaDetailCreate {
	if t != nil {
		idc.SetCreatedAt(*t)
	}
	return idc
}

// SetUpdatedAt sets the "updated_at" field.
func (idc *IdeaDetailCreate) SetUpdatedAt(t time.Time) *IdeaDetailCreate {
	idc.mutation.SetUpdatedAt(t)
	return idc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableUpdatedAt(t *time.Time) *IdeaDetailCreate {
	if t != nil {
		idc.SetUpdatedAt(*t)
	}
	return idc
}

// SetID sets the "id" field.
func (idc *IdeaDetailCreate) SetID(u uuid.UUID) *IdeaDetailCreate {
	idc.mutation.SetID(u)
	return idc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (idc *IdeaDetailCreate) SetNillableID(u *uuid.UUID) *IdeaDetailCreate {
	if u != nil {
		idc.SetID(*u)
	}
	return idc
}

// SetIdea sets the "idea" edge to the Idea entity.
func (idc *IdeaDetailCreate) SetIdea(i *Idea) *IdeaDetailCreate {
	return idc.SetIdeaID(i.ID)
}

// AddTranslationIDs adds the "translations" edge to the IdeaDetailTranslation entity by IDs.
func (idc *IdeaDetailCreate) AddTranslationIDs(ids ...uuid.UUID) *IdeaDetailCreate {
	idc.mutation.AddTranslationIDs(ids...)
	return idc
}

// AddTranslations adds the "translations" edges to the IdeaDetailTranslation entity.
func (idc *IdeaDetailCreate) AddTranslations(i ...*IdeaDetailTranslation) *IdeaDetailCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idc.AddTranslationIDs(ids...)
}

// Mutation returns the IdeaDetailMutation object of the builder.
func (idc *IdeaDetailCreate) Mutation() *IdeaDetailMutation {
	return idc.mutation
}

// Save creates the IdeaDetail in the database.
func (idc *IdeaDetailCreate) Save(ctx context.Context) (*IdeaDetail, error) {
	idc.defaults()
	return withHooks(ctx, idc.sqlSave, idc.mutation, idc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idc *IdeaDetailCreate) SaveX(ctx context.Context) *IdeaDetail {
	v, err := idc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idc *IdeaDetailCreate) Exec(ctx context.Context) error {
	_, err := idc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idc *IdeaDetailCreate) ExecX(ctx context.Context) {
	if err := idc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idc *IdeaDetailCreate) defaults() {
	if _, ok := idc.mutation.CollaborationNeeded(); !ok {
		v := ideadetail.DefaultCollaborationNeeded
		idc.mutation.SetCollaborationNeeded(v)
	}
	if _, ok := idc.mutation.FundingRequired(); !ok {
		v := ideadetail.DefaultFundingRequired
		idc.mutation.SetFundingRequired(v)
	}
	if _, ok := idc.mutation.CreatedAt(); !ok {
		v := ideadetail.DefaultCreatedAt()
		idc.mutation.SetCreatedAt(v)
	}
	if _, ok := idc.mutation.UpdatedAt(); !ok {
		v := ideadetail.DefaultUpdatedAt()
		idc.mutation.SetUpdatedAt(v)
	}
	if _, ok := idc.mutation.ID(); !ok {
		v := ideadetail.DefaultID()
		idc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idc *IdeaDetailCreate) check() error {
	if _, ok := idc.mutation.IdeaID(); !ok {
		return &ValidationError{Name: "idea_id", err: errors.New(`ent: missing required field "IdeaDetail.idea_id"`)}
	}
	if _, ok := idc.mutation.CollaborationNeeded(); !ok {
		return &ValidationError{Name: "collaboration_needed", err: errors.New(`ent: missing required field "IdeaDetail.collaboration_needed"`)}
	}
	if _, ok := idc.mutation.FundingRequired(); !ok {
		return &ValidationError{Name: "funding_required", err: errors.New(`ent: missing required field "IdeaDetail.funding_required"`)}
	}
	if _, ok := idc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IdeaDetail.created_at"`)}
	}
	if _, ok := idc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IdeaDetail.updated_at"`)}
	}
	if len(idc.mutation.IdeaIDs()) == 0 {
		return &ValidationError{Name: "idea", err: errors.New(`ent: missing required edge "IdeaDetail.idea"`)}
	}
	return nil
}

func (idc *IdeaDetailCreate) sqlSave(ctx context.Context) (*IdeaDetail, error) {
	if err := idc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	idc.mutation.id = &_node.ID
	idc.mutation.done = true
	return _node, nil
}

func (idc *IdeaDetailCreate) createSpec() (*IdeaDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &IdeaDetail{config: idc.config}
		_spec = sqlgraph.NewCreateSpec(ideadetail.Table, sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID))
	)
	if id, ok := idc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := idc.mutation.Progress(); ok {
		_spec.SetField(ideadetail.FieldProgress, field.TypeString, value)
		_node.Progress = value
	}
	if value, ok := idc.mutation.Results(); ok {
		_spec.SetField(ideadetail.FieldResults, field.TypeString, value)
		_node.Results = value
	}
	if value, ok := idc.mutation.References(); ok {
		_spec.SetField(ideadetail.FieldReferences, field.TypeString, value)
		_node.References = value
	}
	if value, ok := idc.mutation.EstimatedDurationMonths(); ok {
		_spec.SetField(ideadetail.FieldEstimatedDurationMonths, field.TypeInt, value)
		_node.EstimatedDurationMonths = value
	}
	if value, ok := idc.mutation.RequiredResources(); ok {
		_spec.SetField(ideadetail.FieldRequiredResources, field.TypeString, value)
		_node.RequiredResources = value
	}
	if value, ok := idc.mutation.CollaborationNeeded(); ok {
		_spec.SetField(ideadetail.FieldCollaborationNeeded, field.TypeBool, value)
		_node.CollaborationNeeded = value
	}
	if value, ok := idc.mutation.FundingRequired(); ok {
		_spec.SetField(ideadetail.FieldFundingRequired, field.TypeBool, value)
		_node.FundingRequired = value
	}
	if value, ok := idc.mutation.EstimatedBudget(); ok {
		_spec.SetField(ideadetail.FieldEstimatedBudget, field.TypeFloat64, value)
		_node.EstimatedBudget = value
	}
	if value, ok := idc.mutation.CreatedAt(); ok {
		_spec.SetField(ideadetail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := idc.mutation.UpdatedAt(); ok {
		_spec.SetField(ideadetail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := idc.mutation.IdeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ideadetail.IdeaTable,
			Columns: []string{ideadetail.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IdeaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := idc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ideadetail.TranslationsTable,
			Columns: []string{ideadetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideadetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdeaDetailCreateBulk is the builder for creating many IdeaDetail entities in bulk.
type IdeaDetailCreateBulk struct {
	config
	err      error
	builders []*IdeaDetailCreate
}

// Save creates the IdeaDetail entities in the database.
func (idcb *IdeaDetailCreateBulk) Save(ctx context.Context) ([]*IdeaDetail, error) {
	if idcb.err != nil {
		return nil, idcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(idcb.builders))
	nodes := make([]*IdeaDetail, len(idcb.builders))
	mutators := make([]Mutator, len(idcb.builders))
	for i := range idcb.builders {
		func(i int, root context.Context) {
			builder := idcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdeaDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idcb *IdeaDetailCreateBulk) SaveX(ctx context.Context) []*IdeaDetail {
	v, err := idcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idcb *IdeaDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := idcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idcb *IdeaDetailCreateBulk) ExecX(ctx context.Context) {
	if err := idcb.Exec(ctx); err != nil {
		panic(err)
	}
}
