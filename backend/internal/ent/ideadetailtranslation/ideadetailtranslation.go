// Code generated by ent, DO NOT EDIT.

package ideadetailtranslation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ideadetailtranslation type in the database.
	Label = "idea_detail_translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdeaDetailID holds the string denoting the idea_detail_id field in the database.
	FieldIdeaDetailID = "idea_detail_id"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldResults holds the string denoting the results field in the database.
	FieldResults = "results"
	// FieldReferences holds the string denoting the references field in the database.
	FieldReferences = "references"
	// FieldRequiredResources holds the string denoting the required_resources field in the database.
	FieldRequiredResources = "required_resources"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeIdeaDetail holds the string denoting the idea_detail edge name in mutations.
	EdgeIdeaDetail = "idea_detail"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// LanguageFieldID holds the string denoting the ID field of the Language.
	LanguageFieldID = "code"
	// Table holds the table name of the ideadetailtranslation in the database.
	Table = "idea_detail_translations"
	// IdeaDetailTable is the table that holds the idea_detail relation/edge.
	IdeaDetailTable = "idea_detail_translations"
	// IdeaDetailInverseTable is the table name for the IdeaDetail entity.
	// It exists in this package in order to avoid circular dependency with the "ideadetail" package.
	IdeaDetailInverseTable = "idea_details"
	// IdeaDetailColumn is the table column denoting the idea_detail relation/edge.
	IdeaDetailColumn = "idea_detail_id"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "idea_detail_translations"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "language_code"
)

// Columns holds all SQL columns for ideadetailtranslation fields.
var Columns = []string{
	FieldID,
	FieldIdeaDetailID,
	FieldLanguageCode,
	FieldProgress,
	FieldResults,
	FieldReferences,
	FieldRequiredResources,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LanguageCodeValidator is a validator for the "language_code" field. It is called by the builders before save.
	LanguageCodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the IdeaDetailTranslation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIdeaDetailID orders the results by the idea_detail_id field.
func ByIdeaDetailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdeaDetailID, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByResults orders the results by the results field.
func ByResults(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResults, opts...).ToFunc()
}

// ByReferences orders the results by the references field.
func ByReferences(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferences, opts...).ToFunc()
}

// ByRequiredResources orders the results by the required_resources field.
func ByRequiredResources(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiredResources, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByIdeaDetailField orders the results by idea_detail field.
func ByIdeaDetailField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdeaDetailStep(), sql.OrderByField(field, opts...))
	}
}

// ByLanguageField orders the results by language field.
func ByLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), sql.OrderByField(field, opts...))
	}
}
func newIdeaDetailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdeaDetailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IdeaDetailTable, IdeaDetailColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, LanguageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
	)
}
