// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectlike"
	"silan-backend/internal/ent/useridentity"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectLike is the model entity for the ProjectLike schema.
type ProjectLike struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Project ID that was liked
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// ID of the authenticated user who liked
	UserIdentityID string `json:"user_identity_id,omitempty"`
	// Browser fingerprint for anonymous likes
	Fingerprint string `json:"fingerprint,omitempty"`
	// IP address of the user who liked
	IPAddress string `json:"ip_address,omitempty"`
	// User agent string
	UserAgent string `json:"user_agent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectLikeQuery when eager-loading is set.
	Edges        ProjectLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectLikeEdges holds the relations/edges for other nodes in the graph.
type ProjectLikeEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// UserIdentity holds the value of the user_identity edge.
	UserIdentity *UserIdentity `json:"user_identity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectLikeEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// UserIdentityOrErr returns the UserIdentity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectLikeEdges) UserIdentityOrErr() (*UserIdentity, error) {
	if e.UserIdentity != nil {
		return e.UserIdentity, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: useridentity.Label}
	}
	return nil, &NotLoadedError{edge: "user_identity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectlike.FieldUserIdentityID, projectlike.FieldFingerprint, projectlike.FieldIPAddress, projectlike.FieldUserAgent:
			values[i] = new(sql.NullString)
		case projectlike.FieldCreatedAt, projectlike.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectlike.FieldID, projectlike.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectLike fields.
func (pl *ProjectLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectlike.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case projectlike.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pl.ProjectID = *value
			}
		case projectlike.FieldUserIdentityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_identity_id", values[i])
			} else if value.Valid {
				pl.UserIdentityID = value.String
			}
		case projectlike.FieldFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fingerprint", values[i])
			} else if value.Valid {
				pl.Fingerprint = value.String
			}
		case projectlike.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				pl.IPAddress = value.String
			}
		case projectlike.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				pl.UserAgent = value.String
			}
		case projectlike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case projectlike.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectLike.
// This includes values selected through modifiers, order, etc.
func (pl *ProjectLike) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectLike entity.
func (pl *ProjectLike) QueryProject() *ProjectQuery {
	return NewProjectLikeClient(pl.config).QueryProject(pl)
}

// QueryUserIdentity queries the "user_identity" edge of the ProjectLike entity.
func (pl *ProjectLike) QueryUserIdentity() *UserIdentityQuery {
	return NewProjectLikeClient(pl.config).QueryUserIdentity(pl)
}

// Update returns a builder for updating this ProjectLike.
// Note that you need to call ProjectLike.Unwrap() before calling this method if this ProjectLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *ProjectLike) Update() *ProjectLikeUpdateOne {
	return NewProjectLikeClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the ProjectLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *ProjectLike) Unwrap() *ProjectLike {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectLike is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *ProjectLike) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectLike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("user_identity_id=")
	builder.WriteString(pl.UserIdentityID)
	builder.WriteString(", ")
	builder.WriteString("fingerprint=")
	builder.WriteString(pl.Fingerprint)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(pl.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(pl.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectLikes is a parsable slice of ProjectLike.
type ProjectLikes []*ProjectLike
