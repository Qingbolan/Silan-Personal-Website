// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectview"
	"silan-backend/internal/ent/useridentity"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectViewUpdate is the builder for updating ProjectView entities.
type ProjectViewUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectViewMutation
}

// Where appends a list predicates to the ProjectViewUpdate builder.
func (pvu *ProjectViewUpdate) Where(ps ...predicate.ProjectView) *ProjectViewUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetProjectID sets the "project_id" field.
func (pvu *ProjectViewUpdate) SetProjectID(u uuid.UUID) *ProjectViewUpdate {
	pvu.mutation.SetProjectID(u)
	return pvu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pvu *ProjectViewUpdate) SetNillableProjectID(u *uuid.UUID) *ProjectViewUpdate {
	if u != nil {
		pvu.SetProjectID(*u)
	}
	return pvu
}

// SetUserIdentityID sets the "user_identity_id" field.
func (pvu *ProjectViewUpdate) SetUserIdentityID(s string) *ProjectViewUpdate {
	pvu.mutation.SetUserIdentityID(s)
	return pvu
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (pvu *ProjectViewUpdate) SetNillableUserIdentityID(s *string) *ProjectViewUpdate {
	if s != nil {
		pvu.SetUserIdentityID(*s)
	}
	return pvu
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (pvu *ProjectViewUpdate) ClearUserIdentityID() *ProjectViewUpdate {
	pvu.mutation.ClearUserIdentityID()
	return pvu
}

// SetFingerprint sets the "fingerprint" field.
func (pvu *ProjectViewUpdate) SetFingerprint(s string) *ProjectViewUpdate {
	pvu.mutation.SetFingerprint(s)
	return pvu
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (pvu *ProjectViewUpdate) SetNillableFingerprint(s *string) *ProjectViewUpdate {
	if s != nil {
		pvu.SetFingerprint(*s)
	}
	return pvu
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (pvu *ProjectViewUpdate) ClearFingerprint() *ProjectViewUpdate {
	pvu.mutation.ClearFingerprint()
	return pvu
}

// SetIPAddress sets the "ip_address" field.
func (pvu *ProjectViewUpdate) SetIPAddress(s string) *ProjectViewUpdate {
	pvu.mutation.SetIPAddress(s)
	return pvu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (pvu *ProjectViewUpdate) SetNillableIPAddress(s *string) *ProjectViewUpdate {
	if s != nil {
		pvu.SetIPAddress(*s)
	}
	return pvu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (pvu *ProjectViewUpdate) ClearIPAddress() *ProjectViewUpdate {
	pvu.mutation.ClearIPAddress()
	return pvu
}

// SetUserAgent sets the "user_agent" field.
func (pvu *ProjectViewUpdate) SetUserAgent(s string) *ProjectViewUpdate {
	pvu.mutation.SetUserAgent(s)
	return pvu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (pvu *ProjectViewUpdate) SetNillableUserAgent(s *string) *ProjectViewUpdate {
	if s != nil {
		pvu.SetUserAgent(*s)
	}
	return pvu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (pvu *ProjectViewUpdate) ClearUserAgent() *ProjectViewUpdate {
	pvu.mutation.ClearUserAgent()
	return pvu
}

// SetReferrer sets the "referrer" field.
func (pvu *ProjectViewUpdate) SetReferrer(s string) *ProjectViewUpdate {
	pvu.mutation.SetReferrer(s)
	return pvu
}

// SetNillableReferrer sets the "referrer" field if the given value is not nil.
func (pvu *ProjectViewUpdate) SetNillableReferrer(s *string) *ProjectViewUpdate {
	if s != nil {
		pvu.SetReferrer(*s)
	}
	return pvu
}

// ClearReferrer clears the value of the "referrer" field.
func (pvu *ProjectViewUpdate) ClearReferrer() *ProjectViewUpdate {
	pvu.mutation.ClearReferrer()
	return pvu
}

// SetSessionDuration sets the "session_duration" field.
func (pvu *ProjectViewUpdate) SetSessionDuration(i int) *ProjectViewUpdate {
	pvu.mutation.ResetSessionDuration()
	pvu.mutation.SetSessionDuration(i)
	return pvu
}

// SetNillableSessionDuration sets the "session_duration" field if the given value is not nil.
func (pvu *ProjectViewUpdate) SetNillableSessionDuration(i *int) *ProjectViewUpdate {
	if i != nil {
		pvu.SetSessionDuration(*i)
	}
	return pvu
}

// AddSessionDuration adds i to the "session_duration" field.
func (pvu *ProjectViewUpdate) AddSessionDuration(i int) *ProjectViewUpdate {
	pvu.mutation.AddSessionDuration(i)
	return pvu
}

// ClearSessionDuration clears the value of the "session_duration" field.
func (pvu *ProjectViewUpdate) ClearSessionDuration() *ProjectViewUpdate {
	pvu.mutation.ClearSessionDuration()
	return pvu
}

// SetUpdatedAt sets the "updated_at" field.
func (pvu *ProjectViewUpdate) SetUpdatedAt(t time.Time) *ProjectViewUpdate {
	pvu.mutation.SetUpdatedAt(t)
	return pvu
}

// SetProject sets the "project" edge to the Project entity.
func (pvu *ProjectViewUpdate) SetProject(p *Project) *ProjectViewUpdate {
	return pvu.SetProjectID(p.ID)
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (pvu *ProjectViewUpdate) SetUserIdentity(u *UserIdentity) *ProjectViewUpdate {
	return pvu.SetUserIdentityID(u.ID)
}

// Mutation returns the ProjectViewMutation object of the builder.
func (pvu *ProjectViewUpdate) Mutation() *ProjectViewMutation {
	return pvu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pvu *ProjectViewUpdate) ClearProject() *ProjectViewUpdate {
	pvu.mutation.ClearProject()
	return pvu
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (pvu *ProjectViewUpdate) ClearUserIdentity() *ProjectViewUpdate {
	pvu.mutation.ClearUserIdentity()
	return pvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *ProjectViewUpdate) Save(ctx context.Context) (int, error) {
	pvu.defaults()
	return withHooks(ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *ProjectViewUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *ProjectViewUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *ProjectViewUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvu *ProjectViewUpdate) defaults() {
	if _, ok := pvu.mutation.UpdatedAt(); !ok {
		v := projectview.UpdateDefaultUpdatedAt()
		pvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *ProjectViewUpdate) check() error {
	if v, ok := pvu.mutation.IPAddress(); ok {
		if err := projectview.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ProjectView.ip_address": %w`, err)}
		}
	}
	if pvu.mutation.ProjectCleared() && len(pvu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectView.project"`)
	}
	return nil
}

func (pvu *ProjectViewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectview.Table, projectview.Columns, sqlgraph.NewFieldSpec(projectview.FieldID, field.TypeUUID))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.Fingerprint(); ok {
		_spec.SetField(projectview.FieldFingerprint, field.TypeString, value)
	}
	if pvu.mutation.FingerprintCleared() {
		_spec.ClearField(projectview.FieldFingerprint, field.TypeString)
	}
	if value, ok := pvu.mutation.IPAddress(); ok {
		_spec.SetField(projectview.FieldIPAddress, field.TypeString, value)
	}
	if pvu.mutation.IPAddressCleared() {
		_spec.ClearField(projectview.FieldIPAddress, field.TypeString)
	}
	if value, ok := pvu.mutation.UserAgent(); ok {
		_spec.SetField(projectview.FieldUserAgent, field.TypeString, value)
	}
	if pvu.mutation.UserAgentCleared() {
		_spec.ClearField(projectview.FieldUserAgent, field.TypeString)
	}
	if value, ok := pvu.mutation.Referrer(); ok {
		_spec.SetField(projectview.FieldReferrer, field.TypeString, value)
	}
	if pvu.mutation.ReferrerCleared() {
		_spec.ClearField(projectview.FieldReferrer, field.TypeString)
	}
	if value, ok := pvu.mutation.SessionDuration(); ok {
		_spec.SetField(projectview.FieldSessionDuration, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedSessionDuration(); ok {
		_spec.AddField(projectview.FieldSessionDuration, field.TypeInt, value)
	}
	if pvu.mutation.SessionDurationCleared() {
		_spec.ClearField(projectview.FieldSessionDuration, field.TypeInt)
	}
	if value, ok := pvu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectview.FieldUpdatedAt, field.TypeTime, value)
	}
	if pvu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectview.ProjectTable,
			Columns: []string{projectview.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectview.ProjectTable,
			Columns: []string{projectview.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectview.UserIdentityTable,
			Columns: []string{projectview.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectview.UserIdentityTable,
			Columns: []string{projectview.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// ProjectViewUpdateOne is the builder for updating a single ProjectView entity.
type ProjectViewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectViewMutation
}

// SetProjectID sets the "project_id" field.
func (pvuo *ProjectViewUpdateOne) SetProjectID(u uuid.UUID) *ProjectViewUpdateOne {
	pvuo.mutation.SetProjectID(u)
	return pvuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pvuo *ProjectViewUpdateOne) SetNillableProjectID(u *uuid.UUID) *ProjectViewUpdateOne {
	if u != nil {
		pvuo.SetProjectID(*u)
	}
	return pvuo
}

// SetUserIdentityID sets the "user_identity_id" field.
func (pvuo *ProjectViewUpdateOne) SetUserIdentityID(s string) *ProjectViewUpdateOne {
	pvuo.mutation.SetUserIdentityID(s)
	return pvuo
}

// SetNillableUserIdentityID sets the "user_identity_id" field if the given value is not nil.
func (pvuo *ProjectViewUpdateOne) SetNillableUserIdentityID(s *string) *ProjectViewUpdateOne {
	if s != nil {
		pvuo.SetUserIdentityID(*s)
	}
	return pvuo
}

// ClearUserIdentityID clears the value of the "user_identity_id" field.
func (pvuo *ProjectViewUpdateOne) ClearUserIdentityID() *ProjectViewUpdateOne {
	pvuo.mutation.ClearUserIdentityID()
	return pvuo
}

// SetFingerprint sets the "fingerprint" field.
func (pvuo *ProjectViewUpdateOne) SetFingerprint(s string) *ProjectViewUpdateOne {
	pvuo.mutation.SetFingerprint(s)
	return pvuo
}

// SetNillableFingerprint sets the "fingerprint" field if the given value is not nil.
func (pvuo *ProjectViewUpdateOne) SetNillableFingerprint(s *string) *ProjectViewUpdateOne {
	if s != nil {
		pvuo.SetFingerprint(*s)
	}
	return pvuo
}

// ClearFingerprint clears the value of the "fingerprint" field.
func (pvuo *ProjectViewUpdateOne) ClearFingerprint() *ProjectViewUpdateOne {
	pvuo.mutation.ClearFingerprint()
	return pvuo
}

// SetIPAddress sets the "ip_address" field.
func (pvuo *ProjectViewUpdateOne) SetIPAddress(s string) *ProjectViewUpdateOne {
	pvuo.mutation.SetIPAddress(s)
	return pvuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (pvuo *ProjectViewUpdateOne) SetNillableIPAddress(s *string) *ProjectViewUpdateOne {
	if s != nil {
		pvuo.SetIPAddress(*s)
	}
	return pvuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (pvuo *ProjectViewUpdateOne) ClearIPAddress() *ProjectViewUpdateOne {
	pvuo.mutation.ClearIPAddress()
	return pvuo
}

// SetUserAgent sets the "user_agent" field.
func (pvuo *ProjectViewUpdateOne) SetUserAgent(s string) *ProjectViewUpdateOne {
	pvuo.mutation.SetUserAgent(s)
	return pvuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (pvuo *ProjectViewUpdateOne) SetNillableUserAgent(s *string) *ProjectViewUpdateOne {
	if s != nil {
		pvuo.SetUserAgent(*s)
	}
	return pvuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (pvuo *ProjectViewUpdateOne) ClearUserAgent() *ProjectViewUpdateOne {
	pvuo.mutation.ClearUserAgent()
	return pvuo
}

// SetReferrer sets the "referrer" field.
func (pvuo *ProjectViewUpdateOne) SetReferrer(s string) *ProjectViewUpdateOne {
	pvuo.mutation.SetReferrer(s)
	return pvuo
}

// SetNillableReferrer sets the "referrer" field if the given value is not nil.
func (pvuo *ProjectViewUpdateOne) SetNillableReferrer(s *string) *ProjectViewUpdateOne {
	if s != nil {
		pvuo.SetReferrer(*s)
	}
	return pvuo
}

// ClearReferrer clears the value of the "referrer" field.
func (pvuo *ProjectViewUpdateOne) ClearReferrer() *ProjectViewUpdateOne {
	pvuo.mutation.ClearReferrer()
	return pvuo
}

// SetSessionDuration sets the "session_duration" field.
func (pvuo *ProjectViewUpdateOne) SetSessionDuration(i int) *ProjectViewUpdateOne {
	pvuo.mutation.ResetSessionDuration()
	pvuo.mutation.SetSessionDuration(i)
	return pvuo
}

// SetNillableSessionDuration sets the "session_duration" field if the given value is not nil.
func (pvuo *ProjectViewUpdateOne) SetNillableSessionDuration(i *int) *ProjectViewUpdateOne {
	if i != nil {
		pvuo.SetSessionDuration(*i)
	}
	return pvuo
}

// AddSessionDuration adds i to the "session_duration" field.
func (pvuo *ProjectViewUpdateOne) AddSessionDuration(i int) *ProjectViewUpdateOne {
	pvuo.mutation.AddSessionDuration(i)
	return pvuo
}

// ClearSessionDuration clears the value of the "session_duration" field.
func (pvuo *ProjectViewUpdateOne) ClearSessionDuration() *ProjectViewUpdateOne {
	pvuo.mutation.ClearSessionDuration()
	return pvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pvuo *ProjectViewUpdateOne) SetUpdatedAt(t time.Time) *ProjectViewUpdateOne {
	pvuo.mutation.SetUpdatedAt(t)
	return pvuo
}

// SetProject sets the "project" edge to the Project entity.
func (pvuo *ProjectViewUpdateOne) SetProject(p *Project) *ProjectViewUpdateOne {
	return pvuo.SetProjectID(p.ID)
}

// SetUserIdentity sets the "user_identity" edge to the UserIdentity entity.
func (pvuo *ProjectViewUpdateOne) SetUserIdentity(u *UserIdentity) *ProjectViewUpdateOne {
	return pvuo.SetUserIdentityID(u.ID)
}

// Mutation returns the ProjectViewMutation object of the builder.
func (pvuo *ProjectViewUpdateOne) Mutation() *ProjectViewMutation {
	return pvuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pvuo *ProjectViewUpdateOne) ClearProject() *ProjectViewUpdateOne {
	pvuo.mutation.ClearProject()
	return pvuo
}

// ClearUserIdentity clears the "user_identity" edge to the UserIdentity entity.
func (pvuo *ProjectViewUpdateOne) ClearUserIdentity() *ProjectViewUpdateOne {
	pvuo.mutation.ClearUserIdentity()
	return pvuo
}

// Where appends a list predicates to the ProjectViewUpdate builder.
func (pvuo *ProjectViewUpdateOne) Where(ps ...predicate.ProjectView) *ProjectViewUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *ProjectViewUpdateOne) Select(field string, fields ...string) *ProjectViewUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated ProjectView entity.
func (pvuo *ProjectViewUpdateOne) Save(ctx context.Context) (*ProjectView, error) {
	pvuo.defaults()
	return withHooks(ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *ProjectViewUpdateOne) SaveX(ctx context.Context) *ProjectView {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *ProjectViewUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *ProjectViewUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvuo *ProjectViewUpdateOne) defaults() {
	if _, ok := pvuo.mutation.UpdatedAt(); !ok {
		v := projectview.UpdateDefaultUpdatedAt()
		pvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *ProjectViewUpdateOne) check() error {
	if v, ok := pvuo.mutation.IPAddress(); ok {
		if err := projectview.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ProjectView.ip_address": %w`, err)}
		}
	}
	if pvuo.mutation.ProjectCleared() && len(pvuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectView.project"`)
	}
	return nil
}

func (pvuo *ProjectViewUpdateOne) sqlSave(ctx context.Context) (_node *ProjectView, err error) {
	if err := pvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectview.Table, projectview.Columns, sqlgraph.NewFieldSpec(projectview.FieldID, field.TypeUUID))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectView.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectview.FieldID)
		for _, f := range fields {
			if !projectview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.Fingerprint(); ok {
		_spec.SetField(projectview.FieldFingerprint, field.TypeString, value)
	}
	if pvuo.mutation.FingerprintCleared() {
		_spec.ClearField(projectview.FieldFingerprint, field.TypeString)
	}
	if value, ok := pvuo.mutation.IPAddress(); ok {
		_spec.SetField(projectview.FieldIPAddress, field.TypeString, value)
	}
	if pvuo.mutation.IPAddressCleared() {
		_spec.ClearField(projectview.FieldIPAddress, field.TypeString)
	}
	if value, ok := pvuo.mutation.UserAgent(); ok {
		_spec.SetField(projectview.FieldUserAgent, field.TypeString, value)
	}
	if pvuo.mutation.UserAgentCleared() {
		_spec.ClearField(projectview.FieldUserAgent, field.TypeString)
	}
	if value, ok := pvuo.mutation.Referrer(); ok {
		_spec.SetField(projectview.FieldReferrer, field.TypeString, value)
	}
	if pvuo.mutation.ReferrerCleared() {
		_spec.ClearField(projectview.FieldReferrer, field.TypeString)
	}
	if value, ok := pvuo.mutation.SessionDuration(); ok {
		_spec.SetField(projectview.FieldSessionDuration, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedSessionDuration(); ok {
		_spec.AddField(projectview.FieldSessionDuration, field.TypeInt, value)
	}
	if pvuo.mutation.SessionDurationCleared() {
		_spec.ClearField(projectview.FieldSessionDuration, field.TypeInt)
	}
	if value, ok := pvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectview.FieldUpdatedAt, field.TypeTime, value)
	}
	if pvuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectview.ProjectTable,
			Columns: []string{projectview.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectview.ProjectTable,
			Columns: []string{projectview.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.UserIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectview.UserIdentityTable,
			Columns: []string{projectview.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.UserIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectview.UserIdentityTable,
			Columns: []string{projectview.UserIdentityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectView{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
