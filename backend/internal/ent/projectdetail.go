// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectDetail is the model entity for the ProjectDetail schema.
type ProjectDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// ProjectDetails holds the value of the "project_details" field.
	ProjectDetails string `json:"project_details,omitempty"`
	// QuickStart holds the value of the "quick_start" field.
	QuickStart string `json:"quick_start,omitempty"`
	// ReleaseNotes holds the value of the "release_notes" field.
	ReleaseNotes string `json:"release_notes,omitempty"`
	// Dependencies holds the value of the "dependencies" field.
	Dependencies string `json:"dependencies,omitempty"`
	// License holds the value of the "license" field.
	License string `json:"license,omitempty"`
	// LicenseText holds the value of the "license_text" field.
	LicenseText string `json:"license_text,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectDetailQuery when eager-loading is set.
	Edges        ProjectDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectDetailEdges holds the relations/edges for other nodes in the graph.
type ProjectDetailEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*ProjectDetailTranslation `json:"translations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectDetailEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectDetailEdges) TranslationsOrErr() ([]*ProjectDetailTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectdetail.FieldProjectDetails, projectdetail.FieldQuickStart, projectdetail.FieldReleaseNotes, projectdetail.FieldDependencies, projectdetail.FieldLicense, projectdetail.FieldLicenseText, projectdetail.FieldVersion:
			values[i] = new(sql.NullString)
		case projectdetail.FieldCreatedAt, projectdetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectdetail.FieldID, projectdetail.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectDetail fields.
func (pd *ProjectDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectdetail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pd.ID = *value
			}
		case projectdetail.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pd.ProjectID = *value
			}
		case projectdetail.FieldProjectDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_details", values[i])
			} else if value.Valid {
				pd.ProjectDetails = value.String
			}
		case projectdetail.FieldQuickStart:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quick_start", values[i])
			} else if value.Valid {
				pd.QuickStart = value.String
			}
		case projectdetail.FieldReleaseNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_notes", values[i])
			} else if value.Valid {
				pd.ReleaseNotes = value.String
			}
		case projectdetail.FieldDependencies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependencies", values[i])
			} else if value.Valid {
				pd.Dependencies = value.String
			}
		case projectdetail.FieldLicense:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license", values[i])
			} else if value.Valid {
				pd.License = value.String
			}
		case projectdetail.FieldLicenseText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_text", values[i])
			} else if value.Valid {
				pd.LicenseText = value.String
			}
		case projectdetail.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pd.Version = value.String
			}
		case projectdetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Time
			}
		case projectdetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Time
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectDetail.
// This includes values selected through modifiers, order, etc.
func (pd *ProjectDetail) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectDetail entity.
func (pd *ProjectDetail) QueryProject() *ProjectQuery {
	return NewProjectDetailClient(pd.config).QueryProject(pd)
}

// QueryTranslations queries the "translations" edge of the ProjectDetail entity.
func (pd *ProjectDetail) QueryTranslations() *ProjectDetailTranslationQuery {
	return NewProjectDetailClient(pd.config).QueryTranslations(pd)
}

// Update returns a builder for updating this ProjectDetail.
// Note that you need to call ProjectDetail.Unwrap() before calling this method if this ProjectDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProjectDetail) Update() *ProjectDetailUpdateOne {
	return NewProjectDetailClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProjectDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProjectDetail) Unwrap() *ProjectDetail {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectDetail is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProjectDetail) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("project_details=")
	builder.WriteString(pd.ProjectDetails)
	builder.WriteString(", ")
	builder.WriteString("quick_start=")
	builder.WriteString(pd.QuickStart)
	builder.WriteString(", ")
	builder.WriteString("release_notes=")
	builder.WriteString(pd.ReleaseNotes)
	builder.WriteString(", ")
	builder.WriteString("dependencies=")
	builder.WriteString(pd.Dependencies)
	builder.WriteString(", ")
	builder.WriteString("license=")
	builder.WriteString(pd.License)
	builder.WriteString(", ")
	builder.WriteString("license_text=")
	builder.WriteString(pd.LicenseText)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(pd.Version)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectDetails is a parsable slice of ProjectDetail.
type ProjectDetails []*ProjectDetail
