// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/ideadetail"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IdeaDetailDelete is the builder for deleting a IdeaDetail entity.
type IdeaDetailDelete struct {
	config
	hooks    []Hook
	mutation *IdeaDetailMutation
}

// Where appends a list predicates to the IdeaDetailDelete builder.
func (idd *IdeaDetailDelete) Where(ps ...predicate.IdeaDetail) *IdeaDetailDelete {
	idd.mutation.Where(ps...)
	return idd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (idd *IdeaDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, idd.sqlExec, idd.mutation, idd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (idd *IdeaDetailDelete) ExecX(ctx context.Context) int {
	n, err := idd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (idd *IdeaDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ideadetail.Table, sqlgraph.NewFieldSpec(ideadetail.FieldID, field.TypeUUID))
	if ps := idd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, idd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	idd.mutation.done = true
	return affected, err
}

// IdeaDetailDeleteOne is the builder for deleting a single IdeaDetail entity.
type IdeaDetailDeleteOne struct {
	idd *IdeaDetailDelete
}

// Where appends a list predicates to the IdeaDetailDelete builder.
func (iddo *IdeaDetailDeleteOne) Where(ps ...predicate.IdeaDetail) *IdeaDetailDeleteOne {
	iddo.idd.mutation.Where(ps...)
	return iddo
}

// Exec executes the deletion query.
func (iddo *IdeaDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := iddo.idd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ideadetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iddo *IdeaDetailDeleteOne) ExecX(ctx context.Context) {
	if err := iddo.Exec(ctx); err != nil {
		panic(err)
	}
}
