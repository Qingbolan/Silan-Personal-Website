// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectlike"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectLikeDelete is the builder for deleting a ProjectLike entity.
type ProjectLikeDelete struct {
	config
	hooks    []Hook
	mutation *ProjectLikeMutation
}

// Where appends a list predicates to the ProjectLikeDelete builder.
func (pld *ProjectLikeDelete) Where(ps ...predicate.ProjectLike) *ProjectLikeDelete {
	pld.mutation.Where(ps...)
	return pld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pld *ProjectLikeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pld.sqlExec, pld.mutation, pld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pld *ProjectLikeDelete) ExecX(ctx context.Context) int {
	n, err := pld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pld *ProjectLikeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(projectlike.Table, sqlgraph.NewFieldSpec(projectlike.FieldID, field.TypeUUID))
	if ps := pld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pld.mutation.done = true
	return affected, err
}

// ProjectLikeDeleteOne is the builder for deleting a single ProjectLike entity.
type ProjectLikeDeleteOne struct {
	pld *ProjectLikeDelete
}

// Where appends a list predicates to the ProjectLikeDelete builder.
func (pldo *ProjectLikeDeleteOne) Where(ps ...predicate.ProjectLike) *ProjectLikeDeleteOne {
	pldo.pld.mutation.Where(ps...)
	return pldo
}

// Exec executes the deletion query.
func (pldo *ProjectLikeDeleteOne) Exec(ctx context.Context) error {
	n, err := pldo.pld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{projectlike.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pldo *ProjectLikeDeleteOne) ExecX(ctx context.Context) {
	if err := pldo.Exec(ctx); err != nil {
		panic(err)
	}
}
