// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/comment"
	"silan-backend/internal/ent/useridentity"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type of entity: 'blog' or 'idea'
	EntityType string `json:"entity_type,omitempty"`
	// ID of the blog post or idea
	EntityID uuid.UUID `json:"entity_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID uuid.UUID `json:"parent_id,omitempty"`
	// AuthorName holds the value of the "author_name" field.
	AuthorName string `json:"author_name,omitempty"`
	// AuthorEmail holds the value of the "author_email" field.
	AuthorEmail string `json:"author_email,omitempty"`
	// AuthorWebsite holds the value of the "author_website" field.
	AuthorWebsite string `json:"author_website,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Type of comment: general, question, suggestion, etc.
	Type string `json:"type,omitempty"`
	// IsApproved holds the value of the "is_approved" field.
	IsApproved bool `json:"is_approved,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// Link to authenticated user identity if available
	UserIdentityID string `json:"user_identity_id,omitempty"`
	// Number of likes for this comment
	LikesCount int `json:"likes_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges              CommentEdges `json:"edges"`
	blog_post_comments *uuid.UUID
	idea_comments      *uuid.UUID
	selectValues       sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Comment `json:"parent,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*Comment `json:"replies,omitempty"`
	// UserIdentity holds the value of the user_identity edge.
	UserIdentity *UserIdentity `json:"user_identity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ParentOrErr() (*Comment, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) RepliesOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// UserIdentityOrErr returns the UserIdentity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) UserIdentityOrErr() (*UserIdentity, error) {
	if e.UserIdentity != nil {
		return e.UserIdentity, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: useridentity.Label}
	}
	return nil, &NotLoadedError{edge: "user_identity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldIsApproved:
			values[i] = new(sql.NullBool)
		case comment.FieldLikesCount:
			values[i] = new(sql.NullInt64)
		case comment.FieldEntityType, comment.FieldAuthorName, comment.FieldAuthorEmail, comment.FieldAuthorWebsite, comment.FieldContent, comment.FieldType, comment.FieldIPAddress, comment.FieldUserAgent, comment.FieldUserIdentityID:
			values[i] = new(sql.NullString)
		case comment.FieldCreatedAt, comment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case comment.FieldID, comment.FieldEntityID, comment.FieldParentID:
			values[i] = new(uuid.UUID)
		case comment.ForeignKeys[0]: // blog_post_comments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case comment.ForeignKeys[1]: // idea_comments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case comment.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				c.EntityType = value.String
			}
		case comment.FieldEntityID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value != nil {
				c.EntityID = *value
			}
		case comment.FieldParentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value != nil {
				c.ParentID = *value
			}
		case comment.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_name", values[i])
			} else if value.Valid {
				c.AuthorName = value.String
			}
		case comment.FieldAuthorEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_email", values[i])
			} else if value.Valid {
				c.AuthorEmail = value.String
			}
		case comment.FieldAuthorWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_website", values[i])
			} else if value.Valid {
				c.AuthorWebsite = value.String
			}
		case comment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case comment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case comment.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[i])
			} else if value.Valid {
				c.IsApproved = value.Bool
			}
		case comment.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				c.IPAddress = value.String
			}
		case comment.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				c.UserAgent = value.String
			}
		case comment.FieldUserIdentityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_identity_id", values[i])
			} else if value.Valid {
				c.UserIdentityID = value.String
			}
		case comment.FieldLikesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes_count", values[i])
			} else if value.Valid {
				c.LikesCount = int(value.Int64)
			}
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case comment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case comment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field blog_post_comments", values[i])
			} else if value.Valid {
				c.blog_post_comments = new(uuid.UUID)
				*c.blog_post_comments = *value.S.(*uuid.UUID)
			}
		case comment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field idea_comments", values[i])
			} else if value.Valid {
				c.idea_comments = new(uuid.UUID)
				*c.idea_comments = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Comment entity.
func (c *Comment) QueryParent() *CommentQuery {
	return NewCommentClient(c.config).QueryParent(c)
}

// QueryReplies queries the "replies" edge of the Comment entity.
func (c *Comment) QueryReplies() *CommentQuery {
	return NewCommentClient(c.config).QueryReplies(c)
}

// QueryUserIdentity queries the "user_identity" edge of the Comment entity.
func (c *Comment) QueryUserIdentity() *UserIdentityQuery {
	return NewCommentClient(c.config).QueryUserIdentity(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("entity_type=")
	builder.WriteString(c.EntityType)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", c.EntityID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ParentID))
	builder.WriteString(", ")
	builder.WriteString("author_name=")
	builder.WriteString(c.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("author_email=")
	builder.WriteString(c.AuthorEmail)
	builder.WriteString(", ")
	builder.WriteString("author_website=")
	builder.WriteString(c.AuthorWebsite)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", c.IsApproved))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(c.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(c.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("user_identity_id=")
	builder.WriteString(c.UserIdentityID)
	builder.WriteString(", ")
	builder.WriteString("likes_count=")
	builder.WriteString(fmt.Sprintf("%v", c.LikesCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
