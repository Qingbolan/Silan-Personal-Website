// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4

package handler

import (
	"net/http"

	auth "silan-backend/internal/handler/auth"
	blog "silan-backend/internal/handler/blog"
	ideas "silan-backend/internal/handler/ideas"
	plans "silan-backend/internal/handler/plans"
	projects "silan-backend/internal/handler/projects"
	resume "silan-backend/internal/handler/resume"
	"silan-backend/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Cors},
			[]rest.Route{
				{
					// Verify Google ID token and upsert identity
					Method:  http.MethodPost,
					Path:    "/google/verify",
					Handler: auth.GoogleVerifyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Cors},
			[]rest.Route{
				{
					// Get blog categories
					Method:  http.MethodGet,
					Path:    "/categories",
					Handler: blog.GetBlogCategoriesHandler(serverCtx),
				},
				{
					// Delete a comment (fingerprint required)
					Method:  http.MethodDelete,
					Path:    "/comments/:comment_id",
					Handler: blog.DeleteBlogCommentHandler(serverCtx),
				},
				{
					// Like/Unlike a comment
					Method:  http.MethodPost,
					Path:    "/comments/:comment_id/like",
					Handler: blog.LikeCommentHandler(serverCtx),
				},
				{
					// Get blog posts list with pagination and filtering
					Method:  http.MethodGet,
					Path:    "/posts",
					Handler: blog.GetBlogPostsHandler(serverCtx),
				},
				{
					// List comments for a blog post
					Method:  http.MethodGet,
					Path:    "/posts/:id/comments",
					Handler: blog.ListBlogCommentsHandler(serverCtx),
				},
				{
					// Create a comment for a blog post
					Method:  http.MethodPost,
					Path:    "/posts/:id/comments",
					Handler: blog.CreateBlogCommentHandler(serverCtx),
				},
				{
					// Update blog post like count
					Method:  http.MethodPost,
					Path:    "/posts/:id/likes",
					Handler: blog.UpdateBlogLikesHandler(serverCtx),
				},
				{
					// Update blog post view count
					Method:  http.MethodPost,
					Path:    "/posts/:id/views",
					Handler: blog.UpdateBlogViewsHandler(serverCtx),
				},
				{
					// Get single blog post by slug
					Method:  http.MethodGet,
					Path:    "/posts/:slug",
					Handler: blog.GetBlogPostHandler(serverCtx),
				},
				{
					// Get single blog post by ID
					Method:  http.MethodGet,
					Path:    "/posts/id/:id",
					Handler: blog.GetBlogPostByIdHandler(serverCtx),
				},
				{
					// Search blog posts with filters
					Method:  http.MethodGet,
					Path:    "/search",
					Handler: blog.SearchBlogPostsHandler(serverCtx),
				},
				{
					// Get blog series data
					Method:  http.MethodGet,
					Path:    "/series/:series_id",
					Handler: blog.GetBlogSeriesHandler(serverCtx),
				},
				{
					// Get blog tags
					Method:  http.MethodGet,
					Path:    "/tags",
					Handler: blog.GetBlogTagsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/blog"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Cors},
			[]rest.Route{
				{
					// Get ideas list with pagination and filtering
					Method:  http.MethodGet,
					Path:    "/",
					Handler: ideas.GetIdeasHandler(serverCtx),
				},
				{
					// Get single idea by ID
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: ideas.GetIdeaHandler(serverCtx),
				},
				{
					// List comments for an idea
					Method:  http.MethodGet,
					Path:    "/:id/comments",
					Handler: ideas.ListIdeaCommentsHandler(serverCtx),
				},
				{
					// Create a comment for an idea
					Method:  http.MethodPost,
					Path:    "/:id/comments",
					Handler: ideas.CreateIdeaCommentHandler(serverCtx),
				},
				{
					// Get idea categories
					Method:  http.MethodGet,
					Path:    "/categories",
					Handler: ideas.GetIdeaCategoriesHandler(serverCtx),
				},
				{
					// Delete a comment on idea
					Method:  http.MethodDelete,
					Path:    "/comments/:comment_id",
					Handler: ideas.DeleteIdeaCommentHandler(serverCtx),
				},
				{
					// Like/Unlike a comment on idea
					Method:  http.MethodPost,
					Path:    "/comments/:comment_id/like",
					Handler: ideas.LikeIdeaCommentHandler(serverCtx),
				},
				{
					// Search ideas with filters
					Method:  http.MethodGet,
					Path:    "/search",
					Handler: ideas.SearchIdeasHandler(serverCtx),
				},
				{
					// Get idea tags
					Method:  http.MethodGet,
					Path:    "/tags",
					Handler: ideas.GetIdeaTagsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/ideas"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Cors},
			[]rest.Route{
				{
					// Get projects by annual plan
					Method:  http.MethodGet,
					Path:    "/:plan_name/projects",
					Handler: plans.GetProjectsByPlanHandler(serverCtx),
				},
				{
					// Get annual plans list
					Method:  http.MethodGet,
					Path:    "/annual",
					Handler: plans.GetAnnualPlansHandler(serverCtx),
				},
				{
					// Get annual plan by name
					Method:  http.MethodGet,
					Path:    "/annual/:name",
					Handler: plans.GetAnnualPlanByNameHandler(serverCtx),
				},
				{
					// Get current annual plan
					Method:  http.MethodGet,
					Path:    "/annual/current",
					Handler: plans.GetCurrentAnnualPlanHandler(serverCtx),
				},
				{
					// Get projects with their annual plans
					Method:  http.MethodGet,
					Path:    "/projects",
					Handler: plans.GetProjectsWithPlansHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/plans"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Cors},
			[]rest.Route{
				{
					// Get projects list with pagination and filtering
					Method:  http.MethodGet,
					Path:    "/",
					Handler: projects.GetProjectsHandler(serverCtx),
				},
				{
					// Get project related blogs
					Method:  http.MethodGet,
					Path:    "/:id/blogs",
					Handler: projects.GetProjectRelatedBlogsHandler(serverCtx),
				},
				{
					// List comments for a project
					Method:  http.MethodGet,
					Path:    "/:id/comments",
					Handler: projects.ListProjectCommentsHandler(serverCtx),
				},
				{
					// Create a comment for a project
					Method:  http.MethodPost,
					Path:    "/:id/comments",
					Handler: projects.CreateProjectCommentHandler(serverCtx),
				},
				{
					// Get detailed project information
					Method:  http.MethodGet,
					Path:    "/:id/detail",
					Handler: projects.GetProjectDetailHandler(serverCtx),
				},
				{
					// Like/Unlike a project
					Method:  http.MethodPost,
					Path:    "/:id/like",
					Handler: projects.LikeProjectHandler(serverCtx),
				},
				{
					// Get project metrics (likes, views)
					Method:  http.MethodGet,
					Path:    "/:id/metrics",
					Handler: projects.GetProjectMetricsHandler(serverCtx),
				},
				{
					// Record project view
					Method:  http.MethodPost,
					Path:    "/:id/view",
					Handler: projects.RecordProjectViewHandler(serverCtx),
				},
				{
					// Get single project by slug
					Method:  http.MethodGet,
					Path:    "/:slug",
					Handler: projects.GetProjectHandler(serverCtx),
				},
				{
					// Get project categories
					Method:  http.MethodGet,
					Path:    "/categories",
					Handler: projects.GetProjectCategoriesHandler(serverCtx),
				},
				{
					// Delete a comment on project
					Method:  http.MethodDelete,
					Path:    "/comments/:comment_id",
					Handler: projects.DeleteProjectCommentHandler(serverCtx),
				},
				{
					// Like/Unlike a comment on project
					Method:  http.MethodPost,
					Path:    "/comments/:comment_id/like",
					Handler: projects.LikeProjectCommentHandler(serverCtx),
				},
				{
					// Get project graph data for visualization
					Method:  http.MethodGet,
					Path:    "/graph",
					Handler: projects.GetProjectGraphDataHandler(serverCtx),
				},
				{
					// Get single project by ID (numeric)
					Method:  http.MethodGet,
					Path:    "/id/:id",
					Handler: projects.GetProjectByIdHandler(serverCtx),
				},
				{
					// Search project details with filters
					Method:  http.MethodGet,
					Path:    "/search",
					Handler: projects.SearchProjectDetailsHandler(serverCtx),
				},
				{
					// Get project technologies/tags
					Method:  http.MethodGet,
					Path:    "/tags",
					Handler: projects.GetProjectTagsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/projects"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Cors},
			[]rest.Route{
				{
					// Get complete resume data
					Method:  http.MethodGet,
					Path:    "/",
					Handler: resume.GetResumeDataHandler(serverCtx),
				},
				{
					// Get awards list
					Method:  http.MethodGet,
					Path:    "/awards",
					Handler: resume.GetAwardsHandler(serverCtx),
				},
				{
					// Get education list
					Method:  http.MethodGet,
					Path:    "/education",
					Handler: resume.GetEducationHandler(serverCtx),
				},
				{
					// Get work experience list
					Method:  http.MethodGet,
					Path:    "/experience",
					Handler: resume.GetWorkExperienceHandler(serverCtx),
				},
				{
					// Get personal information
					Method:  http.MethodGet,
					Path:    "/personal",
					Handler: resume.GetPersonalInfoHandler(serverCtx),
				},
				{
					// Get publications list
					Method:  http.MethodGet,
					Path:    "/publications",
					Handler: resume.GetPublicationsHandler(serverCtx),
				},
				{
					// Get recent updates
					Method:  http.MethodGet,
					Path:    "/recent",
					Handler: resume.GetRecentUpdatesHandler(serverCtx),
				},
				{
					// Get research projects list
					Method:  http.MethodGet,
					Path:    "/research",
					Handler: resume.GetResearchProjectsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/resume"),
	)
}
